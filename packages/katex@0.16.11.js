System.register([], (_exports, _context) => {

const bimport = specifier => {
	const dependencies = new Map([["katex","0.16.11"]]);
	return globalThis.bimport(globalThis.bimport.resolve(specifier, dependencies));
};


var dependencies = new Map();
var require = dependency => dependencies.get(dependency);
return {
setters: [],
execute: function() {
// Prevent esbuild from considering the context to be amd
const define = void 0;
const module = {};

const code = (module, require) => {
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
  }
  return to;
};
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: true
}), mod);

// .beyond/uimport/katex.0.16.11.js
var katex_0_16_11_exports = {};
__export(katex_0_16_11_exports, {
  default: () => katex_0_16_11_default
});
module.exports = __toCommonJS(katex_0_16_11_exports);

// node_modules/katex/dist/katex.mjs
var SourceLocation = class {
  constructor(lexer, start, end) {
    this.lexer = void 0;
    this.start = void 0;
    this.end = void 0;
    this.lexer = lexer;
    this.start = start;
    this.end = end;
  }
  static range(first, second) {
    if (!second) {
      return first && first.loc;
    } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
      return null;
    } else {
      return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
    }
  }
};
var Token = class {
  constructor(text2, loc) {
    this.text = void 0;
    this.loc = void 0;
    this.noexpand = void 0;
    this.treatAsRelax = void 0;
    this.text = text2;
    this.loc = loc;
  }
  range(endToken, text2) {
    return new Token(text2, SourceLocation.range(this, endToken));
  }
};
var ParseError = class {
  constructor(message, token) {
    this.name = void 0;
    this.position = void 0;
    this.length = void 0;
    this.rawMessage = void 0;
    var error = "KaTeX parse error: " + message;
    var start;
    var end;
    var loc = token && token.loc;
    if (loc && loc.start <= loc.end) {
      var input = loc.lexer.input;
      start = loc.start;
      end = loc.end;
      if (start === input.length) {
        error += " at end of input: ";
      } else {
        error += " at position " + (start + 1) + ": ";
      }
      var underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332");
      var left;
      if (start > 15) {
        left = "\u2026" + input.slice(start - 15, start);
      } else {
        left = input.slice(0, start);
      }
      var right;
      if (end + 15 < input.length) {
        right = input.slice(end, end + 15) + "\u2026";
      } else {
        right = input.slice(end);
      }
      error += left + underlined + right;
    }
    var self = new Error(error);
    self.name = "ParseError";
    self.__proto__ = ParseError.prototype;
    self.position = start;
    if (start != null && end != null) {
      self.length = end - start;
    }
    self.rawMessage = message;
    return self;
  }
};
ParseError.prototype.__proto__ = Error.prototype;
var contains = function contains2(list, elem) {
  return list.indexOf(elem) !== -1;
};
var deflt = function deflt2(setting, defaultIfUndefined) {
  return setting === void 0 ? defaultIfUndefined : setting;
};
var uppercase = /([A-Z])/g;
var hyphenate = function hyphenate2(str) {
  return str.replace(uppercase, "-$1").toLowerCase();
};
var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  '"': "&quot;",
  "'": "&#x27;"
};
var ESCAPE_REGEX = /[&><"']/g;
function escape(text2) {
  return String(text2).replace(ESCAPE_REGEX, match => ESCAPE_LOOKUP[match]);
}
var getBaseElem = function getBaseElem2(group) {
  if (group.type === "ordgroup") {
    if (group.body.length === 1) {
      return getBaseElem2(group.body[0]);
    } else {
      return group;
    }
  } else if (group.type === "color") {
    if (group.body.length === 1) {
      return getBaseElem2(group.body[0]);
    } else {
      return group;
    }
  } else if (group.type === "font") {
    return getBaseElem2(group.body);
  } else {
    return group;
  }
};
var isCharacterBox = function isCharacterBox2(group) {
  var baseElem = getBaseElem(group);
  return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "atom";
};
var assert = function assert2(value) {
  if (!value) {
    throw new Error("Expected non-null, but got " + String(value));
  }
  return value;
};
var protocolFromUrl = function protocolFromUrl2(url) {
  var protocol = /^[\x00-\x20]*([^\\/#?]*?)(:|&#0*58|&#x0*3a|&colon)/i.exec(url);
  if (!protocol) {
    return "_relative";
  }
  if (protocol[2] !== ":") {
    return null;
  }
  if (!/^[a-zA-Z][a-zA-Z0-9+\-.]*$/.test(protocol[1])) {
    return null;
  }
  return protocol[1].toLowerCase();
};
var utils = {
  contains,
  deflt,
  escape,
  hyphenate,
  getBaseElem,
  isCharacterBox,
  protocolFromUrl
};
var SETTINGS_SCHEMA = {
  displayMode: {
    type: "boolean",
    description: "Render math in display mode, which puts the math in display style (so \\int and \\sum are large, for example), and centers the math on the page on its own line.",
    cli: "-d, --display-mode"
  },
  output: {
    type: {
      enum: ["htmlAndMathml", "html", "mathml"]
    },
    description: "Determines the markup language of the output.",
    cli: "-F, --format <type>"
  },
  leqno: {
    type: "boolean",
    description: "Render display math in leqno style (left-justified tags)."
  },
  fleqn: {
    type: "boolean",
    description: "Render display math flush left."
  },
  throwOnError: {
    type: "boolean",
    default: true,
    cli: "-t, --no-throw-on-error",
    cliDescription: "Render errors (in the color given by --error-color) instead of throwing a ParseError exception when encountering an error."
  },
  errorColor: {
    type: "string",
    default: "#cc0000",
    cli: "-c, --error-color <color>",
    cliDescription: "A color string given in the format 'rgb' or 'rrggbb' (no #). This option determines the color of errors rendered by the -t option.",
    cliProcessor: color => "#" + color
  },
  macros: {
    type: "object",
    cli: "-m, --macro <def>",
    cliDescription: "Define custom macro of the form '\\foo:expansion' (use multiple -m arguments for multiple macros).",
    cliDefault: [],
    cliProcessor: (def, defs) => {
      defs.push(def);
      return defs;
    }
  },
  minRuleThickness: {
    type: "number",
    description: "Specifies a minimum thickness, in ems, for fraction lines, `\\sqrt` top lines, `{array}` vertical lines, `\\hline`, `\\hdashline`, `\\underline`, `\\overline`, and the borders of `\\fbox`, `\\boxed`, and `\\fcolorbox`.",
    processor: t => Math.max(0, t),
    cli: "--min-rule-thickness <size>",
    cliProcessor: parseFloat
  },
  colorIsTextColor: {
    type: "boolean",
    description: "Makes \\color behave like LaTeX's 2-argument \\textcolor, instead of LaTeX's one-argument \\color mode change.",
    cli: "-b, --color-is-text-color"
  },
  strict: {
    type: [{
      enum: ["warn", "ignore", "error"]
    }, "boolean", "function"],
    description: "Turn on strict / LaTeX faithfulness mode, which throws an error if the input uses features that are not supported by LaTeX.",
    cli: "-S, --strict",
    cliDefault: false
  },
  trust: {
    type: ["boolean", "function"],
    description: "Trust the input, enabling all HTML features such as \\url.",
    cli: "-T, --trust"
  },
  maxSize: {
    type: "number",
    default: Infinity,
    description: "If non-zero, all user-specified sizes, e.g. in \\rule{500em}{500em}, will be capped to maxSize ems. Otherwise, elements and spaces can be arbitrarily large",
    processor: s => Math.max(0, s),
    cli: "-s, --max-size <n>",
    cliProcessor: parseInt
  },
  maxExpand: {
    type: "number",
    default: 1e3,
    description: "Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. If set to Infinity, the macro expander will try to fully expand as in LaTeX.",
    processor: n => Math.max(0, n),
    cli: "-e, --max-expand <n>",
    cliProcessor: n => n === "Infinity" ? Infinity : parseInt(n)
  },
  globalGroup: {
    type: "boolean",
    cli: false
  }
};
function getDefaultValue(schema) {
  if (schema.default) {
    return schema.default;
  }
  var type = schema.type;
  var defaultType = Array.isArray(type) ? type[0] : type;
  if (typeof defaultType !== "string") {
    return defaultType.enum[0];
  }
  switch (defaultType) {
    case "boolean":
      return false;
    case "string":
      return "";
    case "number":
      return 0;
    case "object":
      return {};
  }
}
var Settings = class {
  constructor(options) {
    this.displayMode = void 0;
    this.output = void 0;
    this.leqno = void 0;
    this.fleqn = void 0;
    this.throwOnError = void 0;
    this.errorColor = void 0;
    this.macros = void 0;
    this.minRuleThickness = void 0;
    this.colorIsTextColor = void 0;
    this.strict = void 0;
    this.trust = void 0;
    this.maxSize = void 0;
    this.maxExpand = void 0;
    this.globalGroup = void 0;
    options = options || {};
    for (var prop in SETTINGS_SCHEMA) {
      if (SETTINGS_SCHEMA.hasOwnProperty(prop)) {
        var schema = SETTINGS_SCHEMA[prop];
        this[prop] = options[prop] !== void 0 ? schema.processor ? schema.processor(options[prop]) : options[prop] : getDefaultValue(schema);
      }
    }
  }
  reportNonstrict(errorCode, errorMsg, token) {
    var strict = this.strict;
    if (typeof strict === "function") {
      strict = strict(errorCode, errorMsg, token);
    }
    if (!strict || strict === "ignore") {
      return;
    } else if (strict === true || strict === "error") {
      throw new ParseError("LaTeX-incompatible input and strict mode is set to 'error': " + (errorMsg + " [" + errorCode + "]"), token);
    } else if (strict === "warn") {
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
    } else {
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
    }
  }
  useStrictBehavior(errorCode, errorMsg, token) {
    var strict = this.strict;
    if (typeof strict === "function") {
      try {
        strict = strict(errorCode, errorMsg, token);
      } catch (error) {
        strict = "error";
      }
    }
    if (!strict || strict === "ignore") {
      return false;
    } else if (strict === true || strict === "error") {
      return true;
    } else if (strict === "warn") {
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
      return false;
    } else {
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
      return false;
    }
  }
  isTrusted(context) {
    if (context.url && !context.protocol) {
      var protocol = utils.protocolFromUrl(context.url);
      if (protocol == null) {
        return false;
      }
      context.protocol = protocol;
    }
    var trust = typeof this.trust === "function" ? this.trust(context) : this.trust;
    return Boolean(trust);
  }
};
var Style = class {
  constructor(id, size, cramped) {
    this.id = void 0;
    this.size = void 0;
    this.cramped = void 0;
    this.id = id;
    this.size = size;
    this.cramped = cramped;
  }
  sup() {
    return styles[sup[this.id]];
  }
  sub() {
    return styles[sub[this.id]];
  }
  fracNum() {
    return styles[fracNum[this.id]];
  }
  fracDen() {
    return styles[fracDen[this.id]];
  }
  cramp() {
    return styles[cramp[this.id]];
  }
  text() {
    return styles[text$1[this.id]];
  }
  isTight() {
    return this.size >= 2;
  }
};
var D = 0;
var Dc = 1;
var T = 2;
var Tc = 3;
var S = 4;
var Sc = 5;
var SS = 6;
var SSc = 7;
var styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)];
var sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
var sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
var fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
var fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
var cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
var text$1 = [D, Dc, T, Tc, T, Tc, T, Tc];
var Style$1 = {
  DISPLAY: styles[D],
  TEXT: styles[T],
  SCRIPT: styles[S],
  SCRIPTSCRIPT: styles[SS]
};
var scriptData = [{
  name: "latin",
  blocks: [[256, 591], [768, 879]]
}, {
  name: "cyrillic",
  blocks: [[1024, 1279]]
}, {
  name: "armenian",
  blocks: [[1328, 1423]]
}, {
  name: "brahmic",
  blocks: [[2304, 4255]]
}, {
  name: "georgian",
  blocks: [[4256, 4351]]
}, {
  name: "cjk",
  blocks: [[12288, 12543], [19968, 40879], [65280, 65376]]
}, {
  name: "hangul",
  blocks: [[44032, 55215]]
}];
function scriptFromCodepoint(codepoint) {
  for (var i = 0; i < scriptData.length; i++) {
    var script = scriptData[i];
    for (var _i = 0; _i < script.blocks.length; _i++) {
      var block = script.blocks[_i];
      if (codepoint >= block[0] && codepoint <= block[1]) {
        return script.name;
      }
    }
  }
  return null;
}
var allBlocks = [];
scriptData.forEach(s => s.blocks.forEach(b => allBlocks.push(...b)));
function supportedCodepoint(codepoint) {
  for (var i = 0; i < allBlocks.length; i += 2) {
    if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {
      return true;
    }
  }
  return false;
}
var hLinePad = 80;
var sqrtMain = function sqrtMain2(extraVinculum, hLinePad2) {
  return "M95," + (622 + extraVinculum + hLinePad2) + "\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl" + extraVinculum / 2.075 + " -" + extraVinculum + "\nc5.3,-9.3,12,-14,20,-14\nH400000v" + (40 + extraVinculum) + "H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM" + (834 + extraVinculum) + " " + hLinePad2 + "h400000v" + (40 + extraVinculum) + "h-400000z";
};
var sqrtSize1 = function sqrtSize12(extraVinculum, hLinePad2) {
  return "M263," + (601 + extraVinculum + hLinePad2) + "c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl" + extraVinculum / 2.084 + " -" + extraVinculum + "\nc4.7,-7.3,11,-11,19,-11\nH40000v" + (40 + extraVinculum) + "H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM" + (1001 + extraVinculum) + " " + hLinePad2 + "h400000v" + (40 + extraVinculum) + "h-400000z";
};
var sqrtSize2 = function sqrtSize22(extraVinculum, hLinePad2) {
  return "M983 " + (10 + extraVinculum + hLinePad2) + "\nl" + extraVinculum / 3.13 + " -" + extraVinculum + "\nc4,-6.7,10,-10,18,-10 H400000v" + (40 + extraVinculum) + "\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM" + (1001 + extraVinculum) + " " + hLinePad2 + "h400000v" + (40 + extraVinculum) + "h-400000z";
};
var sqrtSize3 = function sqrtSize32(extraVinculum, hLinePad2) {
  return "M424," + (2398 + extraVinculum + hLinePad2) + "\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl" + extraVinculum / 4.223 + " -" + extraVinculum + "c4,-6.7,10,-10,18,-10 H400000\nv" + (40 + extraVinculum) + "H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M" + (1001 + extraVinculum) + " " + hLinePad2 + "\nh400000v" + (40 + extraVinculum) + "h-400000z";
};
var sqrtSize4 = function sqrtSize42(extraVinculum, hLinePad2) {
  return "M473," + (2713 + extraVinculum + hLinePad2) + "\nc339.3,-1799.3,509.3,-2700,510,-2702 l" + extraVinculum / 5.298 + " -" + extraVinculum + "\nc3.3,-7.3,9.3,-11,18,-11 H400000v" + (40 + extraVinculum) + "H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM" + (1001 + extraVinculum) + " " + hLinePad2 + "h400000v" + (40 + extraVinculum) + "H1017.7z";
};
var phasePath = function phasePath2(y) {
  var x = y / 2;
  return "M400000 " + y + " H0 L" + x + " 0 l65 45 L145 " + (y - 80) + " H400000z";
};
var sqrtTall = function sqrtTall2(extraVinculum, hLinePad2, viewBoxHeight) {
  var vertSegment = viewBoxHeight - 54 - hLinePad2 - extraVinculum;
  return "M702 " + (extraVinculum + hLinePad2) + "H400000" + (40 + extraVinculum) + "\nH742v" + vertSegment + "l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 " + hLinePad2 + "H400000v" + (40 + extraVinculum) + "H742z";
};
var sqrtPath = function sqrtPath2(size, extraVinculum, viewBoxHeight) {
  extraVinculum = 1e3 * extraVinculum;
  var path2 = "";
  switch (size) {
    case "sqrtMain":
      path2 = sqrtMain(extraVinculum, hLinePad);
      break;
    case "sqrtSize1":
      path2 = sqrtSize1(extraVinculum, hLinePad);
      break;
    case "sqrtSize2":
      path2 = sqrtSize2(extraVinculum, hLinePad);
      break;
    case "sqrtSize3":
      path2 = sqrtSize3(extraVinculum, hLinePad);
      break;
    case "sqrtSize4":
      path2 = sqrtSize4(extraVinculum, hLinePad);
      break;
    case "sqrtTall":
      path2 = sqrtTall(extraVinculum, hLinePad, viewBoxHeight);
  }
  return path2;
};
var innerPath = function innerPath2(name, height) {
  switch (name) {
    case "\u239C":
      return "M291 0 H417 V" + height + " H291z M291 0 H417 V" + height + " H291z";
    case "\u2223":
      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z";
    case "\u2225":
      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z" + ("M367 0 H410 V" + height + " H367z M367 0 H410 V" + height + " H367z");
    case "\u239F":
      return "M457 0 H583 V" + height + " H457z M457 0 H583 V" + height + " H457z";
    case "\u23A2":
      return "M319 0 H403 V" + height + " H319z M319 0 H403 V" + height + " H319z";
    case "\u23A5":
      return "M263 0 H347 V" + height + " H263z M263 0 H347 V" + height + " H263z";
    case "\u23AA":
      return "M384 0 H504 V" + height + " H384z M384 0 H504 V" + height + " H384z";
    case "\u23D0":
      return "M312 0 H355 V" + height + " H312z M312 0 H355 V" + height + " H312z";
    case "\u2016":
      return "M257 0 H300 V" + height + " H257z M257 0 H300 V" + height + " H257z" + ("M478 0 H521 V" + height + " H478z M478 0 H521 V" + height + " H478z");
    default:
      return "";
  }
};
var path = {
  doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
  doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
  leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
  leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
  leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
  leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
  leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
  leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
  leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
  leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
  leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
  lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
  leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
  leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
  leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
  longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
  midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
  midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
  oiintSize1: "M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",
  oiintSize2: "M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",
  oiiintSize1: "M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",
  oiiintSize2: "M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",
  rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
  rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
  rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
  rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
  rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
  rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
  rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
  rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
  rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
  righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
  rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
  rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
  twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
  twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
  tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
  tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
  tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
  tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
  vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
  widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
  widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
  widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
  widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
  widecheck1: "M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",
  widecheck2: "M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
  widecheck3: "M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
  widecheck4: "M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
  baraboveleftarrow: "M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",
  rightarrowabovebar: "M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",
  baraboveshortleftharpoon: "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
  rightharpoonaboveshortbar: "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
  shortbaraboveleftharpoon: "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
  shortrightharpoonabovebar: "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"
};
var tallDelim = function tallDelim2(label, midHeight) {
  switch (label) {
    case "lbrack":
      return "M403 1759 V84 H666 V0 H319 V1759 v" + midHeight + " v1759 h347 v-84\nH403z M403 1759 V0 H319 V1759 v" + midHeight + " v1759 h84z";
    case "rbrack":
      return "M347 1759 V0 H0 V84 H263 V1759 v" + midHeight + " v1759 H0 v84 H347z\nM347 1759 V0 H263 V1759 v" + midHeight + " v1759 h84z";
    case "vert":
      return "M145 15 v585 v" + midHeight + " v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v" + -midHeight + " v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v" + midHeight + " v585 h43z";
    case "doublevert":
      return "M145 15 v585 v" + midHeight + " v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v" + -midHeight + " v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v" + midHeight + " v585 h43z\nM367 15 v585 v" + midHeight + " v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v" + -midHeight + " v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M410 15 H367 v585 v" + midHeight + " v585 h43z";
    case "lfloor":
      return "M319 602 V0 H403 V602 v" + midHeight + " v1715 h263 v84 H319z\nMM319 602 V0 H403 V602 v" + midHeight + " v1715 H319z";
    case "rfloor":
      return "M319 602 V0 H403 V602 v" + midHeight + " v1799 H0 v-84 H319z\nMM319 602 V0 H403 V602 v" + midHeight + " v1715 H319z";
    case "lceil":
      return "M403 1759 V84 H666 V0 H319 V1759 v" + midHeight + " v602 h84z\nM403 1759 V0 H319 V1759 v" + midHeight + " v602 h84z";
    case "rceil":
      return "M347 1759 V0 H0 V84 H263 V1759 v" + midHeight + " v602 h84z\nM347 1759 V0 h-84 V1759 v" + midHeight + " v602 h84z";
    case "lparen":
      return "M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1\nc-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,\n-36,557 l0," + (midHeight + 84) + "c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,\n949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9\nc0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,\n-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189\nl0,-" + (midHeight + 92) + "c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,\n-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z";
    case "rparen":
      return "M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,\n63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5\nc11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0," + (midHeight + 9) + "\nc-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664\nc-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11\nc0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17\nc242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558\nl0,-" + (midHeight + 144) + "c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,\n-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z";
    default:
      throw new Error("Unknown stretchy delimiter.");
  }
};
var DocumentFragment = class {
  constructor(children) {
    this.children = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    this.children = children;
    this.classes = [];
    this.height = 0;
    this.depth = 0;
    this.maxFontSize = 0;
    this.style = {};
  }
  hasClass(className) {
    return utils.contains(this.classes, className);
  }
  toNode() {
    var frag = document.createDocumentFragment();
    for (var i = 0; i < this.children.length; i++) {
      frag.appendChild(this.children[i].toNode());
    }
    return frag;
  }
  toMarkup() {
    var markup = "";
    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }
    return markup;
  }
  toText() {
    var toText = child => child.toText();
    return this.children.map(toText).join("");
  }
};
var fontMetricsData = {
  "AMS-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "65": [0, 0.68889, 0, 0, 0.72222],
    "66": [0, 0.68889, 0, 0, 0.66667],
    "67": [0, 0.68889, 0, 0, 0.72222],
    "68": [0, 0.68889, 0, 0, 0.72222],
    "69": [0, 0.68889, 0, 0, 0.66667],
    "70": [0, 0.68889, 0, 0, 0.61111],
    "71": [0, 0.68889, 0, 0, 0.77778],
    "72": [0, 0.68889, 0, 0, 0.77778],
    "73": [0, 0.68889, 0, 0, 0.38889],
    "74": [0.16667, 0.68889, 0, 0, 0.5],
    "75": [0, 0.68889, 0, 0, 0.77778],
    "76": [0, 0.68889, 0, 0, 0.66667],
    "77": [0, 0.68889, 0, 0, 0.94445],
    "78": [0, 0.68889, 0, 0, 0.72222],
    "79": [0.16667, 0.68889, 0, 0, 0.77778],
    "80": [0, 0.68889, 0, 0, 0.61111],
    "81": [0.16667, 0.68889, 0, 0, 0.77778],
    "82": [0, 0.68889, 0, 0, 0.72222],
    "83": [0, 0.68889, 0, 0, 0.55556],
    "84": [0, 0.68889, 0, 0, 0.66667],
    "85": [0, 0.68889, 0, 0, 0.72222],
    "86": [0, 0.68889, 0, 0, 0.72222],
    "87": [0, 0.68889, 0, 0, 1],
    "88": [0, 0.68889, 0, 0, 0.72222],
    "89": [0, 0.68889, 0, 0, 0.72222],
    "90": [0, 0.68889, 0, 0, 0.66667],
    "107": [0, 0.68889, 0, 0, 0.55556],
    "160": [0, 0, 0, 0, 0.25],
    "165": [0, 0.675, 0.025, 0, 0.75],
    "174": [0.15559, 0.69224, 0, 0, 0.94666],
    "240": [0, 0.68889, 0, 0, 0.55556],
    "295": [0, 0.68889, 0, 0, 0.54028],
    "710": [0, 0.825, 0, 0, 2.33334],
    "732": [0, 0.9, 0, 0, 2.33334],
    "770": [0, 0.825, 0, 0, 2.33334],
    "771": [0, 0.9, 0, 0, 2.33334],
    "989": [0.08167, 0.58167, 0, 0, 0.77778],
    "1008": [0, 0.43056, 0.04028, 0, 0.66667],
    "8245": [0, 0.54986, 0, 0, 0.275],
    "8463": [0, 0.68889, 0, 0, 0.54028],
    "8487": [0, 0.68889, 0, 0, 0.72222],
    "8498": [0, 0.68889, 0, 0, 0.55556],
    "8502": [0, 0.68889, 0, 0, 0.66667],
    "8503": [0, 0.68889, 0, 0, 0.44445],
    "8504": [0, 0.68889, 0, 0, 0.66667],
    "8513": [0, 0.68889, 0, 0, 0.63889],
    "8592": [-0.03598, 0.46402, 0, 0, 0.5],
    "8594": [-0.03598, 0.46402, 0, 0, 0.5],
    "8602": [-0.13313, 0.36687, 0, 0, 1],
    "8603": [-0.13313, 0.36687, 0, 0, 1],
    "8606": [0.01354, 0.52239, 0, 0, 1],
    "8608": [0.01354, 0.52239, 0, 0, 1],
    "8610": [0.01354, 0.52239, 0, 0, 1.11111],
    "8611": [0.01354, 0.52239, 0, 0, 1.11111],
    "8619": [0, 0.54986, 0, 0, 1],
    "8620": [0, 0.54986, 0, 0, 1],
    "8621": [-0.13313, 0.37788, 0, 0, 1.38889],
    "8622": [-0.13313, 0.36687, 0, 0, 1],
    "8624": [0, 0.69224, 0, 0, 0.5],
    "8625": [0, 0.69224, 0, 0, 0.5],
    "8630": [0, 0.43056, 0, 0, 1],
    "8631": [0, 0.43056, 0, 0, 1],
    "8634": [0.08198, 0.58198, 0, 0, 0.77778],
    "8635": [0.08198, 0.58198, 0, 0, 0.77778],
    "8638": [0.19444, 0.69224, 0, 0, 0.41667],
    "8639": [0.19444, 0.69224, 0, 0, 0.41667],
    "8642": [0.19444, 0.69224, 0, 0, 0.41667],
    "8643": [0.19444, 0.69224, 0, 0, 0.41667],
    "8644": [0.1808, 0.675, 0, 0, 1],
    "8646": [0.1808, 0.675, 0, 0, 1],
    "8647": [0.1808, 0.675, 0, 0, 1],
    "8648": [0.19444, 0.69224, 0, 0, 0.83334],
    "8649": [0.1808, 0.675, 0, 0, 1],
    "8650": [0.19444, 0.69224, 0, 0, 0.83334],
    "8651": [0.01354, 0.52239, 0, 0, 1],
    "8652": [0.01354, 0.52239, 0, 0, 1],
    "8653": [-0.13313, 0.36687, 0, 0, 1],
    "8654": [-0.13313, 0.36687, 0, 0, 1],
    "8655": [-0.13313, 0.36687, 0, 0, 1],
    "8666": [0.13667, 0.63667, 0, 0, 1],
    "8667": [0.13667, 0.63667, 0, 0, 1],
    "8669": [-0.13313, 0.37788, 0, 0, 1],
    "8672": [-0.064, 0.437, 0, 0, 1.334],
    "8674": [-0.064, 0.437, 0, 0, 1.334],
    "8705": [0, 0.825, 0, 0, 0.5],
    "8708": [0, 0.68889, 0, 0, 0.55556],
    "8709": [0.08167, 0.58167, 0, 0, 0.77778],
    "8717": [0, 0.43056, 0, 0, 0.42917],
    "8722": [-0.03598, 0.46402, 0, 0, 0.5],
    "8724": [0.08198, 0.69224, 0, 0, 0.77778],
    "8726": [0.08167, 0.58167, 0, 0, 0.77778],
    "8733": [0, 0.69224, 0, 0, 0.77778],
    "8736": [0, 0.69224, 0, 0, 0.72222],
    "8737": [0, 0.69224, 0, 0, 0.72222],
    "8738": [0.03517, 0.52239, 0, 0, 0.72222],
    "8739": [0.08167, 0.58167, 0, 0, 0.22222],
    "8740": [0.25142, 0.74111, 0, 0, 0.27778],
    "8741": [0.08167, 0.58167, 0, 0, 0.38889],
    "8742": [0.25142, 0.74111, 0, 0, 0.5],
    "8756": [0, 0.69224, 0, 0, 0.66667],
    "8757": [0, 0.69224, 0, 0, 0.66667],
    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
    "8765": [-0.13313, 0.37788, 0, 0, 0.77778],
    "8769": [-0.13313, 0.36687, 0, 0, 0.77778],
    "8770": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8774": [0.30274, 0.79383, 0, 0, 0.77778],
    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
    "8778": [0.08167, 0.58167, 0, 0, 0.77778],
    "8782": [0.06062, 0.54986, 0, 0, 0.77778],
    "8783": [0.06062, 0.54986, 0, 0, 0.77778],
    "8785": [0.08198, 0.58198, 0, 0, 0.77778],
    "8786": [0.08198, 0.58198, 0, 0, 0.77778],
    "8787": [0.08198, 0.58198, 0, 0, 0.77778],
    "8790": [0, 0.69224, 0, 0, 0.77778],
    "8791": [0.22958, 0.72958, 0, 0, 0.77778],
    "8796": [0.08198, 0.91667, 0, 0, 0.77778],
    "8806": [0.25583, 0.75583, 0, 0, 0.77778],
    "8807": [0.25583, 0.75583, 0, 0, 0.77778],
    "8808": [0.25142, 0.75726, 0, 0, 0.77778],
    "8809": [0.25142, 0.75726, 0, 0, 0.77778],
    "8812": [0.25583, 0.75583, 0, 0, 0.5],
    "8814": [0.20576, 0.70576, 0, 0, 0.77778],
    "8815": [0.20576, 0.70576, 0, 0, 0.77778],
    "8816": [0.30274, 0.79383, 0, 0, 0.77778],
    "8817": [0.30274, 0.79383, 0, 0, 0.77778],
    "8818": [0.22958, 0.72958, 0, 0, 0.77778],
    "8819": [0.22958, 0.72958, 0, 0, 0.77778],
    "8822": [0.1808, 0.675, 0, 0, 0.77778],
    "8823": [0.1808, 0.675, 0, 0, 0.77778],
    "8828": [0.13667, 0.63667, 0, 0, 0.77778],
    "8829": [0.13667, 0.63667, 0, 0, 0.77778],
    "8830": [0.22958, 0.72958, 0, 0, 0.77778],
    "8831": [0.22958, 0.72958, 0, 0, 0.77778],
    "8832": [0.20576, 0.70576, 0, 0, 0.77778],
    "8833": [0.20576, 0.70576, 0, 0, 0.77778],
    "8840": [0.30274, 0.79383, 0, 0, 0.77778],
    "8841": [0.30274, 0.79383, 0, 0, 0.77778],
    "8842": [0.13597, 0.63597, 0, 0, 0.77778],
    "8843": [0.13597, 0.63597, 0, 0, 0.77778],
    "8847": [0.03517, 0.54986, 0, 0, 0.77778],
    "8848": [0.03517, 0.54986, 0, 0, 0.77778],
    "8858": [0.08198, 0.58198, 0, 0, 0.77778],
    "8859": [0.08198, 0.58198, 0, 0, 0.77778],
    "8861": [0.08198, 0.58198, 0, 0, 0.77778],
    "8862": [0, 0.675, 0, 0, 0.77778],
    "8863": [0, 0.675, 0, 0, 0.77778],
    "8864": [0, 0.675, 0, 0, 0.77778],
    "8865": [0, 0.675, 0, 0, 0.77778],
    "8872": [0, 0.69224, 0, 0, 0.61111],
    "8873": [0, 0.69224, 0, 0, 0.72222],
    "8874": [0, 0.69224, 0, 0, 0.88889],
    "8876": [0, 0.68889, 0, 0, 0.61111],
    "8877": [0, 0.68889, 0, 0, 0.61111],
    "8878": [0, 0.68889, 0, 0, 0.72222],
    "8879": [0, 0.68889, 0, 0, 0.72222],
    "8882": [0.03517, 0.54986, 0, 0, 0.77778],
    "8883": [0.03517, 0.54986, 0, 0, 0.77778],
    "8884": [0.13667, 0.63667, 0, 0, 0.77778],
    "8885": [0.13667, 0.63667, 0, 0, 0.77778],
    "8888": [0, 0.54986, 0, 0, 1.11111],
    "8890": [0.19444, 0.43056, 0, 0, 0.55556],
    "8891": [0.19444, 0.69224, 0, 0, 0.61111],
    "8892": [0.19444, 0.69224, 0, 0, 0.61111],
    "8901": [0, 0.54986, 0, 0, 0.27778],
    "8903": [0.08167, 0.58167, 0, 0, 0.77778],
    "8905": [0.08167, 0.58167, 0, 0, 0.77778],
    "8906": [0.08167, 0.58167, 0, 0, 0.77778],
    "8907": [0, 0.69224, 0, 0, 0.77778],
    "8908": [0, 0.69224, 0, 0, 0.77778],
    "8909": [-0.03598, 0.46402, 0, 0, 0.77778],
    "8910": [0, 0.54986, 0, 0, 0.76042],
    "8911": [0, 0.54986, 0, 0, 0.76042],
    "8912": [0.03517, 0.54986, 0, 0, 0.77778],
    "8913": [0.03517, 0.54986, 0, 0, 0.77778],
    "8914": [0, 0.54986, 0, 0, 0.66667],
    "8915": [0, 0.54986, 0, 0, 0.66667],
    "8916": [0, 0.69224, 0, 0, 0.66667],
    "8918": [0.0391, 0.5391, 0, 0, 0.77778],
    "8919": [0.0391, 0.5391, 0, 0, 0.77778],
    "8920": [0.03517, 0.54986, 0, 0, 1.33334],
    "8921": [0.03517, 0.54986, 0, 0, 1.33334],
    "8922": [0.38569, 0.88569, 0, 0, 0.77778],
    "8923": [0.38569, 0.88569, 0, 0, 0.77778],
    "8926": [0.13667, 0.63667, 0, 0, 0.77778],
    "8927": [0.13667, 0.63667, 0, 0, 0.77778],
    "8928": [0.30274, 0.79383, 0, 0, 0.77778],
    "8929": [0.30274, 0.79383, 0, 0, 0.77778],
    "8934": [0.23222, 0.74111, 0, 0, 0.77778],
    "8935": [0.23222, 0.74111, 0, 0, 0.77778],
    "8936": [0.23222, 0.74111, 0, 0, 0.77778],
    "8937": [0.23222, 0.74111, 0, 0, 0.77778],
    "8938": [0.20576, 0.70576, 0, 0, 0.77778],
    "8939": [0.20576, 0.70576, 0, 0, 0.77778],
    "8940": [0.30274, 0.79383, 0, 0, 0.77778],
    "8941": [0.30274, 0.79383, 0, 0, 0.77778],
    "8994": [0.19444, 0.69224, 0, 0, 0.77778],
    "8995": [0.19444, 0.69224, 0, 0, 0.77778],
    "9416": [0.15559, 0.69224, 0, 0, 0.90222],
    "9484": [0, 0.69224, 0, 0, 0.5],
    "9488": [0, 0.69224, 0, 0, 0.5],
    "9492": [0, 0.37788, 0, 0, 0.5],
    "9496": [0, 0.37788, 0, 0, 0.5],
    "9585": [0.19444, 0.68889, 0, 0, 0.88889],
    "9586": [0.19444, 0.74111, 0, 0, 0.88889],
    "9632": [0, 0.675, 0, 0, 0.77778],
    "9633": [0, 0.675, 0, 0, 0.77778],
    "9650": [0, 0.54986, 0, 0, 0.72222],
    "9651": [0, 0.54986, 0, 0, 0.72222],
    "9654": [0.03517, 0.54986, 0, 0, 0.77778],
    "9660": [0, 0.54986, 0, 0, 0.72222],
    "9661": [0, 0.54986, 0, 0, 0.72222],
    "9664": [0.03517, 0.54986, 0, 0, 0.77778],
    "9674": [0.11111, 0.69224, 0, 0, 0.66667],
    "9733": [0.19444, 0.69224, 0, 0, 0.94445],
    "10003": [0, 0.69224, 0, 0, 0.83334],
    "10016": [0, 0.69224, 0, 0, 0.83334],
    "10731": [0.11111, 0.69224, 0, 0, 0.66667],
    "10846": [0.19444, 0.75583, 0, 0, 0.61111],
    "10877": [0.13667, 0.63667, 0, 0, 0.77778],
    "10878": [0.13667, 0.63667, 0, 0, 0.77778],
    "10885": [0.25583, 0.75583, 0, 0, 0.77778],
    "10886": [0.25583, 0.75583, 0, 0, 0.77778],
    "10887": [0.13597, 0.63597, 0, 0, 0.77778],
    "10888": [0.13597, 0.63597, 0, 0, 0.77778],
    "10889": [0.26167, 0.75726, 0, 0, 0.77778],
    "10890": [0.26167, 0.75726, 0, 0, 0.77778],
    "10891": [0.48256, 0.98256, 0, 0, 0.77778],
    "10892": [0.48256, 0.98256, 0, 0, 0.77778],
    "10901": [0.13667, 0.63667, 0, 0, 0.77778],
    "10902": [0.13667, 0.63667, 0, 0, 0.77778],
    "10933": [0.25142, 0.75726, 0, 0, 0.77778],
    "10934": [0.25142, 0.75726, 0, 0, 0.77778],
    "10935": [0.26167, 0.75726, 0, 0, 0.77778],
    "10936": [0.26167, 0.75726, 0, 0, 0.77778],
    "10937": [0.26167, 0.75726, 0, 0, 0.77778],
    "10938": [0.26167, 0.75726, 0, 0, 0.77778],
    "10949": [0.25583, 0.75583, 0, 0, 0.77778],
    "10950": [0.25583, 0.75583, 0, 0, 0.77778],
    "10955": [0.28481, 0.79383, 0, 0, 0.77778],
    "10956": [0.28481, 0.79383, 0, 0, 0.77778],
    "57350": [0.08167, 0.58167, 0, 0, 0.22222],
    "57351": [0.08167, 0.58167, 0, 0, 0.38889],
    "57352": [0.08167, 0.58167, 0, 0, 0.77778],
    "57353": [0, 0.43056, 0.04028, 0, 0.66667],
    "57356": [0.25142, 0.75726, 0, 0, 0.77778],
    "57357": [0.25142, 0.75726, 0, 0, 0.77778],
    "57358": [0.41951, 0.91951, 0, 0, 0.77778],
    "57359": [0.30274, 0.79383, 0, 0, 0.77778],
    "57360": [0.30274, 0.79383, 0, 0, 0.77778],
    "57361": [0.41951, 0.91951, 0, 0, 0.77778],
    "57366": [0.25142, 0.75726, 0, 0, 0.77778],
    "57367": [0.25142, 0.75726, 0, 0, 0.77778],
    "57368": [0.25142, 0.75726, 0, 0, 0.77778],
    "57369": [0.25142, 0.75726, 0, 0, 0.77778],
    "57370": [0.13597, 0.63597, 0, 0, 0.77778],
    "57371": [0.13597, 0.63597, 0, 0, 0.77778]
  },
  "Caligraphic-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "65": [0, 0.68333, 0, 0.19445, 0.79847],
    "66": [0, 0.68333, 0.03041, 0.13889, 0.65681],
    "67": [0, 0.68333, 0.05834, 0.13889, 0.52653],
    "68": [0, 0.68333, 0.02778, 0.08334, 0.77139],
    "69": [0, 0.68333, 0.08944, 0.11111, 0.52778],
    "70": [0, 0.68333, 0.09931, 0.11111, 0.71875],
    "71": [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
    "72": [0, 0.68333, 965e-5, 0.11111, 0.84452],
    "73": [0, 0.68333, 0.07382, 0, 0.54452],
    "74": [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
    "75": [0, 0.68333, 0.01445, 0.05556, 0.76195],
    "76": [0, 0.68333, 0, 0.13889, 0.68972],
    "77": [0, 0.68333, 0, 0.13889, 1.2009],
    "78": [0, 0.68333, 0.14736, 0.08334, 0.82049],
    "79": [0, 0.68333, 0.02778, 0.11111, 0.79611],
    "80": [0, 0.68333, 0.08222, 0.08334, 0.69556],
    "81": [0.09722, 0.68333, 0, 0.11111, 0.81667],
    "82": [0, 0.68333, 0, 0.08334, 0.8475],
    "83": [0, 0.68333, 0.075, 0.13889, 0.60556],
    "84": [0, 0.68333, 0.25417, 0, 0.54464],
    "85": [0, 0.68333, 0.09931, 0.08334, 0.62583],
    "86": [0, 0.68333, 0.08222, 0, 0.61278],
    "87": [0, 0.68333, 0.08222, 0.08334, 0.98778],
    "88": [0, 0.68333, 0.14643, 0.13889, 0.7133],
    "89": [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
    "90": [0, 0.68333, 0.07944, 0.13889, 0.72473],
    "160": [0, 0, 0, 0, 0.25]
  },
  "Fraktur-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69141, 0, 0, 0.29574],
    "34": [0, 0.69141, 0, 0, 0.21471],
    "38": [0, 0.69141, 0, 0, 0.73786],
    "39": [0, 0.69141, 0, 0, 0.21201],
    "40": [0.24982, 0.74947, 0, 0, 0.38865],
    "41": [0.24982, 0.74947, 0, 0, 0.38865],
    "42": [0, 0.62119, 0, 0, 0.27764],
    "43": [0.08319, 0.58283, 0, 0, 0.75623],
    "44": [0, 0.10803, 0, 0, 0.27764],
    "45": [0.08319, 0.58283, 0, 0, 0.75623],
    "46": [0, 0.10803, 0, 0, 0.27764],
    "47": [0.24982, 0.74947, 0, 0, 0.50181],
    "48": [0, 0.47534, 0, 0, 0.50181],
    "49": [0, 0.47534, 0, 0, 0.50181],
    "50": [0, 0.47534, 0, 0, 0.50181],
    "51": [0.18906, 0.47534, 0, 0, 0.50181],
    "52": [0.18906, 0.47534, 0, 0, 0.50181],
    "53": [0.18906, 0.47534, 0, 0, 0.50181],
    "54": [0, 0.69141, 0, 0, 0.50181],
    "55": [0.18906, 0.47534, 0, 0, 0.50181],
    "56": [0, 0.69141, 0, 0, 0.50181],
    "57": [0.18906, 0.47534, 0, 0, 0.50181],
    "58": [0, 0.47534, 0, 0, 0.21606],
    "59": [0.12604, 0.47534, 0, 0, 0.21606],
    "61": [-0.13099, 0.36866, 0, 0, 0.75623],
    "63": [0, 0.69141, 0, 0, 0.36245],
    "65": [0, 0.69141, 0, 0, 0.7176],
    "66": [0, 0.69141, 0, 0, 0.88397],
    "67": [0, 0.69141, 0, 0, 0.61254],
    "68": [0, 0.69141, 0, 0, 0.83158],
    "69": [0, 0.69141, 0, 0, 0.66278],
    "70": [0.12604, 0.69141, 0, 0, 0.61119],
    "71": [0, 0.69141, 0, 0, 0.78539],
    "72": [0.06302, 0.69141, 0, 0, 0.7203],
    "73": [0, 0.69141, 0, 0, 0.55448],
    "74": [0.12604, 0.69141, 0, 0, 0.55231],
    "75": [0, 0.69141, 0, 0, 0.66845],
    "76": [0, 0.69141, 0, 0, 0.66602],
    "77": [0, 0.69141, 0, 0, 1.04953],
    "78": [0, 0.69141, 0, 0, 0.83212],
    "79": [0, 0.69141, 0, 0, 0.82699],
    "80": [0.18906, 0.69141, 0, 0, 0.82753],
    "81": [0.03781, 0.69141, 0, 0, 0.82699],
    "82": [0, 0.69141, 0, 0, 0.82807],
    "83": [0, 0.69141, 0, 0, 0.82861],
    "84": [0, 0.69141, 0, 0, 0.66899],
    "85": [0, 0.69141, 0, 0, 0.64576],
    "86": [0, 0.69141, 0, 0, 0.83131],
    "87": [0, 0.69141, 0, 0, 1.04602],
    "88": [0, 0.69141, 0, 0, 0.71922],
    "89": [0.18906, 0.69141, 0, 0, 0.83293],
    "90": [0.12604, 0.69141, 0, 0, 0.60201],
    "91": [0.24982, 0.74947, 0, 0, 0.27764],
    "93": [0.24982, 0.74947, 0, 0, 0.27764],
    "94": [0, 0.69141, 0, 0, 0.49965],
    "97": [0, 0.47534, 0, 0, 0.50046],
    "98": [0, 0.69141, 0, 0, 0.51315],
    "99": [0, 0.47534, 0, 0, 0.38946],
    "100": [0, 0.62119, 0, 0, 0.49857],
    "101": [0, 0.47534, 0, 0, 0.40053],
    "102": [0.18906, 0.69141, 0, 0, 0.32626],
    "103": [0.18906, 0.47534, 0, 0, 0.5037],
    "104": [0.18906, 0.69141, 0, 0, 0.52126],
    "105": [0, 0.69141, 0, 0, 0.27899],
    "106": [0, 0.69141, 0, 0, 0.28088],
    "107": [0, 0.69141, 0, 0, 0.38946],
    "108": [0, 0.69141, 0, 0, 0.27953],
    "109": [0, 0.47534, 0, 0, 0.76676],
    "110": [0, 0.47534, 0, 0, 0.52666],
    "111": [0, 0.47534, 0, 0, 0.48885],
    "112": [0.18906, 0.52396, 0, 0, 0.50046],
    "113": [0.18906, 0.47534, 0, 0, 0.48912],
    "114": [0, 0.47534, 0, 0, 0.38919],
    "115": [0, 0.47534, 0, 0, 0.44266],
    "116": [0, 0.62119, 0, 0, 0.33301],
    "117": [0, 0.47534, 0, 0, 0.5172],
    "118": [0, 0.52396, 0, 0, 0.5118],
    "119": [0, 0.52396, 0, 0, 0.77351],
    "120": [0.18906, 0.47534, 0, 0, 0.38865],
    "121": [0.18906, 0.47534, 0, 0, 0.49884],
    "122": [0.18906, 0.47534, 0, 0, 0.39054],
    "160": [0, 0, 0, 0, 0.25],
    "8216": [0, 0.69141, 0, 0, 0.21471],
    "8217": [0, 0.69141, 0, 0, 0.21471],
    "58112": [0, 0.62119, 0, 0, 0.49749],
    "58113": [0, 0.62119, 0, 0, 0.4983],
    "58114": [0.18906, 0.69141, 0, 0, 0.33328],
    "58115": [0.18906, 0.69141, 0, 0, 0.32923],
    "58116": [0.18906, 0.47534, 0, 0, 0.50343],
    "58117": [0, 0.69141, 0, 0, 0.33301],
    "58118": [0, 0.62119, 0, 0, 0.33409],
    "58119": [0, 0.47534, 0, 0, 0.50073]
  },
  "Main-Bold": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.35],
    "34": [0, 0.69444, 0, 0, 0.60278],
    "35": [0.19444, 0.69444, 0, 0, 0.95833],
    "36": [0.05556, 0.75, 0, 0, 0.575],
    "37": [0.05556, 0.75, 0, 0, 0.95833],
    "38": [0, 0.69444, 0, 0, 0.89444],
    "39": [0, 0.69444, 0, 0, 0.31944],
    "40": [0.25, 0.75, 0, 0, 0.44722],
    "41": [0.25, 0.75, 0, 0, 0.44722],
    "42": [0, 0.75, 0, 0, 0.575],
    "43": [0.13333, 0.63333, 0, 0, 0.89444],
    "44": [0.19444, 0.15556, 0, 0, 0.31944],
    "45": [0, 0.44444, 0, 0, 0.38333],
    "46": [0, 0.15556, 0, 0, 0.31944],
    "47": [0.25, 0.75, 0, 0, 0.575],
    "48": [0, 0.64444, 0, 0, 0.575],
    "49": [0, 0.64444, 0, 0, 0.575],
    "50": [0, 0.64444, 0, 0, 0.575],
    "51": [0, 0.64444, 0, 0, 0.575],
    "52": [0, 0.64444, 0, 0, 0.575],
    "53": [0, 0.64444, 0, 0, 0.575],
    "54": [0, 0.64444, 0, 0, 0.575],
    "55": [0, 0.64444, 0, 0, 0.575],
    "56": [0, 0.64444, 0, 0, 0.575],
    "57": [0, 0.64444, 0, 0, 0.575],
    "58": [0, 0.44444, 0, 0, 0.31944],
    "59": [0.19444, 0.44444, 0, 0, 0.31944],
    "60": [0.08556, 0.58556, 0, 0, 0.89444],
    "61": [-0.10889, 0.39111, 0, 0, 0.89444],
    "62": [0.08556, 0.58556, 0, 0, 0.89444],
    "63": [0, 0.69444, 0, 0, 0.54305],
    "64": [0, 0.69444, 0, 0, 0.89444],
    "65": [0, 0.68611, 0, 0, 0.86944],
    "66": [0, 0.68611, 0, 0, 0.81805],
    "67": [0, 0.68611, 0, 0, 0.83055],
    "68": [0, 0.68611, 0, 0, 0.88194],
    "69": [0, 0.68611, 0, 0, 0.75555],
    "70": [0, 0.68611, 0, 0, 0.72361],
    "71": [0, 0.68611, 0, 0, 0.90416],
    "72": [0, 0.68611, 0, 0, 0.9],
    "73": [0, 0.68611, 0, 0, 0.43611],
    "74": [0, 0.68611, 0, 0, 0.59444],
    "75": [0, 0.68611, 0, 0, 0.90138],
    "76": [0, 0.68611, 0, 0, 0.69166],
    "77": [0, 0.68611, 0, 0, 1.09166],
    "78": [0, 0.68611, 0, 0, 0.9],
    "79": [0, 0.68611, 0, 0, 0.86388],
    "80": [0, 0.68611, 0, 0, 0.78611],
    "81": [0.19444, 0.68611, 0, 0, 0.86388],
    "82": [0, 0.68611, 0, 0, 0.8625],
    "83": [0, 0.68611, 0, 0, 0.63889],
    "84": [0, 0.68611, 0, 0, 0.8],
    "85": [0, 0.68611, 0, 0, 0.88472],
    "86": [0, 0.68611, 0.01597, 0, 0.86944],
    "87": [0, 0.68611, 0.01597, 0, 1.18888],
    "88": [0, 0.68611, 0, 0, 0.86944],
    "89": [0, 0.68611, 0.02875, 0, 0.86944],
    "90": [0, 0.68611, 0, 0, 0.70277],
    "91": [0.25, 0.75, 0, 0, 0.31944],
    "92": [0.25, 0.75, 0, 0, 0.575],
    "93": [0.25, 0.75, 0, 0, 0.31944],
    "94": [0, 0.69444, 0, 0, 0.575],
    "95": [0.31, 0.13444, 0.03194, 0, 0.575],
    "97": [0, 0.44444, 0, 0, 0.55902],
    "98": [0, 0.69444, 0, 0, 0.63889],
    "99": [0, 0.44444, 0, 0, 0.51111],
    "100": [0, 0.69444, 0, 0, 0.63889],
    "101": [0, 0.44444, 0, 0, 0.52708],
    "102": [0, 0.69444, 0.10903, 0, 0.35139],
    "103": [0.19444, 0.44444, 0.01597, 0, 0.575],
    "104": [0, 0.69444, 0, 0, 0.63889],
    "105": [0, 0.69444, 0, 0, 0.31944],
    "106": [0.19444, 0.69444, 0, 0, 0.35139],
    "107": [0, 0.69444, 0, 0, 0.60694],
    "108": [0, 0.69444, 0, 0, 0.31944],
    "109": [0, 0.44444, 0, 0, 0.95833],
    "110": [0, 0.44444, 0, 0, 0.63889],
    "111": [0, 0.44444, 0, 0, 0.575],
    "112": [0.19444, 0.44444, 0, 0, 0.63889],
    "113": [0.19444, 0.44444, 0, 0, 0.60694],
    "114": [0, 0.44444, 0, 0, 0.47361],
    "115": [0, 0.44444, 0, 0, 0.45361],
    "116": [0, 0.63492, 0, 0, 0.44722],
    "117": [0, 0.44444, 0, 0, 0.63889],
    "118": [0, 0.44444, 0.01597, 0, 0.60694],
    "119": [0, 0.44444, 0.01597, 0, 0.83055],
    "120": [0, 0.44444, 0, 0, 0.60694],
    "121": [0.19444, 0.44444, 0.01597, 0, 0.60694],
    "122": [0, 0.44444, 0, 0, 0.51111],
    "123": [0.25, 0.75, 0, 0, 0.575],
    "124": [0.25, 0.75, 0, 0, 0.31944],
    "125": [0.25, 0.75, 0, 0, 0.575],
    "126": [0.35, 0.34444, 0, 0, 0.575],
    "160": [0, 0, 0, 0, 0.25],
    "163": [0, 0.69444, 0, 0, 0.86853],
    "168": [0, 0.69444, 0, 0, 0.575],
    "172": [0, 0.44444, 0, 0, 0.76666],
    "176": [0, 0.69444, 0, 0, 0.86944],
    "177": [0.13333, 0.63333, 0, 0, 0.89444],
    "184": [0.17014, 0, 0, 0, 0.51111],
    "198": [0, 0.68611, 0, 0, 1.04166],
    "215": [0.13333, 0.63333, 0, 0, 0.89444],
    "216": [0.04861, 0.73472, 0, 0, 0.89444],
    "223": [0, 0.69444, 0, 0, 0.59722],
    "230": [0, 0.44444, 0, 0, 0.83055],
    "247": [0.13333, 0.63333, 0, 0, 0.89444],
    "248": [0.09722, 0.54167, 0, 0, 0.575],
    "305": [0, 0.44444, 0, 0, 0.31944],
    "338": [0, 0.68611, 0, 0, 1.16944],
    "339": [0, 0.44444, 0, 0, 0.89444],
    "567": [0.19444, 0.44444, 0, 0, 0.35139],
    "710": [0, 0.69444, 0, 0, 0.575],
    "711": [0, 0.63194, 0, 0, 0.575],
    "713": [0, 0.59611, 0, 0, 0.575],
    "714": [0, 0.69444, 0, 0, 0.575],
    "715": [0, 0.69444, 0, 0, 0.575],
    "728": [0, 0.69444, 0, 0, 0.575],
    "729": [0, 0.69444, 0, 0, 0.31944],
    "730": [0, 0.69444, 0, 0, 0.86944],
    "732": [0, 0.69444, 0, 0, 0.575],
    "733": [0, 0.69444, 0, 0, 0.575],
    "915": [0, 0.68611, 0, 0, 0.69166],
    "916": [0, 0.68611, 0, 0, 0.95833],
    "920": [0, 0.68611, 0, 0, 0.89444],
    "923": [0, 0.68611, 0, 0, 0.80555],
    "926": [0, 0.68611, 0, 0, 0.76666],
    "928": [0, 0.68611, 0, 0, 0.9],
    "931": [0, 0.68611, 0, 0, 0.83055],
    "933": [0, 0.68611, 0, 0, 0.89444],
    "934": [0, 0.68611, 0, 0, 0.83055],
    "936": [0, 0.68611, 0, 0, 0.89444],
    "937": [0, 0.68611, 0, 0, 0.83055],
    "8211": [0, 0.44444, 0.03194, 0, 0.575],
    "8212": [0, 0.44444, 0.03194, 0, 1.14999],
    "8216": [0, 0.69444, 0, 0, 0.31944],
    "8217": [0, 0.69444, 0, 0, 0.31944],
    "8220": [0, 0.69444, 0, 0, 0.60278],
    "8221": [0, 0.69444, 0, 0, 0.60278],
    "8224": [0.19444, 0.69444, 0, 0, 0.51111],
    "8225": [0.19444, 0.69444, 0, 0, 0.51111],
    "8242": [0, 0.55556, 0, 0, 0.34444],
    "8407": [0, 0.72444, 0.15486, 0, 0.575],
    "8463": [0, 0.69444, 0, 0, 0.66759],
    "8465": [0, 0.69444, 0, 0, 0.83055],
    "8467": [0, 0.69444, 0, 0, 0.47361],
    "8472": [0.19444, 0.44444, 0, 0, 0.74027],
    "8476": [0, 0.69444, 0, 0, 0.83055],
    "8501": [0, 0.69444, 0, 0, 0.70277],
    "8592": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8593": [0.19444, 0.69444, 0, 0, 0.575],
    "8594": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8595": [0.19444, 0.69444, 0, 0, 0.575],
    "8596": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8597": [0.25, 0.75, 0, 0, 0.575],
    "8598": [0.19444, 0.69444, 0, 0, 1.14999],
    "8599": [0.19444, 0.69444, 0, 0, 1.14999],
    "8600": [0.19444, 0.69444, 0, 0, 1.14999],
    "8601": [0.19444, 0.69444, 0, 0, 1.14999],
    "8636": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8637": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8640": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8641": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8656": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8657": [0.19444, 0.69444, 0, 0, 0.70277],
    "8658": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8659": [0.19444, 0.69444, 0, 0, 0.70277],
    "8660": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8661": [0.25, 0.75, 0, 0, 0.70277],
    "8704": [0, 0.69444, 0, 0, 0.63889],
    "8706": [0, 0.69444, 0.06389, 0, 0.62847],
    "8707": [0, 0.69444, 0, 0, 0.63889],
    "8709": [0.05556, 0.75, 0, 0, 0.575],
    "8711": [0, 0.68611, 0, 0, 0.95833],
    "8712": [0.08556, 0.58556, 0, 0, 0.76666],
    "8715": [0.08556, 0.58556, 0, 0, 0.76666],
    "8722": [0.13333, 0.63333, 0, 0, 0.89444],
    "8723": [0.13333, 0.63333, 0, 0, 0.89444],
    "8725": [0.25, 0.75, 0, 0, 0.575],
    "8726": [0.25, 0.75, 0, 0, 0.575],
    "8727": [-0.02778, 0.47222, 0, 0, 0.575],
    "8728": [-0.02639, 0.47361, 0, 0, 0.575],
    "8729": [-0.02639, 0.47361, 0, 0, 0.575],
    "8730": [0.18, 0.82, 0, 0, 0.95833],
    "8733": [0, 0.44444, 0, 0, 0.89444],
    "8734": [0, 0.44444, 0, 0, 1.14999],
    "8736": [0, 0.69224, 0, 0, 0.72222],
    "8739": [0.25, 0.75, 0, 0, 0.31944],
    "8741": [0.25, 0.75, 0, 0, 0.575],
    "8743": [0, 0.55556, 0, 0, 0.76666],
    "8744": [0, 0.55556, 0, 0, 0.76666],
    "8745": [0, 0.55556, 0, 0, 0.76666],
    "8746": [0, 0.55556, 0, 0, 0.76666],
    "8747": [0.19444, 0.69444, 0.12778, 0, 0.56875],
    "8764": [-0.10889, 0.39111, 0, 0, 0.89444],
    "8768": [0.19444, 0.69444, 0, 0, 0.31944],
    "8771": [222e-5, 0.50222, 0, 0, 0.89444],
    "8773": [0.027, 0.638, 0, 0, 0.894],
    "8776": [0.02444, 0.52444, 0, 0, 0.89444],
    "8781": [222e-5, 0.50222, 0, 0, 0.89444],
    "8801": [222e-5, 0.50222, 0, 0, 0.89444],
    "8804": [0.19667, 0.69667, 0, 0, 0.89444],
    "8805": [0.19667, 0.69667, 0, 0, 0.89444],
    "8810": [0.08556, 0.58556, 0, 0, 1.14999],
    "8811": [0.08556, 0.58556, 0, 0, 1.14999],
    "8826": [0.08556, 0.58556, 0, 0, 0.89444],
    "8827": [0.08556, 0.58556, 0, 0, 0.89444],
    "8834": [0.08556, 0.58556, 0, 0, 0.89444],
    "8835": [0.08556, 0.58556, 0, 0, 0.89444],
    "8838": [0.19667, 0.69667, 0, 0, 0.89444],
    "8839": [0.19667, 0.69667, 0, 0, 0.89444],
    "8846": [0, 0.55556, 0, 0, 0.76666],
    "8849": [0.19667, 0.69667, 0, 0, 0.89444],
    "8850": [0.19667, 0.69667, 0, 0, 0.89444],
    "8851": [0, 0.55556, 0, 0, 0.76666],
    "8852": [0, 0.55556, 0, 0, 0.76666],
    "8853": [0.13333, 0.63333, 0, 0, 0.89444],
    "8854": [0.13333, 0.63333, 0, 0, 0.89444],
    "8855": [0.13333, 0.63333, 0, 0, 0.89444],
    "8856": [0.13333, 0.63333, 0, 0, 0.89444],
    "8857": [0.13333, 0.63333, 0, 0, 0.89444],
    "8866": [0, 0.69444, 0, 0, 0.70277],
    "8867": [0, 0.69444, 0, 0, 0.70277],
    "8868": [0, 0.69444, 0, 0, 0.89444],
    "8869": [0, 0.69444, 0, 0, 0.89444],
    "8900": [-0.02639, 0.47361, 0, 0, 0.575],
    "8901": [-0.02639, 0.47361, 0, 0, 0.31944],
    "8902": [-0.02778, 0.47222, 0, 0, 0.575],
    "8968": [0.25, 0.75, 0, 0, 0.51111],
    "8969": [0.25, 0.75, 0, 0, 0.51111],
    "8970": [0.25, 0.75, 0, 0, 0.51111],
    "8971": [0.25, 0.75, 0, 0, 0.51111],
    "8994": [-0.13889, 0.36111, 0, 0, 1.14999],
    "8995": [-0.13889, 0.36111, 0, 0, 1.14999],
    "9651": [0.19444, 0.69444, 0, 0, 1.02222],
    "9657": [-0.02778, 0.47222, 0, 0, 0.575],
    "9661": [0.19444, 0.69444, 0, 0, 1.02222],
    "9667": [-0.02778, 0.47222, 0, 0, 0.575],
    "9711": [0.19444, 0.69444, 0, 0, 1.14999],
    "9824": [0.12963, 0.69444, 0, 0, 0.89444],
    "9825": [0.12963, 0.69444, 0, 0, 0.89444],
    "9826": [0.12963, 0.69444, 0, 0, 0.89444],
    "9827": [0.12963, 0.69444, 0, 0, 0.89444],
    "9837": [0, 0.75, 0, 0, 0.44722],
    "9838": [0.19444, 0.69444, 0, 0, 0.44722],
    "9839": [0.19444, 0.69444, 0, 0, 0.44722],
    "10216": [0.25, 0.75, 0, 0, 0.44722],
    "10217": [0.25, 0.75, 0, 0, 0.44722],
    "10815": [0, 0.68611, 0, 0, 0.9],
    "10927": [0.19667, 0.69667, 0, 0, 0.89444],
    "10928": [0.19667, 0.69667, 0, 0, 0.89444],
    "57376": [0.19444, 0.69444, 0, 0, 0]
  },
  "Main-BoldItalic": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0.11417, 0, 0.38611],
    "34": [0, 0.69444, 0.07939, 0, 0.62055],
    "35": [0.19444, 0.69444, 0.06833, 0, 0.94444],
    "37": [0.05556, 0.75, 0.12861, 0, 0.94444],
    "38": [0, 0.69444, 0.08528, 0, 0.88555],
    "39": [0, 0.69444, 0.12945, 0, 0.35555],
    "40": [0.25, 0.75, 0.15806, 0, 0.47333],
    "41": [0.25, 0.75, 0.03306, 0, 0.47333],
    "42": [0, 0.75, 0.14333, 0, 0.59111],
    "43": [0.10333, 0.60333, 0.03306, 0, 0.88555],
    "44": [0.19444, 0.14722, 0, 0, 0.35555],
    "45": [0, 0.44444, 0.02611, 0, 0.41444],
    "46": [0, 0.14722, 0, 0, 0.35555],
    "47": [0.25, 0.75, 0.15806, 0, 0.59111],
    "48": [0, 0.64444, 0.13167, 0, 0.59111],
    "49": [0, 0.64444, 0.13167, 0, 0.59111],
    "50": [0, 0.64444, 0.13167, 0, 0.59111],
    "51": [0, 0.64444, 0.13167, 0, 0.59111],
    "52": [0.19444, 0.64444, 0.13167, 0, 0.59111],
    "53": [0, 0.64444, 0.13167, 0, 0.59111],
    "54": [0, 0.64444, 0.13167, 0, 0.59111],
    "55": [0.19444, 0.64444, 0.13167, 0, 0.59111],
    "56": [0, 0.64444, 0.13167, 0, 0.59111],
    "57": [0, 0.64444, 0.13167, 0, 0.59111],
    "58": [0, 0.44444, 0.06695, 0, 0.35555],
    "59": [0.19444, 0.44444, 0.06695, 0, 0.35555],
    "61": [-0.10889, 0.39111, 0.06833, 0, 0.88555],
    "63": [0, 0.69444, 0.11472, 0, 0.59111],
    "64": [0, 0.69444, 0.09208, 0, 0.88555],
    "65": [0, 0.68611, 0, 0, 0.86555],
    "66": [0, 0.68611, 0.0992, 0, 0.81666],
    "67": [0, 0.68611, 0.14208, 0, 0.82666],
    "68": [0, 0.68611, 0.09062, 0, 0.87555],
    "69": [0, 0.68611, 0.11431, 0, 0.75666],
    "70": [0, 0.68611, 0.12903, 0, 0.72722],
    "71": [0, 0.68611, 0.07347, 0, 0.89527],
    "72": [0, 0.68611, 0.17208, 0, 0.8961],
    "73": [0, 0.68611, 0.15681, 0, 0.47166],
    "74": [0, 0.68611, 0.145, 0, 0.61055],
    "75": [0, 0.68611, 0.14208, 0, 0.89499],
    "76": [0, 0.68611, 0, 0, 0.69777],
    "77": [0, 0.68611, 0.17208, 0, 1.07277],
    "78": [0, 0.68611, 0.17208, 0, 0.8961],
    "79": [0, 0.68611, 0.09062, 0, 0.85499],
    "80": [0, 0.68611, 0.0992, 0, 0.78721],
    "81": [0.19444, 0.68611, 0.09062, 0, 0.85499],
    "82": [0, 0.68611, 0.02559, 0, 0.85944],
    "83": [0, 0.68611, 0.11264, 0, 0.64999],
    "84": [0, 0.68611, 0.12903, 0, 0.7961],
    "85": [0, 0.68611, 0.17208, 0, 0.88083],
    "86": [0, 0.68611, 0.18625, 0, 0.86555],
    "87": [0, 0.68611, 0.18625, 0, 1.15999],
    "88": [0, 0.68611, 0.15681, 0, 0.86555],
    "89": [0, 0.68611, 0.19803, 0, 0.86555],
    "90": [0, 0.68611, 0.14208, 0, 0.70888],
    "91": [0.25, 0.75, 0.1875, 0, 0.35611],
    "93": [0.25, 0.75, 0.09972, 0, 0.35611],
    "94": [0, 0.69444, 0.06709, 0, 0.59111],
    "95": [0.31, 0.13444, 0.09811, 0, 0.59111],
    "97": [0, 0.44444, 0.09426, 0, 0.59111],
    "98": [0, 0.69444, 0.07861, 0, 0.53222],
    "99": [0, 0.44444, 0.05222, 0, 0.53222],
    "100": [0, 0.69444, 0.10861, 0, 0.59111],
    "101": [0, 0.44444, 0.085, 0, 0.53222],
    "102": [0.19444, 0.69444, 0.21778, 0, 0.4],
    "103": [0.19444, 0.44444, 0.105, 0, 0.53222],
    "104": [0, 0.69444, 0.09426, 0, 0.59111],
    "105": [0, 0.69326, 0.11387, 0, 0.35555],
    "106": [0.19444, 0.69326, 0.1672, 0, 0.35555],
    "107": [0, 0.69444, 0.11111, 0, 0.53222],
    "108": [0, 0.69444, 0.10861, 0, 0.29666],
    "109": [0, 0.44444, 0.09426, 0, 0.94444],
    "110": [0, 0.44444, 0.09426, 0, 0.64999],
    "111": [0, 0.44444, 0.07861, 0, 0.59111],
    "112": [0.19444, 0.44444, 0.07861, 0, 0.59111],
    "113": [0.19444, 0.44444, 0.105, 0, 0.53222],
    "114": [0, 0.44444, 0.11111, 0, 0.50167],
    "115": [0, 0.44444, 0.08167, 0, 0.48694],
    "116": [0, 0.63492, 0.09639, 0, 0.385],
    "117": [0, 0.44444, 0.09426, 0, 0.62055],
    "118": [0, 0.44444, 0.11111, 0, 0.53222],
    "119": [0, 0.44444, 0.11111, 0, 0.76777],
    "120": [0, 0.44444, 0.12583, 0, 0.56055],
    "121": [0.19444, 0.44444, 0.105, 0, 0.56166],
    "122": [0, 0.44444, 0.13889, 0, 0.49055],
    "126": [0.35, 0.34444, 0.11472, 0, 0.59111],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.69444, 0.11473, 0, 0.59111],
    "176": [0, 0.69444, 0, 0, 0.94888],
    "184": [0.17014, 0, 0, 0, 0.53222],
    "198": [0, 0.68611, 0.11431, 0, 1.02277],
    "216": [0.04861, 0.73472, 0.09062, 0, 0.88555],
    "223": [0.19444, 0.69444, 0.09736, 0, 0.665],
    "230": [0, 0.44444, 0.085, 0, 0.82666],
    "248": [0.09722, 0.54167, 0.09458, 0, 0.59111],
    "305": [0, 0.44444, 0.09426, 0, 0.35555],
    "338": [0, 0.68611, 0.11431, 0, 1.14054],
    "339": [0, 0.44444, 0.085, 0, 0.82666],
    "567": [0.19444, 0.44444, 0.04611, 0, 0.385],
    "710": [0, 0.69444, 0.06709, 0, 0.59111],
    "711": [0, 0.63194, 0.08271, 0, 0.59111],
    "713": [0, 0.59444, 0.10444, 0, 0.59111],
    "714": [0, 0.69444, 0.08528, 0, 0.59111],
    "715": [0, 0.69444, 0, 0, 0.59111],
    "728": [0, 0.69444, 0.10333, 0, 0.59111],
    "729": [0, 0.69444, 0.12945, 0, 0.35555],
    "730": [0, 0.69444, 0, 0, 0.94888],
    "732": [0, 0.69444, 0.11472, 0, 0.59111],
    "733": [0, 0.69444, 0.11472, 0, 0.59111],
    "915": [0, 0.68611, 0.12903, 0, 0.69777],
    "916": [0, 0.68611, 0, 0, 0.94444],
    "920": [0, 0.68611, 0.09062, 0, 0.88555],
    "923": [0, 0.68611, 0, 0, 0.80666],
    "926": [0, 0.68611, 0.15092, 0, 0.76777],
    "928": [0, 0.68611, 0.17208, 0, 0.8961],
    "931": [0, 0.68611, 0.11431, 0, 0.82666],
    "933": [0, 0.68611, 0.10778, 0, 0.88555],
    "934": [0, 0.68611, 0.05632, 0, 0.82666],
    "936": [0, 0.68611, 0.10778, 0, 0.88555],
    "937": [0, 0.68611, 0.0992, 0, 0.82666],
    "8211": [0, 0.44444, 0.09811, 0, 0.59111],
    "8212": [0, 0.44444, 0.09811, 0, 1.18221],
    "8216": [0, 0.69444, 0.12945, 0, 0.35555],
    "8217": [0, 0.69444, 0.12945, 0, 0.35555],
    "8220": [0, 0.69444, 0.16772, 0, 0.62055],
    "8221": [0, 0.69444, 0.07939, 0, 0.62055]
  },
  "Main-Italic": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0.12417, 0, 0.30667],
    "34": [0, 0.69444, 0.06961, 0, 0.51444],
    "35": [0.19444, 0.69444, 0.06616, 0, 0.81777],
    "37": [0.05556, 0.75, 0.13639, 0, 0.81777],
    "38": [0, 0.69444, 0.09694, 0, 0.76666],
    "39": [0, 0.69444, 0.12417, 0, 0.30667],
    "40": [0.25, 0.75, 0.16194, 0, 0.40889],
    "41": [0.25, 0.75, 0.03694, 0, 0.40889],
    "42": [0, 0.75, 0.14917, 0, 0.51111],
    "43": [0.05667, 0.56167, 0.03694, 0, 0.76666],
    "44": [0.19444, 0.10556, 0, 0, 0.30667],
    "45": [0, 0.43056, 0.02826, 0, 0.35778],
    "46": [0, 0.10556, 0, 0, 0.30667],
    "47": [0.25, 0.75, 0.16194, 0, 0.51111],
    "48": [0, 0.64444, 0.13556, 0, 0.51111],
    "49": [0, 0.64444, 0.13556, 0, 0.51111],
    "50": [0, 0.64444, 0.13556, 0, 0.51111],
    "51": [0, 0.64444, 0.13556, 0, 0.51111],
    "52": [0.19444, 0.64444, 0.13556, 0, 0.51111],
    "53": [0, 0.64444, 0.13556, 0, 0.51111],
    "54": [0, 0.64444, 0.13556, 0, 0.51111],
    "55": [0.19444, 0.64444, 0.13556, 0, 0.51111],
    "56": [0, 0.64444, 0.13556, 0, 0.51111],
    "57": [0, 0.64444, 0.13556, 0, 0.51111],
    "58": [0, 0.43056, 0.0582, 0, 0.30667],
    "59": [0.19444, 0.43056, 0.0582, 0, 0.30667],
    "61": [-0.13313, 0.36687, 0.06616, 0, 0.76666],
    "63": [0, 0.69444, 0.1225, 0, 0.51111],
    "64": [0, 0.69444, 0.09597, 0, 0.76666],
    "65": [0, 0.68333, 0, 0, 0.74333],
    "66": [0, 0.68333, 0.10257, 0, 0.70389],
    "67": [0, 0.68333, 0.14528, 0, 0.71555],
    "68": [0, 0.68333, 0.09403, 0, 0.755],
    "69": [0, 0.68333, 0.12028, 0, 0.67833],
    "70": [0, 0.68333, 0.13305, 0, 0.65277],
    "71": [0, 0.68333, 0.08722, 0, 0.77361],
    "72": [0, 0.68333, 0.16389, 0, 0.74333],
    "73": [0, 0.68333, 0.15806, 0, 0.38555],
    "74": [0, 0.68333, 0.14028, 0, 0.525],
    "75": [0, 0.68333, 0.14528, 0, 0.76888],
    "76": [0, 0.68333, 0, 0, 0.62722],
    "77": [0, 0.68333, 0.16389, 0, 0.89666],
    "78": [0, 0.68333, 0.16389, 0, 0.74333],
    "79": [0, 0.68333, 0.09403, 0, 0.76666],
    "80": [0, 0.68333, 0.10257, 0, 0.67833],
    "81": [0.19444, 0.68333, 0.09403, 0, 0.76666],
    "82": [0, 0.68333, 0.03868, 0, 0.72944],
    "83": [0, 0.68333, 0.11972, 0, 0.56222],
    "84": [0, 0.68333, 0.13305, 0, 0.71555],
    "85": [0, 0.68333, 0.16389, 0, 0.74333],
    "86": [0, 0.68333, 0.18361, 0, 0.74333],
    "87": [0, 0.68333, 0.18361, 0, 0.99888],
    "88": [0, 0.68333, 0.15806, 0, 0.74333],
    "89": [0, 0.68333, 0.19383, 0, 0.74333],
    "90": [0, 0.68333, 0.14528, 0, 0.61333],
    "91": [0.25, 0.75, 0.1875, 0, 0.30667],
    "93": [0.25, 0.75, 0.10528, 0, 0.30667],
    "94": [0, 0.69444, 0.06646, 0, 0.51111],
    "95": [0.31, 0.12056, 0.09208, 0, 0.51111],
    "97": [0, 0.43056, 0.07671, 0, 0.51111],
    "98": [0, 0.69444, 0.06312, 0, 0.46],
    "99": [0, 0.43056, 0.05653, 0, 0.46],
    "100": [0, 0.69444, 0.10333, 0, 0.51111],
    "101": [0, 0.43056, 0.07514, 0, 0.46],
    "102": [0.19444, 0.69444, 0.21194, 0, 0.30667],
    "103": [0.19444, 0.43056, 0.08847, 0, 0.46],
    "104": [0, 0.69444, 0.07671, 0, 0.51111],
    "105": [0, 0.65536, 0.1019, 0, 0.30667],
    "106": [0.19444, 0.65536, 0.14467, 0, 0.30667],
    "107": [0, 0.69444, 0.10764, 0, 0.46],
    "108": [0, 0.69444, 0.10333, 0, 0.25555],
    "109": [0, 0.43056, 0.07671, 0, 0.81777],
    "110": [0, 0.43056, 0.07671, 0, 0.56222],
    "111": [0, 0.43056, 0.06312, 0, 0.51111],
    "112": [0.19444, 0.43056, 0.06312, 0, 0.51111],
    "113": [0.19444, 0.43056, 0.08847, 0, 0.46],
    "114": [0, 0.43056, 0.10764, 0, 0.42166],
    "115": [0, 0.43056, 0.08208, 0, 0.40889],
    "116": [0, 0.61508, 0.09486, 0, 0.33222],
    "117": [0, 0.43056, 0.07671, 0, 0.53666],
    "118": [0, 0.43056, 0.10764, 0, 0.46],
    "119": [0, 0.43056, 0.10764, 0, 0.66444],
    "120": [0, 0.43056, 0.12042, 0, 0.46389],
    "121": [0.19444, 0.43056, 0.08847, 0, 0.48555],
    "122": [0, 0.43056, 0.12292, 0, 0.40889],
    "126": [0.35, 0.31786, 0.11585, 0, 0.51111],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.66786, 0.10474, 0, 0.51111],
    "176": [0, 0.69444, 0, 0, 0.83129],
    "184": [0.17014, 0, 0, 0, 0.46],
    "198": [0, 0.68333, 0.12028, 0, 0.88277],
    "216": [0.04861, 0.73194, 0.09403, 0, 0.76666],
    "223": [0.19444, 0.69444, 0.10514, 0, 0.53666],
    "230": [0, 0.43056, 0.07514, 0, 0.71555],
    "248": [0.09722, 0.52778, 0.09194, 0, 0.51111],
    "338": [0, 0.68333, 0.12028, 0, 0.98499],
    "339": [0, 0.43056, 0.07514, 0, 0.71555],
    "710": [0, 0.69444, 0.06646, 0, 0.51111],
    "711": [0, 0.62847, 0.08295, 0, 0.51111],
    "713": [0, 0.56167, 0.10333, 0, 0.51111],
    "714": [0, 0.69444, 0.09694, 0, 0.51111],
    "715": [0, 0.69444, 0, 0, 0.51111],
    "728": [0, 0.69444, 0.10806, 0, 0.51111],
    "729": [0, 0.66786, 0.11752, 0, 0.30667],
    "730": [0, 0.69444, 0, 0, 0.83129],
    "732": [0, 0.66786, 0.11585, 0, 0.51111],
    "733": [0, 0.69444, 0.1225, 0, 0.51111],
    "915": [0, 0.68333, 0.13305, 0, 0.62722],
    "916": [0, 0.68333, 0, 0, 0.81777],
    "920": [0, 0.68333, 0.09403, 0, 0.76666],
    "923": [0, 0.68333, 0, 0, 0.69222],
    "926": [0, 0.68333, 0.15294, 0, 0.66444],
    "928": [0, 0.68333, 0.16389, 0, 0.74333],
    "931": [0, 0.68333, 0.12028, 0, 0.71555],
    "933": [0, 0.68333, 0.11111, 0, 0.76666],
    "934": [0, 0.68333, 0.05986, 0, 0.71555],
    "936": [0, 0.68333, 0.11111, 0, 0.76666],
    "937": [0, 0.68333, 0.10257, 0, 0.71555],
    "8211": [0, 0.43056, 0.09208, 0, 0.51111],
    "8212": [0, 0.43056, 0.09208, 0, 1.02222],
    "8216": [0, 0.69444, 0.12417, 0, 0.30667],
    "8217": [0, 0.69444, 0.12417, 0, 0.30667],
    "8220": [0, 0.69444, 0.1685, 0, 0.51444],
    "8221": [0, 0.69444, 0.06961, 0, 0.51444],
    "8463": [0, 0.68889, 0, 0, 0.54028]
  },
  "Main-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.27778],
    "34": [0, 0.69444, 0, 0, 0.5],
    "35": [0.19444, 0.69444, 0, 0, 0.83334],
    "36": [0.05556, 0.75, 0, 0, 0.5],
    "37": [0.05556, 0.75, 0, 0, 0.83334],
    "38": [0, 0.69444, 0, 0, 0.77778],
    "39": [0, 0.69444, 0, 0, 0.27778],
    "40": [0.25, 0.75, 0, 0, 0.38889],
    "41": [0.25, 0.75, 0, 0, 0.38889],
    "42": [0, 0.75, 0, 0, 0.5],
    "43": [0.08333, 0.58333, 0, 0, 0.77778],
    "44": [0.19444, 0.10556, 0, 0, 0.27778],
    "45": [0, 0.43056, 0, 0, 0.33333],
    "46": [0, 0.10556, 0, 0, 0.27778],
    "47": [0.25, 0.75, 0, 0, 0.5],
    "48": [0, 0.64444, 0, 0, 0.5],
    "49": [0, 0.64444, 0, 0, 0.5],
    "50": [0, 0.64444, 0, 0, 0.5],
    "51": [0, 0.64444, 0, 0, 0.5],
    "52": [0, 0.64444, 0, 0, 0.5],
    "53": [0, 0.64444, 0, 0, 0.5],
    "54": [0, 0.64444, 0, 0, 0.5],
    "55": [0, 0.64444, 0, 0, 0.5],
    "56": [0, 0.64444, 0, 0, 0.5],
    "57": [0, 0.64444, 0, 0, 0.5],
    "58": [0, 0.43056, 0, 0, 0.27778],
    "59": [0.19444, 0.43056, 0, 0, 0.27778],
    "60": [0.0391, 0.5391, 0, 0, 0.77778],
    "61": [-0.13313, 0.36687, 0, 0, 0.77778],
    "62": [0.0391, 0.5391, 0, 0, 0.77778],
    "63": [0, 0.69444, 0, 0, 0.47222],
    "64": [0, 0.69444, 0, 0, 0.77778],
    "65": [0, 0.68333, 0, 0, 0.75],
    "66": [0, 0.68333, 0, 0, 0.70834],
    "67": [0, 0.68333, 0, 0, 0.72222],
    "68": [0, 0.68333, 0, 0, 0.76389],
    "69": [0, 0.68333, 0, 0, 0.68056],
    "70": [0, 0.68333, 0, 0, 0.65278],
    "71": [0, 0.68333, 0, 0, 0.78472],
    "72": [0, 0.68333, 0, 0, 0.75],
    "73": [0, 0.68333, 0, 0, 0.36111],
    "74": [0, 0.68333, 0, 0, 0.51389],
    "75": [0, 0.68333, 0, 0, 0.77778],
    "76": [0, 0.68333, 0, 0, 0.625],
    "77": [0, 0.68333, 0, 0, 0.91667],
    "78": [0, 0.68333, 0, 0, 0.75],
    "79": [0, 0.68333, 0, 0, 0.77778],
    "80": [0, 0.68333, 0, 0, 0.68056],
    "81": [0.19444, 0.68333, 0, 0, 0.77778],
    "82": [0, 0.68333, 0, 0, 0.73611],
    "83": [0, 0.68333, 0, 0, 0.55556],
    "84": [0, 0.68333, 0, 0, 0.72222],
    "85": [0, 0.68333, 0, 0, 0.75],
    "86": [0, 0.68333, 0.01389, 0, 0.75],
    "87": [0, 0.68333, 0.01389, 0, 1.02778],
    "88": [0, 0.68333, 0, 0, 0.75],
    "89": [0, 0.68333, 0.025, 0, 0.75],
    "90": [0, 0.68333, 0, 0, 0.61111],
    "91": [0.25, 0.75, 0, 0, 0.27778],
    "92": [0.25, 0.75, 0, 0, 0.5],
    "93": [0.25, 0.75, 0, 0, 0.27778],
    "94": [0, 0.69444, 0, 0, 0.5],
    "95": [0.31, 0.12056, 0.02778, 0, 0.5],
    "97": [0, 0.43056, 0, 0, 0.5],
    "98": [0, 0.69444, 0, 0, 0.55556],
    "99": [0, 0.43056, 0, 0, 0.44445],
    "100": [0, 0.69444, 0, 0, 0.55556],
    "101": [0, 0.43056, 0, 0, 0.44445],
    "102": [0, 0.69444, 0.07778, 0, 0.30556],
    "103": [0.19444, 0.43056, 0.01389, 0, 0.5],
    "104": [0, 0.69444, 0, 0, 0.55556],
    "105": [0, 0.66786, 0, 0, 0.27778],
    "106": [0.19444, 0.66786, 0, 0, 0.30556],
    "107": [0, 0.69444, 0, 0, 0.52778],
    "108": [0, 0.69444, 0, 0, 0.27778],
    "109": [0, 0.43056, 0, 0, 0.83334],
    "110": [0, 0.43056, 0, 0, 0.55556],
    "111": [0, 0.43056, 0, 0, 0.5],
    "112": [0.19444, 0.43056, 0, 0, 0.55556],
    "113": [0.19444, 0.43056, 0, 0, 0.52778],
    "114": [0, 0.43056, 0, 0, 0.39167],
    "115": [0, 0.43056, 0, 0, 0.39445],
    "116": [0, 0.61508, 0, 0, 0.38889],
    "117": [0, 0.43056, 0, 0, 0.55556],
    "118": [0, 0.43056, 0.01389, 0, 0.52778],
    "119": [0, 0.43056, 0.01389, 0, 0.72222],
    "120": [0, 0.43056, 0, 0, 0.52778],
    "121": [0.19444, 0.43056, 0.01389, 0, 0.52778],
    "122": [0, 0.43056, 0, 0, 0.44445],
    "123": [0.25, 0.75, 0, 0, 0.5],
    "124": [0.25, 0.75, 0, 0, 0.27778],
    "125": [0.25, 0.75, 0, 0, 0.5],
    "126": [0.35, 0.31786, 0, 0, 0.5],
    "160": [0, 0, 0, 0, 0.25],
    "163": [0, 0.69444, 0, 0, 0.76909],
    "167": [0.19444, 0.69444, 0, 0, 0.44445],
    "168": [0, 0.66786, 0, 0, 0.5],
    "172": [0, 0.43056, 0, 0, 0.66667],
    "176": [0, 0.69444, 0, 0, 0.75],
    "177": [0.08333, 0.58333, 0, 0, 0.77778],
    "182": [0.19444, 0.69444, 0, 0, 0.61111],
    "184": [0.17014, 0, 0, 0, 0.44445],
    "198": [0, 0.68333, 0, 0, 0.90278],
    "215": [0.08333, 0.58333, 0, 0, 0.77778],
    "216": [0.04861, 0.73194, 0, 0, 0.77778],
    "223": [0, 0.69444, 0, 0, 0.5],
    "230": [0, 0.43056, 0, 0, 0.72222],
    "247": [0.08333, 0.58333, 0, 0, 0.77778],
    "248": [0.09722, 0.52778, 0, 0, 0.5],
    "305": [0, 0.43056, 0, 0, 0.27778],
    "338": [0, 0.68333, 0, 0, 1.01389],
    "339": [0, 0.43056, 0, 0, 0.77778],
    "567": [0.19444, 0.43056, 0, 0, 0.30556],
    "710": [0, 0.69444, 0, 0, 0.5],
    "711": [0, 0.62847, 0, 0, 0.5],
    "713": [0, 0.56778, 0, 0, 0.5],
    "714": [0, 0.69444, 0, 0, 0.5],
    "715": [0, 0.69444, 0, 0, 0.5],
    "728": [0, 0.69444, 0, 0, 0.5],
    "729": [0, 0.66786, 0, 0, 0.27778],
    "730": [0, 0.69444, 0, 0, 0.75],
    "732": [0, 0.66786, 0, 0, 0.5],
    "733": [0, 0.69444, 0, 0, 0.5],
    "915": [0, 0.68333, 0, 0, 0.625],
    "916": [0, 0.68333, 0, 0, 0.83334],
    "920": [0, 0.68333, 0, 0, 0.77778],
    "923": [0, 0.68333, 0, 0, 0.69445],
    "926": [0, 0.68333, 0, 0, 0.66667],
    "928": [0, 0.68333, 0, 0, 0.75],
    "931": [0, 0.68333, 0, 0, 0.72222],
    "933": [0, 0.68333, 0, 0, 0.77778],
    "934": [0, 0.68333, 0, 0, 0.72222],
    "936": [0, 0.68333, 0, 0, 0.77778],
    "937": [0, 0.68333, 0, 0, 0.72222],
    "8211": [0, 0.43056, 0.02778, 0, 0.5],
    "8212": [0, 0.43056, 0.02778, 0, 1],
    "8216": [0, 0.69444, 0, 0, 0.27778],
    "8217": [0, 0.69444, 0, 0, 0.27778],
    "8220": [0, 0.69444, 0, 0, 0.5],
    "8221": [0, 0.69444, 0, 0, 0.5],
    "8224": [0.19444, 0.69444, 0, 0, 0.44445],
    "8225": [0.19444, 0.69444, 0, 0, 0.44445],
    "8230": [0, 0.123, 0, 0, 1.172],
    "8242": [0, 0.55556, 0, 0, 0.275],
    "8407": [0, 0.71444, 0.15382, 0, 0.5],
    "8463": [0, 0.68889, 0, 0, 0.54028],
    "8465": [0, 0.69444, 0, 0, 0.72222],
    "8467": [0, 0.69444, 0, 0.11111, 0.41667],
    "8472": [0.19444, 0.43056, 0, 0.11111, 0.63646],
    "8476": [0, 0.69444, 0, 0, 0.72222],
    "8501": [0, 0.69444, 0, 0, 0.61111],
    "8592": [-0.13313, 0.36687, 0, 0, 1],
    "8593": [0.19444, 0.69444, 0, 0, 0.5],
    "8594": [-0.13313, 0.36687, 0, 0, 1],
    "8595": [0.19444, 0.69444, 0, 0, 0.5],
    "8596": [-0.13313, 0.36687, 0, 0, 1],
    "8597": [0.25, 0.75, 0, 0, 0.5],
    "8598": [0.19444, 0.69444, 0, 0, 1],
    "8599": [0.19444, 0.69444, 0, 0, 1],
    "8600": [0.19444, 0.69444, 0, 0, 1],
    "8601": [0.19444, 0.69444, 0, 0, 1],
    "8614": [0.011, 0.511, 0, 0, 1],
    "8617": [0.011, 0.511, 0, 0, 1.126],
    "8618": [0.011, 0.511, 0, 0, 1.126],
    "8636": [-0.13313, 0.36687, 0, 0, 1],
    "8637": [-0.13313, 0.36687, 0, 0, 1],
    "8640": [-0.13313, 0.36687, 0, 0, 1],
    "8641": [-0.13313, 0.36687, 0, 0, 1],
    "8652": [0.011, 0.671, 0, 0, 1],
    "8656": [-0.13313, 0.36687, 0, 0, 1],
    "8657": [0.19444, 0.69444, 0, 0, 0.61111],
    "8658": [-0.13313, 0.36687, 0, 0, 1],
    "8659": [0.19444, 0.69444, 0, 0, 0.61111],
    "8660": [-0.13313, 0.36687, 0, 0, 1],
    "8661": [0.25, 0.75, 0, 0, 0.61111],
    "8704": [0, 0.69444, 0, 0, 0.55556],
    "8706": [0, 0.69444, 0.05556, 0.08334, 0.5309],
    "8707": [0, 0.69444, 0, 0, 0.55556],
    "8709": [0.05556, 0.75, 0, 0, 0.5],
    "8711": [0, 0.68333, 0, 0, 0.83334],
    "8712": [0.0391, 0.5391, 0, 0, 0.66667],
    "8715": [0.0391, 0.5391, 0, 0, 0.66667],
    "8722": [0.08333, 0.58333, 0, 0, 0.77778],
    "8723": [0.08333, 0.58333, 0, 0, 0.77778],
    "8725": [0.25, 0.75, 0, 0, 0.5],
    "8726": [0.25, 0.75, 0, 0, 0.5],
    "8727": [-0.03472, 0.46528, 0, 0, 0.5],
    "8728": [-0.05555, 0.44445, 0, 0, 0.5],
    "8729": [-0.05555, 0.44445, 0, 0, 0.5],
    "8730": [0.2, 0.8, 0, 0, 0.83334],
    "8733": [0, 0.43056, 0, 0, 0.77778],
    "8734": [0, 0.43056, 0, 0, 1],
    "8736": [0, 0.69224, 0, 0, 0.72222],
    "8739": [0.25, 0.75, 0, 0, 0.27778],
    "8741": [0.25, 0.75, 0, 0, 0.5],
    "8743": [0, 0.55556, 0, 0, 0.66667],
    "8744": [0, 0.55556, 0, 0, 0.66667],
    "8745": [0, 0.55556, 0, 0, 0.66667],
    "8746": [0, 0.55556, 0, 0, 0.66667],
    "8747": [0.19444, 0.69444, 0.11111, 0, 0.41667],
    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
    "8768": [0.19444, 0.69444, 0, 0, 0.27778],
    "8771": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8773": [-0.022, 0.589, 0, 0, 0.778],
    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
    "8781": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8784": [-0.133, 0.673, 0, 0, 0.778],
    "8801": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8804": [0.13597, 0.63597, 0, 0, 0.77778],
    "8805": [0.13597, 0.63597, 0, 0, 0.77778],
    "8810": [0.0391, 0.5391, 0, 0, 1],
    "8811": [0.0391, 0.5391, 0, 0, 1],
    "8826": [0.0391, 0.5391, 0, 0, 0.77778],
    "8827": [0.0391, 0.5391, 0, 0, 0.77778],
    "8834": [0.0391, 0.5391, 0, 0, 0.77778],
    "8835": [0.0391, 0.5391, 0, 0, 0.77778],
    "8838": [0.13597, 0.63597, 0, 0, 0.77778],
    "8839": [0.13597, 0.63597, 0, 0, 0.77778],
    "8846": [0, 0.55556, 0, 0, 0.66667],
    "8849": [0.13597, 0.63597, 0, 0, 0.77778],
    "8850": [0.13597, 0.63597, 0, 0, 0.77778],
    "8851": [0, 0.55556, 0, 0, 0.66667],
    "8852": [0, 0.55556, 0, 0, 0.66667],
    "8853": [0.08333, 0.58333, 0, 0, 0.77778],
    "8854": [0.08333, 0.58333, 0, 0, 0.77778],
    "8855": [0.08333, 0.58333, 0, 0, 0.77778],
    "8856": [0.08333, 0.58333, 0, 0, 0.77778],
    "8857": [0.08333, 0.58333, 0, 0, 0.77778],
    "8866": [0, 0.69444, 0, 0, 0.61111],
    "8867": [0, 0.69444, 0, 0, 0.61111],
    "8868": [0, 0.69444, 0, 0, 0.77778],
    "8869": [0, 0.69444, 0, 0, 0.77778],
    "8872": [0.249, 0.75, 0, 0, 0.867],
    "8900": [-0.05555, 0.44445, 0, 0, 0.5],
    "8901": [-0.05555, 0.44445, 0, 0, 0.27778],
    "8902": [-0.03472, 0.46528, 0, 0, 0.5],
    "8904": [5e-3, 0.505, 0, 0, 0.9],
    "8942": [0.03, 0.903, 0, 0, 0.278],
    "8943": [-0.19, 0.313, 0, 0, 1.172],
    "8945": [-0.1, 0.823, 0, 0, 1.282],
    "8968": [0.25, 0.75, 0, 0, 0.44445],
    "8969": [0.25, 0.75, 0, 0, 0.44445],
    "8970": [0.25, 0.75, 0, 0, 0.44445],
    "8971": [0.25, 0.75, 0, 0, 0.44445],
    "8994": [-0.14236, 0.35764, 0, 0, 1],
    "8995": [-0.14236, 0.35764, 0, 0, 1],
    "9136": [0.244, 0.744, 0, 0, 0.412],
    "9137": [0.244, 0.745, 0, 0, 0.412],
    "9651": [0.19444, 0.69444, 0, 0, 0.88889],
    "9657": [-0.03472, 0.46528, 0, 0, 0.5],
    "9661": [0.19444, 0.69444, 0, 0, 0.88889],
    "9667": [-0.03472, 0.46528, 0, 0, 0.5],
    "9711": [0.19444, 0.69444, 0, 0, 1],
    "9824": [0.12963, 0.69444, 0, 0, 0.77778],
    "9825": [0.12963, 0.69444, 0, 0, 0.77778],
    "9826": [0.12963, 0.69444, 0, 0, 0.77778],
    "9827": [0.12963, 0.69444, 0, 0, 0.77778],
    "9837": [0, 0.75, 0, 0, 0.38889],
    "9838": [0.19444, 0.69444, 0, 0, 0.38889],
    "9839": [0.19444, 0.69444, 0, 0, 0.38889],
    "10216": [0.25, 0.75, 0, 0, 0.38889],
    "10217": [0.25, 0.75, 0, 0, 0.38889],
    "10222": [0.244, 0.744, 0, 0, 0.412],
    "10223": [0.244, 0.745, 0, 0, 0.412],
    "10229": [0.011, 0.511, 0, 0, 1.609],
    "10230": [0.011, 0.511, 0, 0, 1.638],
    "10231": [0.011, 0.511, 0, 0, 1.859],
    "10232": [0.024, 0.525, 0, 0, 1.609],
    "10233": [0.024, 0.525, 0, 0, 1.638],
    "10234": [0.024, 0.525, 0, 0, 1.858],
    "10236": [0.011, 0.511, 0, 0, 1.638],
    "10815": [0, 0.68333, 0, 0, 0.75],
    "10927": [0.13597, 0.63597, 0, 0, 0.77778],
    "10928": [0.13597, 0.63597, 0, 0, 0.77778],
    "57376": [0.19444, 0.69444, 0, 0, 0]
  },
  "Math-BoldItalic": {
    "32": [0, 0, 0, 0, 0.25],
    "48": [0, 0.44444, 0, 0, 0.575],
    "49": [0, 0.44444, 0, 0, 0.575],
    "50": [0, 0.44444, 0, 0, 0.575],
    "51": [0.19444, 0.44444, 0, 0, 0.575],
    "52": [0.19444, 0.44444, 0, 0, 0.575],
    "53": [0.19444, 0.44444, 0, 0, 0.575],
    "54": [0, 0.64444, 0, 0, 0.575],
    "55": [0.19444, 0.44444, 0, 0, 0.575],
    "56": [0, 0.64444, 0, 0, 0.575],
    "57": [0.19444, 0.44444, 0, 0, 0.575],
    "65": [0, 0.68611, 0, 0, 0.86944],
    "66": [0, 0.68611, 0.04835, 0, 0.8664],
    "67": [0, 0.68611, 0.06979, 0, 0.81694],
    "68": [0, 0.68611, 0.03194, 0, 0.93812],
    "69": [0, 0.68611, 0.05451, 0, 0.81007],
    "70": [0, 0.68611, 0.15972, 0, 0.68889],
    "71": [0, 0.68611, 0, 0, 0.88673],
    "72": [0, 0.68611, 0.08229, 0, 0.98229],
    "73": [0, 0.68611, 0.07778, 0, 0.51111],
    "74": [0, 0.68611, 0.10069, 0, 0.63125],
    "75": [0, 0.68611, 0.06979, 0, 0.97118],
    "76": [0, 0.68611, 0, 0, 0.75555],
    "77": [0, 0.68611, 0.11424, 0, 1.14201],
    "78": [0, 0.68611, 0.11424, 0, 0.95034],
    "79": [0, 0.68611, 0.03194, 0, 0.83666],
    "80": [0, 0.68611, 0.15972, 0, 0.72309],
    "81": [0.19444, 0.68611, 0, 0, 0.86861],
    "82": [0, 0.68611, 421e-5, 0, 0.87235],
    "83": [0, 0.68611, 0.05382, 0, 0.69271],
    "84": [0, 0.68611, 0.15972, 0, 0.63663],
    "85": [0, 0.68611, 0.11424, 0, 0.80027],
    "86": [0, 0.68611, 0.25555, 0, 0.67778],
    "87": [0, 0.68611, 0.15972, 0, 1.09305],
    "88": [0, 0.68611, 0.07778, 0, 0.94722],
    "89": [0, 0.68611, 0.25555, 0, 0.67458],
    "90": [0, 0.68611, 0.06979, 0, 0.77257],
    "97": [0, 0.44444, 0, 0, 0.63287],
    "98": [0, 0.69444, 0, 0, 0.52083],
    "99": [0, 0.44444, 0, 0, 0.51342],
    "100": [0, 0.69444, 0, 0, 0.60972],
    "101": [0, 0.44444, 0, 0, 0.55361],
    "102": [0.19444, 0.69444, 0.11042, 0, 0.56806],
    "103": [0.19444, 0.44444, 0.03704, 0, 0.5449],
    "104": [0, 0.69444, 0, 0, 0.66759],
    "105": [0, 0.69326, 0, 0, 0.4048],
    "106": [0.19444, 0.69326, 0.0622, 0, 0.47083],
    "107": [0, 0.69444, 0.01852, 0, 0.6037],
    "108": [0, 0.69444, 88e-4, 0, 0.34815],
    "109": [0, 0.44444, 0, 0, 1.0324],
    "110": [0, 0.44444, 0, 0, 0.71296],
    "111": [0, 0.44444, 0, 0, 0.58472],
    "112": [0.19444, 0.44444, 0, 0, 0.60092],
    "113": [0.19444, 0.44444, 0.03704, 0, 0.54213],
    "114": [0, 0.44444, 0.03194, 0, 0.5287],
    "115": [0, 0.44444, 0, 0, 0.53125],
    "116": [0, 0.63492, 0, 0, 0.41528],
    "117": [0, 0.44444, 0, 0, 0.68102],
    "118": [0, 0.44444, 0.03704, 0, 0.56666],
    "119": [0, 0.44444, 0.02778, 0, 0.83148],
    "120": [0, 0.44444, 0, 0, 0.65903],
    "121": [0.19444, 0.44444, 0.03704, 0, 0.59028],
    "122": [0, 0.44444, 0.04213, 0, 0.55509],
    "160": [0, 0, 0, 0, 0.25],
    "915": [0, 0.68611, 0.15972, 0, 0.65694],
    "916": [0, 0.68611, 0, 0, 0.95833],
    "920": [0, 0.68611, 0.03194, 0, 0.86722],
    "923": [0, 0.68611, 0, 0, 0.80555],
    "926": [0, 0.68611, 0.07458, 0, 0.84125],
    "928": [0, 0.68611, 0.08229, 0, 0.98229],
    "931": [0, 0.68611, 0.05451, 0, 0.88507],
    "933": [0, 0.68611, 0.15972, 0, 0.67083],
    "934": [0, 0.68611, 0, 0, 0.76666],
    "936": [0, 0.68611, 0.11653, 0, 0.71402],
    "937": [0, 0.68611, 0.04835, 0, 0.8789],
    "945": [0, 0.44444, 0, 0, 0.76064],
    "946": [0.19444, 0.69444, 0.03403, 0, 0.65972],
    "947": [0.19444, 0.44444, 0.06389, 0, 0.59003],
    "948": [0, 0.69444, 0.03819, 0, 0.52222],
    "949": [0, 0.44444, 0, 0, 0.52882],
    "950": [0.19444, 0.69444, 0.06215, 0, 0.50833],
    "951": [0.19444, 0.44444, 0.03704, 0, 0.6],
    "952": [0, 0.69444, 0.03194, 0, 0.5618],
    "953": [0, 0.44444, 0, 0, 0.41204],
    "954": [0, 0.44444, 0, 0, 0.66759],
    "955": [0, 0.69444, 0, 0, 0.67083],
    "956": [0.19444, 0.44444, 0, 0, 0.70787],
    "957": [0, 0.44444, 0.06898, 0, 0.57685],
    "958": [0.19444, 0.69444, 0.03021, 0, 0.50833],
    "959": [0, 0.44444, 0, 0, 0.58472],
    "960": [0, 0.44444, 0.03704, 0, 0.68241],
    "961": [0.19444, 0.44444, 0, 0, 0.6118],
    "962": [0.09722, 0.44444, 0.07917, 0, 0.42361],
    "963": [0, 0.44444, 0.03704, 0, 0.68588],
    "964": [0, 0.44444, 0.13472, 0, 0.52083],
    "965": [0, 0.44444, 0.03704, 0, 0.63055],
    "966": [0.19444, 0.44444, 0, 0, 0.74722],
    "967": [0.19444, 0.44444, 0, 0, 0.71805],
    "968": [0.19444, 0.69444, 0.03704, 0, 0.75833],
    "969": [0, 0.44444, 0.03704, 0, 0.71782],
    "977": [0, 0.69444, 0, 0, 0.69155],
    "981": [0.19444, 0.69444, 0, 0, 0.7125],
    "982": [0, 0.44444, 0.03194, 0, 0.975],
    "1009": [0.19444, 0.44444, 0, 0, 0.6118],
    "1013": [0, 0.44444, 0, 0, 0.48333],
    "57649": [0, 0.44444, 0, 0, 0.39352],
    "57911": [0.19444, 0.44444, 0, 0, 0.43889]
  },
  "Math-Italic": {
    "32": [0, 0, 0, 0, 0.25],
    "48": [0, 0.43056, 0, 0, 0.5],
    "49": [0, 0.43056, 0, 0, 0.5],
    "50": [0, 0.43056, 0, 0, 0.5],
    "51": [0.19444, 0.43056, 0, 0, 0.5],
    "52": [0.19444, 0.43056, 0, 0, 0.5],
    "53": [0.19444, 0.43056, 0, 0, 0.5],
    "54": [0, 0.64444, 0, 0, 0.5],
    "55": [0.19444, 0.43056, 0, 0, 0.5],
    "56": [0, 0.64444, 0, 0, 0.5],
    "57": [0.19444, 0.43056, 0, 0, 0.5],
    "65": [0, 0.68333, 0, 0.13889, 0.75],
    "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
    "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
    "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
    "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
    "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
    "71": [0, 0.68333, 0, 0.08334, 0.78625],
    "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
    "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
    "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
    "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
    "76": [0, 0.68333, 0, 0.02778, 0.68056],
    "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
    "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
    "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
    "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
    "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
    "82": [0, 0.68333, 773e-5, 0.08334, 0.75929],
    "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
    "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
    "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
    "86": [0, 0.68333, 0.22222, 0, 0.58333],
    "87": [0, 0.68333, 0.13889, 0, 0.94445],
    "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
    "89": [0, 0.68333, 0.22222, 0, 0.58056],
    "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
    "97": [0, 0.43056, 0, 0, 0.52859],
    "98": [0, 0.69444, 0, 0, 0.42917],
    "99": [0, 0.43056, 0, 0.05556, 0.43276],
    "100": [0, 0.69444, 0, 0.16667, 0.52049],
    "101": [0, 0.43056, 0, 0.05556, 0.46563],
    "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
    "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
    "104": [0, 0.69444, 0, 0, 0.57616],
    "105": [0, 0.65952, 0, 0, 0.34451],
    "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
    "107": [0, 0.69444, 0.03148, 0, 0.5206],
    "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
    "109": [0, 0.43056, 0, 0, 0.87801],
    "110": [0, 0.43056, 0, 0, 0.60023],
    "111": [0, 0.43056, 0, 0.05556, 0.48472],
    "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
    "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
    "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
    "115": [0, 0.43056, 0, 0.05556, 0.46875],
    "116": [0, 0.61508, 0, 0.08334, 0.36111],
    "117": [0, 0.43056, 0, 0.02778, 0.57246],
    "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
    "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
    "120": [0, 0.43056, 0, 0.02778, 0.57153],
    "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
    "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
    "160": [0, 0, 0, 0, 0.25],
    "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
    "916": [0, 0.68333, 0, 0.16667, 0.83334],
    "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
    "923": [0, 0.68333, 0, 0.16667, 0.69445],
    "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
    "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
    "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
    "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
    "934": [0, 0.68333, 0, 0.08334, 0.66667],
    "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
    "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
    "945": [0, 0.43056, 37e-4, 0.02778, 0.6397],
    "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
    "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
    "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
    "949": [0, 0.43056, 0, 0.08334, 0.46632],
    "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
    "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
    "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
    "953": [0, 0.43056, 0, 0.05556, 0.35394],
    "954": [0, 0.43056, 0, 0, 0.57616],
    "955": [0, 0.69444, 0, 0, 0.58334],
    "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
    "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
    "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
    "959": [0, 0.43056, 0, 0.05556, 0.48472],
    "960": [0, 0.43056, 0.03588, 0, 0.57003],
    "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
    "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
    "963": [0, 0.43056, 0.03588, 0, 0.57141],
    "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
    "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
    "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
    "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
    "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
    "969": [0, 0.43056, 0.03588, 0, 0.62245],
    "977": [0, 0.69444, 0, 0.08334, 0.59144],
    "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
    "982": [0, 0.43056, 0.02778, 0, 0.82813],
    "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
    "1013": [0, 0.43056, 0, 0.05556, 0.4059],
    "57649": [0, 0.43056, 0, 0.02778, 0.32246],
    "57911": [0.19444, 0.43056, 0, 0.08334, 0.38403]
  },
  "SansSerif-Bold": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.36667],
    "34": [0, 0.69444, 0, 0, 0.55834],
    "35": [0.19444, 0.69444, 0, 0, 0.91667],
    "36": [0.05556, 0.75, 0, 0, 0.55],
    "37": [0.05556, 0.75, 0, 0, 1.02912],
    "38": [0, 0.69444, 0, 0, 0.83056],
    "39": [0, 0.69444, 0, 0, 0.30556],
    "40": [0.25, 0.75, 0, 0, 0.42778],
    "41": [0.25, 0.75, 0, 0, 0.42778],
    "42": [0, 0.75, 0, 0, 0.55],
    "43": [0.11667, 0.61667, 0, 0, 0.85556],
    "44": [0.10556, 0.13056, 0, 0, 0.30556],
    "45": [0, 0.45833, 0, 0, 0.36667],
    "46": [0, 0.13056, 0, 0, 0.30556],
    "47": [0.25, 0.75, 0, 0, 0.55],
    "48": [0, 0.69444, 0, 0, 0.55],
    "49": [0, 0.69444, 0, 0, 0.55],
    "50": [0, 0.69444, 0, 0, 0.55],
    "51": [0, 0.69444, 0, 0, 0.55],
    "52": [0, 0.69444, 0, 0, 0.55],
    "53": [0, 0.69444, 0, 0, 0.55],
    "54": [0, 0.69444, 0, 0, 0.55],
    "55": [0, 0.69444, 0, 0, 0.55],
    "56": [0, 0.69444, 0, 0, 0.55],
    "57": [0, 0.69444, 0, 0, 0.55],
    "58": [0, 0.45833, 0, 0, 0.30556],
    "59": [0.10556, 0.45833, 0, 0, 0.30556],
    "61": [-0.09375, 0.40625, 0, 0, 0.85556],
    "63": [0, 0.69444, 0, 0, 0.51945],
    "64": [0, 0.69444, 0, 0, 0.73334],
    "65": [0, 0.69444, 0, 0, 0.73334],
    "66": [0, 0.69444, 0, 0, 0.73334],
    "67": [0, 0.69444, 0, 0, 0.70278],
    "68": [0, 0.69444, 0, 0, 0.79445],
    "69": [0, 0.69444, 0, 0, 0.64167],
    "70": [0, 0.69444, 0, 0, 0.61111],
    "71": [0, 0.69444, 0, 0, 0.73334],
    "72": [0, 0.69444, 0, 0, 0.79445],
    "73": [0, 0.69444, 0, 0, 0.33056],
    "74": [0, 0.69444, 0, 0, 0.51945],
    "75": [0, 0.69444, 0, 0, 0.76389],
    "76": [0, 0.69444, 0, 0, 0.58056],
    "77": [0, 0.69444, 0, 0, 0.97778],
    "78": [0, 0.69444, 0, 0, 0.79445],
    "79": [0, 0.69444, 0, 0, 0.79445],
    "80": [0, 0.69444, 0, 0, 0.70278],
    "81": [0.10556, 0.69444, 0, 0, 0.79445],
    "82": [0, 0.69444, 0, 0, 0.70278],
    "83": [0, 0.69444, 0, 0, 0.61111],
    "84": [0, 0.69444, 0, 0, 0.73334],
    "85": [0, 0.69444, 0, 0, 0.76389],
    "86": [0, 0.69444, 0.01528, 0, 0.73334],
    "87": [0, 0.69444, 0.01528, 0, 1.03889],
    "88": [0, 0.69444, 0, 0, 0.73334],
    "89": [0, 0.69444, 0.0275, 0, 0.73334],
    "90": [0, 0.69444, 0, 0, 0.67223],
    "91": [0.25, 0.75, 0, 0, 0.34306],
    "93": [0.25, 0.75, 0, 0, 0.34306],
    "94": [0, 0.69444, 0, 0, 0.55],
    "95": [0.35, 0.10833, 0.03056, 0, 0.55],
    "97": [0, 0.45833, 0, 0, 0.525],
    "98": [0, 0.69444, 0, 0, 0.56111],
    "99": [0, 0.45833, 0, 0, 0.48889],
    "100": [0, 0.69444, 0, 0, 0.56111],
    "101": [0, 0.45833, 0, 0, 0.51111],
    "102": [0, 0.69444, 0.07639, 0, 0.33611],
    "103": [0.19444, 0.45833, 0.01528, 0, 0.55],
    "104": [0, 0.69444, 0, 0, 0.56111],
    "105": [0, 0.69444, 0, 0, 0.25556],
    "106": [0.19444, 0.69444, 0, 0, 0.28611],
    "107": [0, 0.69444, 0, 0, 0.53056],
    "108": [0, 0.69444, 0, 0, 0.25556],
    "109": [0, 0.45833, 0, 0, 0.86667],
    "110": [0, 0.45833, 0, 0, 0.56111],
    "111": [0, 0.45833, 0, 0, 0.55],
    "112": [0.19444, 0.45833, 0, 0, 0.56111],
    "113": [0.19444, 0.45833, 0, 0, 0.56111],
    "114": [0, 0.45833, 0.01528, 0, 0.37222],
    "115": [0, 0.45833, 0, 0, 0.42167],
    "116": [0, 0.58929, 0, 0, 0.40417],
    "117": [0, 0.45833, 0, 0, 0.56111],
    "118": [0, 0.45833, 0.01528, 0, 0.5],
    "119": [0, 0.45833, 0.01528, 0, 0.74445],
    "120": [0, 0.45833, 0, 0, 0.5],
    "121": [0.19444, 0.45833, 0.01528, 0, 0.5],
    "122": [0, 0.45833, 0, 0, 0.47639],
    "126": [0.35, 0.34444, 0, 0, 0.55],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.69444, 0, 0, 0.55],
    "176": [0, 0.69444, 0, 0, 0.73334],
    "180": [0, 0.69444, 0, 0, 0.55],
    "184": [0.17014, 0, 0, 0, 0.48889],
    "305": [0, 0.45833, 0, 0, 0.25556],
    "567": [0.19444, 0.45833, 0, 0, 0.28611],
    "710": [0, 0.69444, 0, 0, 0.55],
    "711": [0, 0.63542, 0, 0, 0.55],
    "713": [0, 0.63778, 0, 0, 0.55],
    "728": [0, 0.69444, 0, 0, 0.55],
    "729": [0, 0.69444, 0, 0, 0.30556],
    "730": [0, 0.69444, 0, 0, 0.73334],
    "732": [0, 0.69444, 0, 0, 0.55],
    "733": [0, 0.69444, 0, 0, 0.55],
    "915": [0, 0.69444, 0, 0, 0.58056],
    "916": [0, 0.69444, 0, 0, 0.91667],
    "920": [0, 0.69444, 0, 0, 0.85556],
    "923": [0, 0.69444, 0, 0, 0.67223],
    "926": [0, 0.69444, 0, 0, 0.73334],
    "928": [0, 0.69444, 0, 0, 0.79445],
    "931": [0, 0.69444, 0, 0, 0.79445],
    "933": [0, 0.69444, 0, 0, 0.85556],
    "934": [0, 0.69444, 0, 0, 0.79445],
    "936": [0, 0.69444, 0, 0, 0.85556],
    "937": [0, 0.69444, 0, 0, 0.79445],
    "8211": [0, 0.45833, 0.03056, 0, 0.55],
    "8212": [0, 0.45833, 0.03056, 0, 1.10001],
    "8216": [0, 0.69444, 0, 0, 0.30556],
    "8217": [0, 0.69444, 0, 0, 0.30556],
    "8220": [0, 0.69444, 0, 0, 0.55834],
    "8221": [0, 0.69444, 0, 0, 0.55834]
  },
  "SansSerif-Italic": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0.05733, 0, 0.31945],
    "34": [0, 0.69444, 316e-5, 0, 0.5],
    "35": [0.19444, 0.69444, 0.05087, 0, 0.83334],
    "36": [0.05556, 0.75, 0.11156, 0, 0.5],
    "37": [0.05556, 0.75, 0.03126, 0, 0.83334],
    "38": [0, 0.69444, 0.03058, 0, 0.75834],
    "39": [0, 0.69444, 0.07816, 0, 0.27778],
    "40": [0.25, 0.75, 0.13164, 0, 0.38889],
    "41": [0.25, 0.75, 0.02536, 0, 0.38889],
    "42": [0, 0.75, 0.11775, 0, 0.5],
    "43": [0.08333, 0.58333, 0.02536, 0, 0.77778],
    "44": [0.125, 0.08333, 0, 0, 0.27778],
    "45": [0, 0.44444, 0.01946, 0, 0.33333],
    "46": [0, 0.08333, 0, 0, 0.27778],
    "47": [0.25, 0.75, 0.13164, 0, 0.5],
    "48": [0, 0.65556, 0.11156, 0, 0.5],
    "49": [0, 0.65556, 0.11156, 0, 0.5],
    "50": [0, 0.65556, 0.11156, 0, 0.5],
    "51": [0, 0.65556, 0.11156, 0, 0.5],
    "52": [0, 0.65556, 0.11156, 0, 0.5],
    "53": [0, 0.65556, 0.11156, 0, 0.5],
    "54": [0, 0.65556, 0.11156, 0, 0.5],
    "55": [0, 0.65556, 0.11156, 0, 0.5],
    "56": [0, 0.65556, 0.11156, 0, 0.5],
    "57": [0, 0.65556, 0.11156, 0, 0.5],
    "58": [0, 0.44444, 0.02502, 0, 0.27778],
    "59": [0.125, 0.44444, 0.02502, 0, 0.27778],
    "61": [-0.13, 0.37, 0.05087, 0, 0.77778],
    "63": [0, 0.69444, 0.11809, 0, 0.47222],
    "64": [0, 0.69444, 0.07555, 0, 0.66667],
    "65": [0, 0.69444, 0, 0, 0.66667],
    "66": [0, 0.69444, 0.08293, 0, 0.66667],
    "67": [0, 0.69444, 0.11983, 0, 0.63889],
    "68": [0, 0.69444, 0.07555, 0, 0.72223],
    "69": [0, 0.69444, 0.11983, 0, 0.59722],
    "70": [0, 0.69444, 0.13372, 0, 0.56945],
    "71": [0, 0.69444, 0.11983, 0, 0.66667],
    "72": [0, 0.69444, 0.08094, 0, 0.70834],
    "73": [0, 0.69444, 0.13372, 0, 0.27778],
    "74": [0, 0.69444, 0.08094, 0, 0.47222],
    "75": [0, 0.69444, 0.11983, 0, 0.69445],
    "76": [0, 0.69444, 0, 0, 0.54167],
    "77": [0, 0.69444, 0.08094, 0, 0.875],
    "78": [0, 0.69444, 0.08094, 0, 0.70834],
    "79": [0, 0.69444, 0.07555, 0, 0.73611],
    "80": [0, 0.69444, 0.08293, 0, 0.63889],
    "81": [0.125, 0.69444, 0.07555, 0, 0.73611],
    "82": [0, 0.69444, 0.08293, 0, 0.64584],
    "83": [0, 0.69444, 0.09205, 0, 0.55556],
    "84": [0, 0.69444, 0.13372, 0, 0.68056],
    "85": [0, 0.69444, 0.08094, 0, 0.6875],
    "86": [0, 0.69444, 0.1615, 0, 0.66667],
    "87": [0, 0.69444, 0.1615, 0, 0.94445],
    "88": [0, 0.69444, 0.13372, 0, 0.66667],
    "89": [0, 0.69444, 0.17261, 0, 0.66667],
    "90": [0, 0.69444, 0.11983, 0, 0.61111],
    "91": [0.25, 0.75, 0.15942, 0, 0.28889],
    "93": [0.25, 0.75, 0.08719, 0, 0.28889],
    "94": [0, 0.69444, 0.0799, 0, 0.5],
    "95": [0.35, 0.09444, 0.08616, 0, 0.5],
    "97": [0, 0.44444, 981e-5, 0, 0.48056],
    "98": [0, 0.69444, 0.03057, 0, 0.51667],
    "99": [0, 0.44444, 0.08336, 0, 0.44445],
    "100": [0, 0.69444, 0.09483, 0, 0.51667],
    "101": [0, 0.44444, 0.06778, 0, 0.44445],
    "102": [0, 0.69444, 0.21705, 0, 0.30556],
    "103": [0.19444, 0.44444, 0.10836, 0, 0.5],
    "104": [0, 0.69444, 0.01778, 0, 0.51667],
    "105": [0, 0.67937, 0.09718, 0, 0.23889],
    "106": [0.19444, 0.67937, 0.09162, 0, 0.26667],
    "107": [0, 0.69444, 0.08336, 0, 0.48889],
    "108": [0, 0.69444, 0.09483, 0, 0.23889],
    "109": [0, 0.44444, 0.01778, 0, 0.79445],
    "110": [0, 0.44444, 0.01778, 0, 0.51667],
    "111": [0, 0.44444, 0.06613, 0, 0.5],
    "112": [0.19444, 0.44444, 0.0389, 0, 0.51667],
    "113": [0.19444, 0.44444, 0.04169, 0, 0.51667],
    "114": [0, 0.44444, 0.10836, 0, 0.34167],
    "115": [0, 0.44444, 0.0778, 0, 0.38333],
    "116": [0, 0.57143, 0.07225, 0, 0.36111],
    "117": [0, 0.44444, 0.04169, 0, 0.51667],
    "118": [0, 0.44444, 0.10836, 0, 0.46111],
    "119": [0, 0.44444, 0.10836, 0, 0.68334],
    "120": [0, 0.44444, 0.09169, 0, 0.46111],
    "121": [0.19444, 0.44444, 0.10836, 0, 0.46111],
    "122": [0, 0.44444, 0.08752, 0, 0.43472],
    "126": [0.35, 0.32659, 0.08826, 0, 0.5],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.67937, 0.06385, 0, 0.5],
    "176": [0, 0.69444, 0, 0, 0.73752],
    "184": [0.17014, 0, 0, 0, 0.44445],
    "305": [0, 0.44444, 0.04169, 0, 0.23889],
    "567": [0.19444, 0.44444, 0.04169, 0, 0.26667],
    "710": [0, 0.69444, 0.0799, 0, 0.5],
    "711": [0, 0.63194, 0.08432, 0, 0.5],
    "713": [0, 0.60889, 0.08776, 0, 0.5],
    "714": [0, 0.69444, 0.09205, 0, 0.5],
    "715": [0, 0.69444, 0, 0, 0.5],
    "728": [0, 0.69444, 0.09483, 0, 0.5],
    "729": [0, 0.67937, 0.07774, 0, 0.27778],
    "730": [0, 0.69444, 0, 0, 0.73752],
    "732": [0, 0.67659, 0.08826, 0, 0.5],
    "733": [0, 0.69444, 0.09205, 0, 0.5],
    "915": [0, 0.69444, 0.13372, 0, 0.54167],
    "916": [0, 0.69444, 0, 0, 0.83334],
    "920": [0, 0.69444, 0.07555, 0, 0.77778],
    "923": [0, 0.69444, 0, 0, 0.61111],
    "926": [0, 0.69444, 0.12816, 0, 0.66667],
    "928": [0, 0.69444, 0.08094, 0, 0.70834],
    "931": [0, 0.69444, 0.11983, 0, 0.72222],
    "933": [0, 0.69444, 0.09031, 0, 0.77778],
    "934": [0, 0.69444, 0.04603, 0, 0.72222],
    "936": [0, 0.69444, 0.09031, 0, 0.77778],
    "937": [0, 0.69444, 0.08293, 0, 0.72222],
    "8211": [0, 0.44444, 0.08616, 0, 0.5],
    "8212": [0, 0.44444, 0.08616, 0, 1],
    "8216": [0, 0.69444, 0.07816, 0, 0.27778],
    "8217": [0, 0.69444, 0.07816, 0, 0.27778],
    "8220": [0, 0.69444, 0.14205, 0, 0.5],
    "8221": [0, 0.69444, 316e-5, 0, 0.5]
  },
  "SansSerif-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.31945],
    "34": [0, 0.69444, 0, 0, 0.5],
    "35": [0.19444, 0.69444, 0, 0, 0.83334],
    "36": [0.05556, 0.75, 0, 0, 0.5],
    "37": [0.05556, 0.75, 0, 0, 0.83334],
    "38": [0, 0.69444, 0, 0, 0.75834],
    "39": [0, 0.69444, 0, 0, 0.27778],
    "40": [0.25, 0.75, 0, 0, 0.38889],
    "41": [0.25, 0.75, 0, 0, 0.38889],
    "42": [0, 0.75, 0, 0, 0.5],
    "43": [0.08333, 0.58333, 0, 0, 0.77778],
    "44": [0.125, 0.08333, 0, 0, 0.27778],
    "45": [0, 0.44444, 0, 0, 0.33333],
    "46": [0, 0.08333, 0, 0, 0.27778],
    "47": [0.25, 0.75, 0, 0, 0.5],
    "48": [0, 0.65556, 0, 0, 0.5],
    "49": [0, 0.65556, 0, 0, 0.5],
    "50": [0, 0.65556, 0, 0, 0.5],
    "51": [0, 0.65556, 0, 0, 0.5],
    "52": [0, 0.65556, 0, 0, 0.5],
    "53": [0, 0.65556, 0, 0, 0.5],
    "54": [0, 0.65556, 0, 0, 0.5],
    "55": [0, 0.65556, 0, 0, 0.5],
    "56": [0, 0.65556, 0, 0, 0.5],
    "57": [0, 0.65556, 0, 0, 0.5],
    "58": [0, 0.44444, 0, 0, 0.27778],
    "59": [0.125, 0.44444, 0, 0, 0.27778],
    "61": [-0.13, 0.37, 0, 0, 0.77778],
    "63": [0, 0.69444, 0, 0, 0.47222],
    "64": [0, 0.69444, 0, 0, 0.66667],
    "65": [0, 0.69444, 0, 0, 0.66667],
    "66": [0, 0.69444, 0, 0, 0.66667],
    "67": [0, 0.69444, 0, 0, 0.63889],
    "68": [0, 0.69444, 0, 0, 0.72223],
    "69": [0, 0.69444, 0, 0, 0.59722],
    "70": [0, 0.69444, 0, 0, 0.56945],
    "71": [0, 0.69444, 0, 0, 0.66667],
    "72": [0, 0.69444, 0, 0, 0.70834],
    "73": [0, 0.69444, 0, 0, 0.27778],
    "74": [0, 0.69444, 0, 0, 0.47222],
    "75": [0, 0.69444, 0, 0, 0.69445],
    "76": [0, 0.69444, 0, 0, 0.54167],
    "77": [0, 0.69444, 0, 0, 0.875],
    "78": [0, 0.69444, 0, 0, 0.70834],
    "79": [0, 0.69444, 0, 0, 0.73611],
    "80": [0, 0.69444, 0, 0, 0.63889],
    "81": [0.125, 0.69444, 0, 0, 0.73611],
    "82": [0, 0.69444, 0, 0, 0.64584],
    "83": [0, 0.69444, 0, 0, 0.55556],
    "84": [0, 0.69444, 0, 0, 0.68056],
    "85": [0, 0.69444, 0, 0, 0.6875],
    "86": [0, 0.69444, 0.01389, 0, 0.66667],
    "87": [0, 0.69444, 0.01389, 0, 0.94445],
    "88": [0, 0.69444, 0, 0, 0.66667],
    "89": [0, 0.69444, 0.025, 0, 0.66667],
    "90": [0, 0.69444, 0, 0, 0.61111],
    "91": [0.25, 0.75, 0, 0, 0.28889],
    "93": [0.25, 0.75, 0, 0, 0.28889],
    "94": [0, 0.69444, 0, 0, 0.5],
    "95": [0.35, 0.09444, 0.02778, 0, 0.5],
    "97": [0, 0.44444, 0, 0, 0.48056],
    "98": [0, 0.69444, 0, 0, 0.51667],
    "99": [0, 0.44444, 0, 0, 0.44445],
    "100": [0, 0.69444, 0, 0, 0.51667],
    "101": [0, 0.44444, 0, 0, 0.44445],
    "102": [0, 0.69444, 0.06944, 0, 0.30556],
    "103": [0.19444, 0.44444, 0.01389, 0, 0.5],
    "104": [0, 0.69444, 0, 0, 0.51667],
    "105": [0, 0.67937, 0, 0, 0.23889],
    "106": [0.19444, 0.67937, 0, 0, 0.26667],
    "107": [0, 0.69444, 0, 0, 0.48889],
    "108": [0, 0.69444, 0, 0, 0.23889],
    "109": [0, 0.44444, 0, 0, 0.79445],
    "110": [0, 0.44444, 0, 0, 0.51667],
    "111": [0, 0.44444, 0, 0, 0.5],
    "112": [0.19444, 0.44444, 0, 0, 0.51667],
    "113": [0.19444, 0.44444, 0, 0, 0.51667],
    "114": [0, 0.44444, 0.01389, 0, 0.34167],
    "115": [0, 0.44444, 0, 0, 0.38333],
    "116": [0, 0.57143, 0, 0, 0.36111],
    "117": [0, 0.44444, 0, 0, 0.51667],
    "118": [0, 0.44444, 0.01389, 0, 0.46111],
    "119": [0, 0.44444, 0.01389, 0, 0.68334],
    "120": [0, 0.44444, 0, 0, 0.46111],
    "121": [0.19444, 0.44444, 0.01389, 0, 0.46111],
    "122": [0, 0.44444, 0, 0, 0.43472],
    "126": [0.35, 0.32659, 0, 0, 0.5],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.67937, 0, 0, 0.5],
    "176": [0, 0.69444, 0, 0, 0.66667],
    "184": [0.17014, 0, 0, 0, 0.44445],
    "305": [0, 0.44444, 0, 0, 0.23889],
    "567": [0.19444, 0.44444, 0, 0, 0.26667],
    "710": [0, 0.69444, 0, 0, 0.5],
    "711": [0, 0.63194, 0, 0, 0.5],
    "713": [0, 0.60889, 0, 0, 0.5],
    "714": [0, 0.69444, 0, 0, 0.5],
    "715": [0, 0.69444, 0, 0, 0.5],
    "728": [0, 0.69444, 0, 0, 0.5],
    "729": [0, 0.67937, 0, 0, 0.27778],
    "730": [0, 0.69444, 0, 0, 0.66667],
    "732": [0, 0.67659, 0, 0, 0.5],
    "733": [0, 0.69444, 0, 0, 0.5],
    "915": [0, 0.69444, 0, 0, 0.54167],
    "916": [0, 0.69444, 0, 0, 0.83334],
    "920": [0, 0.69444, 0, 0, 0.77778],
    "923": [0, 0.69444, 0, 0, 0.61111],
    "926": [0, 0.69444, 0, 0, 0.66667],
    "928": [0, 0.69444, 0, 0, 0.70834],
    "931": [0, 0.69444, 0, 0, 0.72222],
    "933": [0, 0.69444, 0, 0, 0.77778],
    "934": [0, 0.69444, 0, 0, 0.72222],
    "936": [0, 0.69444, 0, 0, 0.77778],
    "937": [0, 0.69444, 0, 0, 0.72222],
    "8211": [0, 0.44444, 0.02778, 0, 0.5],
    "8212": [0, 0.44444, 0.02778, 0, 1],
    "8216": [0, 0.69444, 0, 0, 0.27778],
    "8217": [0, 0.69444, 0, 0, 0.27778],
    "8220": [0, 0.69444, 0, 0, 0.5],
    "8221": [0, 0.69444, 0, 0, 0.5]
  },
  "Script-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "65": [0, 0.7, 0.22925, 0, 0.80253],
    "66": [0, 0.7, 0.04087, 0, 0.90757],
    "67": [0, 0.7, 0.1689, 0, 0.66619],
    "68": [0, 0.7, 0.09371, 0, 0.77443],
    "69": [0, 0.7, 0.18583, 0, 0.56162],
    "70": [0, 0.7, 0.13634, 0, 0.89544],
    "71": [0, 0.7, 0.17322, 0, 0.60961],
    "72": [0, 0.7, 0.29694, 0, 0.96919],
    "73": [0, 0.7, 0.19189, 0, 0.80907],
    "74": [0.27778, 0.7, 0.19189, 0, 1.05159],
    "75": [0, 0.7, 0.31259, 0, 0.91364],
    "76": [0, 0.7, 0.19189, 0, 0.87373],
    "77": [0, 0.7, 0.15981, 0, 1.08031],
    "78": [0, 0.7, 0.3525, 0, 0.9015],
    "79": [0, 0.7, 0.08078, 0, 0.73787],
    "80": [0, 0.7, 0.08078, 0, 1.01262],
    "81": [0, 0.7, 0.03305, 0, 0.88282],
    "82": [0, 0.7, 0.06259, 0, 0.85],
    "83": [0, 0.7, 0.19189, 0, 0.86767],
    "84": [0, 0.7, 0.29087, 0, 0.74697],
    "85": [0, 0.7, 0.25815, 0, 0.79996],
    "86": [0, 0.7, 0.27523, 0, 0.62204],
    "87": [0, 0.7, 0.27523, 0, 0.80532],
    "88": [0, 0.7, 0.26006, 0, 0.94445],
    "89": [0, 0.7, 0.2939, 0, 0.70961],
    "90": [0, 0.7, 0.24037, 0, 0.8212],
    "160": [0, 0, 0, 0, 0.25]
  },
  "Size1-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [0.35001, 0.85, 0, 0, 0.45834],
    "41": [0.35001, 0.85, 0, 0, 0.45834],
    "47": [0.35001, 0.85, 0, 0, 0.57778],
    "91": [0.35001, 0.85, 0, 0, 0.41667],
    "92": [0.35001, 0.85, 0, 0, 0.57778],
    "93": [0.35001, 0.85, 0, 0, 0.41667],
    "123": [0.35001, 0.85, 0, 0, 0.58334],
    "125": [0.35001, 0.85, 0, 0, 0.58334],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.72222, 0, 0, 0.55556],
    "732": [0, 0.72222, 0, 0, 0.55556],
    "770": [0, 0.72222, 0, 0, 0.55556],
    "771": [0, 0.72222, 0, 0, 0.55556],
    "8214": [-99e-5, 0.601, 0, 0, 0.77778],
    "8593": [1e-5, 0.6, 0, 0, 0.66667],
    "8595": [1e-5, 0.6, 0, 0, 0.66667],
    "8657": [1e-5, 0.6, 0, 0, 0.77778],
    "8659": [1e-5, 0.6, 0, 0, 0.77778],
    "8719": [0.25001, 0.75, 0, 0, 0.94445],
    "8720": [0.25001, 0.75, 0, 0, 0.94445],
    "8721": [0.25001, 0.75, 0, 0, 1.05556],
    "8730": [0.35001, 0.85, 0, 0, 1],
    "8739": [-599e-5, 0.606, 0, 0, 0.33333],
    "8741": [-599e-5, 0.606, 0, 0, 0.55556],
    "8747": [0.30612, 0.805, 0.19445, 0, 0.47222],
    "8748": [0.306, 0.805, 0.19445, 0, 0.47222],
    "8749": [0.306, 0.805, 0.19445, 0, 0.47222],
    "8750": [0.30612, 0.805, 0.19445, 0, 0.47222],
    "8896": [0.25001, 0.75, 0, 0, 0.83334],
    "8897": [0.25001, 0.75, 0, 0, 0.83334],
    "8898": [0.25001, 0.75, 0, 0, 0.83334],
    "8899": [0.25001, 0.75, 0, 0, 0.83334],
    "8968": [0.35001, 0.85, 0, 0, 0.47222],
    "8969": [0.35001, 0.85, 0, 0, 0.47222],
    "8970": [0.35001, 0.85, 0, 0, 0.47222],
    "8971": [0.35001, 0.85, 0, 0, 0.47222],
    "9168": [-99e-5, 0.601, 0, 0, 0.66667],
    "10216": [0.35001, 0.85, 0, 0, 0.47222],
    "10217": [0.35001, 0.85, 0, 0, 0.47222],
    "10752": [0.25001, 0.75, 0, 0, 1.11111],
    "10753": [0.25001, 0.75, 0, 0, 1.11111],
    "10754": [0.25001, 0.75, 0, 0, 1.11111],
    "10756": [0.25001, 0.75, 0, 0, 0.83334],
    "10758": [0.25001, 0.75, 0, 0, 0.83334]
  },
  "Size2-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [0.65002, 1.15, 0, 0, 0.59722],
    "41": [0.65002, 1.15, 0, 0, 0.59722],
    "47": [0.65002, 1.15, 0, 0, 0.81111],
    "91": [0.65002, 1.15, 0, 0, 0.47222],
    "92": [0.65002, 1.15, 0, 0, 0.81111],
    "93": [0.65002, 1.15, 0, 0, 0.47222],
    "123": [0.65002, 1.15, 0, 0, 0.66667],
    "125": [0.65002, 1.15, 0, 0, 0.66667],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.75, 0, 0, 1],
    "732": [0, 0.75, 0, 0, 1],
    "770": [0, 0.75, 0, 0, 1],
    "771": [0, 0.75, 0, 0, 1],
    "8719": [0.55001, 1.05, 0, 0, 1.27778],
    "8720": [0.55001, 1.05, 0, 0, 1.27778],
    "8721": [0.55001, 1.05, 0, 0, 1.44445],
    "8730": [0.65002, 1.15, 0, 0, 1],
    "8747": [0.86225, 1.36, 0.44445, 0, 0.55556],
    "8748": [0.862, 1.36, 0.44445, 0, 0.55556],
    "8749": [0.862, 1.36, 0.44445, 0, 0.55556],
    "8750": [0.86225, 1.36, 0.44445, 0, 0.55556],
    "8896": [0.55001, 1.05, 0, 0, 1.11111],
    "8897": [0.55001, 1.05, 0, 0, 1.11111],
    "8898": [0.55001, 1.05, 0, 0, 1.11111],
    "8899": [0.55001, 1.05, 0, 0, 1.11111],
    "8968": [0.65002, 1.15, 0, 0, 0.52778],
    "8969": [0.65002, 1.15, 0, 0, 0.52778],
    "8970": [0.65002, 1.15, 0, 0, 0.52778],
    "8971": [0.65002, 1.15, 0, 0, 0.52778],
    "10216": [0.65002, 1.15, 0, 0, 0.61111],
    "10217": [0.65002, 1.15, 0, 0, 0.61111],
    "10752": [0.55001, 1.05, 0, 0, 1.51112],
    "10753": [0.55001, 1.05, 0, 0, 1.51112],
    "10754": [0.55001, 1.05, 0, 0, 1.51112],
    "10756": [0.55001, 1.05, 0, 0, 1.11111],
    "10758": [0.55001, 1.05, 0, 0, 1.11111]
  },
  "Size3-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [0.95003, 1.45, 0, 0, 0.73611],
    "41": [0.95003, 1.45, 0, 0, 0.73611],
    "47": [0.95003, 1.45, 0, 0, 1.04445],
    "91": [0.95003, 1.45, 0, 0, 0.52778],
    "92": [0.95003, 1.45, 0, 0, 1.04445],
    "93": [0.95003, 1.45, 0, 0, 0.52778],
    "123": [0.95003, 1.45, 0, 0, 0.75],
    "125": [0.95003, 1.45, 0, 0, 0.75],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.75, 0, 0, 1.44445],
    "732": [0, 0.75, 0, 0, 1.44445],
    "770": [0, 0.75, 0, 0, 1.44445],
    "771": [0, 0.75, 0, 0, 1.44445],
    "8730": [0.95003, 1.45, 0, 0, 1],
    "8968": [0.95003, 1.45, 0, 0, 0.58334],
    "8969": [0.95003, 1.45, 0, 0, 0.58334],
    "8970": [0.95003, 1.45, 0, 0, 0.58334],
    "8971": [0.95003, 1.45, 0, 0, 0.58334],
    "10216": [0.95003, 1.45, 0, 0, 0.75],
    "10217": [0.95003, 1.45, 0, 0, 0.75]
  },
  "Size4-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [1.25003, 1.75, 0, 0, 0.79167],
    "41": [1.25003, 1.75, 0, 0, 0.79167],
    "47": [1.25003, 1.75, 0, 0, 1.27778],
    "91": [1.25003, 1.75, 0, 0, 0.58334],
    "92": [1.25003, 1.75, 0, 0, 1.27778],
    "93": [1.25003, 1.75, 0, 0, 0.58334],
    "123": [1.25003, 1.75, 0, 0, 0.80556],
    "125": [1.25003, 1.75, 0, 0, 0.80556],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.825, 0, 0, 1.8889],
    "732": [0, 0.825, 0, 0, 1.8889],
    "770": [0, 0.825, 0, 0, 1.8889],
    "771": [0, 0.825, 0, 0, 1.8889],
    "8730": [1.25003, 1.75, 0, 0, 1],
    "8968": [1.25003, 1.75, 0, 0, 0.63889],
    "8969": [1.25003, 1.75, 0, 0, 0.63889],
    "8970": [1.25003, 1.75, 0, 0, 0.63889],
    "8971": [1.25003, 1.75, 0, 0, 0.63889],
    "9115": [0.64502, 1.155, 0, 0, 0.875],
    "9116": [1e-5, 0.6, 0, 0, 0.875],
    "9117": [0.64502, 1.155, 0, 0, 0.875],
    "9118": [0.64502, 1.155, 0, 0, 0.875],
    "9119": [1e-5, 0.6, 0, 0, 0.875],
    "9120": [0.64502, 1.155, 0, 0, 0.875],
    "9121": [0.64502, 1.155, 0, 0, 0.66667],
    "9122": [-99e-5, 0.601, 0, 0, 0.66667],
    "9123": [0.64502, 1.155, 0, 0, 0.66667],
    "9124": [0.64502, 1.155, 0, 0, 0.66667],
    "9125": [-99e-5, 0.601, 0, 0, 0.66667],
    "9126": [0.64502, 1.155, 0, 0, 0.66667],
    "9127": [1e-5, 0.9, 0, 0, 0.88889],
    "9128": [0.65002, 1.15, 0, 0, 0.88889],
    "9129": [0.90001, 0, 0, 0, 0.88889],
    "9130": [0, 0.3, 0, 0, 0.88889],
    "9131": [1e-5, 0.9, 0, 0, 0.88889],
    "9132": [0.65002, 1.15, 0, 0, 0.88889],
    "9133": [0.90001, 0, 0, 0, 0.88889],
    "9143": [0.88502, 0.915, 0, 0, 1.05556],
    "10216": [1.25003, 1.75, 0, 0, 0.80556],
    "10217": [1.25003, 1.75, 0, 0, 0.80556],
    "57344": [-499e-5, 0.605, 0, 0, 1.05556],
    "57345": [-499e-5, 0.605, 0, 0, 1.05556],
    "57680": [0, 0.12, 0, 0, 0.45],
    "57681": [0, 0.12, 0, 0, 0.45],
    "57682": [0, 0.12, 0, 0, 0.45],
    "57683": [0, 0.12, 0, 0, 0.45]
  },
  "Typewriter-Regular": {
    "32": [0, 0, 0, 0, 0.525],
    "33": [0, 0.61111, 0, 0, 0.525],
    "34": [0, 0.61111, 0, 0, 0.525],
    "35": [0, 0.61111, 0, 0, 0.525],
    "36": [0.08333, 0.69444, 0, 0, 0.525],
    "37": [0.08333, 0.69444, 0, 0, 0.525],
    "38": [0, 0.61111, 0, 0, 0.525],
    "39": [0, 0.61111, 0, 0, 0.525],
    "40": [0.08333, 0.69444, 0, 0, 0.525],
    "41": [0.08333, 0.69444, 0, 0, 0.525],
    "42": [0, 0.52083, 0, 0, 0.525],
    "43": [-0.08056, 0.53055, 0, 0, 0.525],
    "44": [0.13889, 0.125, 0, 0, 0.525],
    "45": [-0.08056, 0.53055, 0, 0, 0.525],
    "46": [0, 0.125, 0, 0, 0.525],
    "47": [0.08333, 0.69444, 0, 0, 0.525],
    "48": [0, 0.61111, 0, 0, 0.525],
    "49": [0, 0.61111, 0, 0, 0.525],
    "50": [0, 0.61111, 0, 0, 0.525],
    "51": [0, 0.61111, 0, 0, 0.525],
    "52": [0, 0.61111, 0, 0, 0.525],
    "53": [0, 0.61111, 0, 0, 0.525],
    "54": [0, 0.61111, 0, 0, 0.525],
    "55": [0, 0.61111, 0, 0, 0.525],
    "56": [0, 0.61111, 0, 0, 0.525],
    "57": [0, 0.61111, 0, 0, 0.525],
    "58": [0, 0.43056, 0, 0, 0.525],
    "59": [0.13889, 0.43056, 0, 0, 0.525],
    "60": [-0.05556, 0.55556, 0, 0, 0.525],
    "61": [-0.19549, 0.41562, 0, 0, 0.525],
    "62": [-0.05556, 0.55556, 0, 0, 0.525],
    "63": [0, 0.61111, 0, 0, 0.525],
    "64": [0, 0.61111, 0, 0, 0.525],
    "65": [0, 0.61111, 0, 0, 0.525],
    "66": [0, 0.61111, 0, 0, 0.525],
    "67": [0, 0.61111, 0, 0, 0.525],
    "68": [0, 0.61111, 0, 0, 0.525],
    "69": [0, 0.61111, 0, 0, 0.525],
    "70": [0, 0.61111, 0, 0, 0.525],
    "71": [0, 0.61111, 0, 0, 0.525],
    "72": [0, 0.61111, 0, 0, 0.525],
    "73": [0, 0.61111, 0, 0, 0.525],
    "74": [0, 0.61111, 0, 0, 0.525],
    "75": [0, 0.61111, 0, 0, 0.525],
    "76": [0, 0.61111, 0, 0, 0.525],
    "77": [0, 0.61111, 0, 0, 0.525],
    "78": [0, 0.61111, 0, 0, 0.525],
    "79": [0, 0.61111, 0, 0, 0.525],
    "80": [0, 0.61111, 0, 0, 0.525],
    "81": [0.13889, 0.61111, 0, 0, 0.525],
    "82": [0, 0.61111, 0, 0, 0.525],
    "83": [0, 0.61111, 0, 0, 0.525],
    "84": [0, 0.61111, 0, 0, 0.525],
    "85": [0, 0.61111, 0, 0, 0.525],
    "86": [0, 0.61111, 0, 0, 0.525],
    "87": [0, 0.61111, 0, 0, 0.525],
    "88": [0, 0.61111, 0, 0, 0.525],
    "89": [0, 0.61111, 0, 0, 0.525],
    "90": [0, 0.61111, 0, 0, 0.525],
    "91": [0.08333, 0.69444, 0, 0, 0.525],
    "92": [0.08333, 0.69444, 0, 0, 0.525],
    "93": [0.08333, 0.69444, 0, 0, 0.525],
    "94": [0, 0.61111, 0, 0, 0.525],
    "95": [0.09514, 0, 0, 0, 0.525],
    "96": [0, 0.61111, 0, 0, 0.525],
    "97": [0, 0.43056, 0, 0, 0.525],
    "98": [0, 0.61111, 0, 0, 0.525],
    "99": [0, 0.43056, 0, 0, 0.525],
    "100": [0, 0.61111, 0, 0, 0.525],
    "101": [0, 0.43056, 0, 0, 0.525],
    "102": [0, 0.61111, 0, 0, 0.525],
    "103": [0.22222, 0.43056, 0, 0, 0.525],
    "104": [0, 0.61111, 0, 0, 0.525],
    "105": [0, 0.61111, 0, 0, 0.525],
    "106": [0.22222, 0.61111, 0, 0, 0.525],
    "107": [0, 0.61111, 0, 0, 0.525],
    "108": [0, 0.61111, 0, 0, 0.525],
    "109": [0, 0.43056, 0, 0, 0.525],
    "110": [0, 0.43056, 0, 0, 0.525],
    "111": [0, 0.43056, 0, 0, 0.525],
    "112": [0.22222, 0.43056, 0, 0, 0.525],
    "113": [0.22222, 0.43056, 0, 0, 0.525],
    "114": [0, 0.43056, 0, 0, 0.525],
    "115": [0, 0.43056, 0, 0, 0.525],
    "116": [0, 0.55358, 0, 0, 0.525],
    "117": [0, 0.43056, 0, 0, 0.525],
    "118": [0, 0.43056, 0, 0, 0.525],
    "119": [0, 0.43056, 0, 0, 0.525],
    "120": [0, 0.43056, 0, 0, 0.525],
    "121": [0.22222, 0.43056, 0, 0, 0.525],
    "122": [0, 0.43056, 0, 0, 0.525],
    "123": [0.08333, 0.69444, 0, 0, 0.525],
    "124": [0.08333, 0.69444, 0, 0, 0.525],
    "125": [0.08333, 0.69444, 0, 0, 0.525],
    "126": [0, 0.61111, 0, 0, 0.525],
    "127": [0, 0.61111, 0, 0, 0.525],
    "160": [0, 0, 0, 0, 0.525],
    "176": [0, 0.61111, 0, 0, 0.525],
    "184": [0.19445, 0, 0, 0, 0.525],
    "305": [0, 0.43056, 0, 0, 0.525],
    "567": [0.22222, 0.43056, 0, 0, 0.525],
    "711": [0, 0.56597, 0, 0, 0.525],
    "713": [0, 0.56555, 0, 0, 0.525],
    "714": [0, 0.61111, 0, 0, 0.525],
    "715": [0, 0.61111, 0, 0, 0.525],
    "728": [0, 0.61111, 0, 0, 0.525],
    "730": [0, 0.61111, 0, 0, 0.525],
    "770": [0, 0.61111, 0, 0, 0.525],
    "771": [0, 0.61111, 0, 0, 0.525],
    "776": [0, 0.61111, 0, 0, 0.525],
    "915": [0, 0.61111, 0, 0, 0.525],
    "916": [0, 0.61111, 0, 0, 0.525],
    "920": [0, 0.61111, 0, 0, 0.525],
    "923": [0, 0.61111, 0, 0, 0.525],
    "926": [0, 0.61111, 0, 0, 0.525],
    "928": [0, 0.61111, 0, 0, 0.525],
    "931": [0, 0.61111, 0, 0, 0.525],
    "933": [0, 0.61111, 0, 0, 0.525],
    "934": [0, 0.61111, 0, 0, 0.525],
    "936": [0, 0.61111, 0, 0, 0.525],
    "937": [0, 0.61111, 0, 0, 0.525],
    "8216": [0, 0.61111, 0, 0, 0.525],
    "8217": [0, 0.61111, 0, 0, 0.525],
    "8242": [0, 0.61111, 0, 0, 0.525],
    "9251": [0.11111, 0.21944, 0, 0, 0.525]
  }
};
var sigmasAndXis = {
  slant: [0.25, 0.25, 0.25],
  space: [0, 0, 0],
  stretch: [0, 0, 0],
  shrink: [0, 0, 0],
  xHeight: [0.431, 0.431, 0.431],
  quad: [1, 1.171, 1.472],
  extraSpace: [0, 0, 0],
  num1: [0.677, 0.732, 0.925],
  num2: [0.394, 0.384, 0.387],
  num3: [0.444, 0.471, 0.504],
  denom1: [0.686, 0.752, 1.025],
  denom2: [0.345, 0.344, 0.532],
  sup1: [0.413, 0.503, 0.504],
  sup2: [0.363, 0.431, 0.404],
  sup3: [0.289, 0.286, 0.294],
  sub1: [0.15, 0.143, 0.2],
  sub2: [0.247, 0.286, 0.4],
  supDrop: [0.386, 0.353, 0.494],
  subDrop: [0.05, 0.071, 0.1],
  delim1: [2.39, 1.7, 1.98],
  delim2: [1.01, 1.157, 1.42],
  axisHeight: [0.25, 0.25, 0.25],
  defaultRuleThickness: [0.04, 0.049, 0.049],
  bigOpSpacing1: [0.111, 0.111, 0.111],
  bigOpSpacing2: [0.166, 0.166, 0.166],
  bigOpSpacing3: [0.2, 0.2, 0.2],
  bigOpSpacing4: [0.6, 0.611, 0.611],
  bigOpSpacing5: [0.1, 0.143, 0.143],
  sqrtRuleThickness: [0.04, 0.04, 0.04],
  ptPerEm: [10, 10, 10],
  doubleRuleSep: [0.2, 0.2, 0.2],
  arrayRuleWidth: [0.04, 0.04, 0.04],
  fboxsep: [0.3, 0.3, 0.3],
  fboxrule: [0.04, 0.04, 0.04]
};
var extraCharacterMap = {
  "\xC5": "A",
  "\xD0": "D",
  "\xDE": "o",
  "\xE5": "a",
  "\xF0": "d",
  "\xFE": "o",
  "\u0410": "A",
  "\u0411": "B",
  "\u0412": "B",
  "\u0413": "F",
  "\u0414": "A",
  "\u0415": "E",
  "\u0416": "K",
  "\u0417": "3",
  "\u0418": "N",
  "\u0419": "N",
  "\u041A": "K",
  "\u041B": "N",
  "\u041C": "M",
  "\u041D": "H",
  "\u041E": "O",
  "\u041F": "N",
  "\u0420": "P",
  "\u0421": "C",
  "\u0422": "T",
  "\u0423": "y",
  "\u0424": "O",
  "\u0425": "X",
  "\u0426": "U",
  "\u0427": "h",
  "\u0428": "W",
  "\u0429": "W",
  "\u042A": "B",
  "\u042B": "X",
  "\u042C": "B",
  "\u042D": "3",
  "\u042E": "X",
  "\u042F": "R",
  "\u0430": "a",
  "\u0431": "b",
  "\u0432": "a",
  "\u0433": "r",
  "\u0434": "y",
  "\u0435": "e",
  "\u0436": "m",
  "\u0437": "e",
  "\u0438": "n",
  "\u0439": "n",
  "\u043A": "n",
  "\u043B": "n",
  "\u043C": "m",
  "\u043D": "n",
  "\u043E": "o",
  "\u043F": "n",
  "\u0440": "p",
  "\u0441": "c",
  "\u0442": "o",
  "\u0443": "y",
  "\u0444": "b",
  "\u0445": "x",
  "\u0446": "n",
  "\u0447": "n",
  "\u0448": "w",
  "\u0449": "w",
  "\u044A": "a",
  "\u044B": "m",
  "\u044C": "a",
  "\u044D": "e",
  "\u044E": "m",
  "\u044F": "r"
};
function setFontMetrics(fontName, metrics) {
  fontMetricsData[fontName] = metrics;
}
function getCharacterMetrics(character, font, mode) {
  if (!fontMetricsData[font]) {
    throw new Error("Font metrics not found for font: " + font + ".");
  }
  var ch = character.charCodeAt(0);
  var metrics = fontMetricsData[font][ch];
  if (!metrics && character[0] in extraCharacterMap) {
    ch = extraCharacterMap[character[0]].charCodeAt(0);
    metrics = fontMetricsData[font][ch];
  }
  if (!metrics && mode === "text") {
    if (supportedCodepoint(ch)) {
      metrics = fontMetricsData[font][77];
    }
  }
  if (metrics) {
    return {
      depth: metrics[0],
      height: metrics[1],
      italic: metrics[2],
      skew: metrics[3],
      width: metrics[4]
    };
  }
}
var fontMetricsBySizeIndex = {};
function getGlobalMetrics(size) {
  var sizeIndex;
  if (size >= 5) {
    sizeIndex = 0;
  } else if (size >= 3) {
    sizeIndex = 1;
  } else {
    sizeIndex = 2;
  }
  if (!fontMetricsBySizeIndex[sizeIndex]) {
    var metrics = fontMetricsBySizeIndex[sizeIndex] = {
      cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
    };
    for (var key in sigmasAndXis) {
      if (sigmasAndXis.hasOwnProperty(key)) {
        metrics[key] = sigmasAndXis[key][sizeIndex];
      }
    }
  }
  return fontMetricsBySizeIndex[sizeIndex];
}
var sizeStyleMap = [[1, 1, 1], [2, 1, 1], [3, 1, 1], [4, 2, 1], [5, 2, 1], [6, 3, 1], [7, 4, 2], [8, 6, 3], [9, 7, 6], [10, 8, 7], [11, 10, 9]];
var sizeMultipliers = [0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.2, 1.44, 1.728, 2.074, 2.488];
var sizeAtStyle = function sizeAtStyle2(size, style) {
  return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
};
var Options = class {
  constructor(data) {
    this.style = void 0;
    this.color = void 0;
    this.size = void 0;
    this.textSize = void 0;
    this.phantom = void 0;
    this.font = void 0;
    this.fontFamily = void 0;
    this.fontWeight = void 0;
    this.fontShape = void 0;
    this.sizeMultiplier = void 0;
    this.maxSize = void 0;
    this.minRuleThickness = void 0;
    this._fontMetrics = void 0;
    this.style = data.style;
    this.color = data.color;
    this.size = data.size || Options.BASESIZE;
    this.textSize = data.textSize || this.size;
    this.phantom = !!data.phantom;
    this.font = data.font || "";
    this.fontFamily = data.fontFamily || "";
    this.fontWeight = data.fontWeight || "";
    this.fontShape = data.fontShape || "";
    this.sizeMultiplier = sizeMultipliers[this.size - 1];
    this.maxSize = data.maxSize;
    this.minRuleThickness = data.minRuleThickness;
    this._fontMetrics = void 0;
  }
  extend(extension) {
    var data = {
      style: this.style,
      size: this.size,
      textSize: this.textSize,
      color: this.color,
      phantom: this.phantom,
      font: this.font,
      fontFamily: this.fontFamily,
      fontWeight: this.fontWeight,
      fontShape: this.fontShape,
      maxSize: this.maxSize,
      minRuleThickness: this.minRuleThickness
    };
    for (var key in extension) {
      if (extension.hasOwnProperty(key)) {
        data[key] = extension[key];
      }
    }
    return new Options(data);
  }
  havingStyle(style) {
    if (this.style === style) {
      return this;
    } else {
      return this.extend({
        style,
        size: sizeAtStyle(this.textSize, style)
      });
    }
  }
  havingCrampedStyle() {
    return this.havingStyle(this.style.cramp());
  }
  havingSize(size) {
    if (this.size === size && this.textSize === size) {
      return this;
    } else {
      return this.extend({
        style: this.style.text(),
        size,
        textSize: size,
        sizeMultiplier: sizeMultipliers[size - 1]
      });
    }
  }
  havingBaseStyle(style) {
    style = style || this.style.text();
    var wantSize = sizeAtStyle(Options.BASESIZE, style);
    if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {
      return this;
    } else {
      return this.extend({
        style,
        size: wantSize
      });
    }
  }
  havingBaseSizing() {
    var size;
    switch (this.style.id) {
      case 4:
      case 5:
        size = 3;
        break;
      case 6:
      case 7:
        size = 1;
        break;
      default:
        size = 6;
    }
    return this.extend({
      style: this.style.text(),
      size
    });
  }
  withColor(color) {
    return this.extend({
      color
    });
  }
  withPhantom() {
    return this.extend({
      phantom: true
    });
  }
  withFont(font) {
    return this.extend({
      font
    });
  }
  withTextFontFamily(fontFamily) {
    return this.extend({
      fontFamily,
      font: ""
    });
  }
  withTextFontWeight(fontWeight) {
    return this.extend({
      fontWeight,
      font: ""
    });
  }
  withTextFontShape(fontShape) {
    return this.extend({
      fontShape,
      font: ""
    });
  }
  sizingClasses(oldOptions) {
    if (oldOptions.size !== this.size) {
      return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
    } else {
      return [];
    }
  }
  baseSizingClasses() {
    if (this.size !== Options.BASESIZE) {
      return ["sizing", "reset-size" + this.size, "size" + Options.BASESIZE];
    } else {
      return [];
    }
  }
  fontMetrics() {
    if (!this._fontMetrics) {
      this._fontMetrics = getGlobalMetrics(this.size);
    }
    return this._fontMetrics;
  }
  getColor() {
    if (this.phantom) {
      return "transparent";
    } else {
      return this.color;
    }
  }
};
Options.BASESIZE = 6;
var ptPerUnit = {
  "pt": 1,
  "mm": 7227 / 2540,
  "cm": 7227 / 254,
  "in": 72.27,
  "bp": 803 / 800,
  "pc": 12,
  "dd": 1238 / 1157,
  "cc": 14856 / 1157,
  "nd": 685 / 642,
  "nc": 1370 / 107,
  "sp": 1 / 65536,
  "px": 803 / 800
};
var relativeUnit = {
  "ex": true,
  "em": true,
  "mu": true
};
var validUnit = function validUnit2(unit) {
  if (typeof unit !== "string") {
    unit = unit.unit;
  }
  return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
};
var calculateSize = function calculateSize2(sizeValue, options) {
  var scale;
  if (sizeValue.unit in ptPerUnit) {
    scale = ptPerUnit[sizeValue.unit] / options.fontMetrics().ptPerEm / options.sizeMultiplier;
  } else if (sizeValue.unit === "mu") {
    scale = options.fontMetrics().cssEmPerMu;
  } else {
    var unitOptions;
    if (options.style.isTight()) {
      unitOptions = options.havingStyle(options.style.text());
    } else {
      unitOptions = options;
    }
    if (sizeValue.unit === "ex") {
      scale = unitOptions.fontMetrics().xHeight;
    } else if (sizeValue.unit === "em") {
      scale = unitOptions.fontMetrics().quad;
    } else {
      throw new ParseError("Invalid unit: '" + sizeValue.unit + "'");
    }
    if (unitOptions !== options) {
      scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
    }
  }
  return Math.min(sizeValue.number * scale, options.maxSize);
};
var makeEm = function makeEm2(n) {
  return +n.toFixed(4) + "em";
};
var createClass = function createClass2(classes) {
  return classes.filter(cls => cls).join(" ");
};
var initNode = function initNode2(classes, options, style) {
  this.classes = classes || [];
  this.attributes = {};
  this.height = 0;
  this.depth = 0;
  this.maxFontSize = 0;
  this.style = style || {};
  if (options) {
    if (options.style.isTight()) {
      this.classes.push("mtight");
    }
    var color = options.getColor();
    if (color) {
      this.style.color = color;
    }
  }
};
var toNode = function toNode2(tagName) {
  var node = document.createElement(tagName);
  node.className = createClass(this.classes);
  for (var style in this.style) {
    if (this.style.hasOwnProperty(style)) {
      node.style[style] = this.style[style];
    }
  }
  for (var attr in this.attributes) {
    if (this.attributes.hasOwnProperty(attr)) {
      node.setAttribute(attr, this.attributes[attr]);
    }
  }
  for (var i = 0; i < this.children.length; i++) {
    node.appendChild(this.children[i].toNode());
  }
  return node;
};
var toMarkup = function toMarkup2(tagName) {
  var markup = "<" + tagName;
  if (this.classes.length) {
    markup += ' class="' + utils.escape(createClass(this.classes)) + '"';
  }
  var styles2 = "";
  for (var style in this.style) {
    if (this.style.hasOwnProperty(style)) {
      styles2 += utils.hyphenate(style) + ":" + this.style[style] + ";";
    }
  }
  if (styles2) {
    markup += ' style="' + utils.escape(styles2) + '"';
  }
  for (var attr in this.attributes) {
    if (this.attributes.hasOwnProperty(attr)) {
      markup += " " + attr + '="' + utils.escape(this.attributes[attr]) + '"';
    }
  }
  markup += ">";
  for (var i = 0; i < this.children.length; i++) {
    markup += this.children[i].toMarkup();
  }
  markup += "</" + tagName + ">";
  return markup;
};
var Span = class {
  constructor(classes, children, options, style) {
    this.children = void 0;
    this.attributes = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.width = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    initNode.call(this, classes, options, style);
    this.children = children || [];
  }
  setAttribute(attribute, value) {
    this.attributes[attribute] = value;
  }
  hasClass(className) {
    return utils.contains(this.classes, className);
  }
  toNode() {
    return toNode.call(this, "span");
  }
  toMarkup() {
    return toMarkup.call(this, "span");
  }
};
var Anchor = class {
  constructor(href, classes, children, options) {
    this.children = void 0;
    this.attributes = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    initNode.call(this, classes, options);
    this.children = children || [];
    this.setAttribute("href", href);
  }
  setAttribute(attribute, value) {
    this.attributes[attribute] = value;
  }
  hasClass(className) {
    return utils.contains(this.classes, className);
  }
  toNode() {
    return toNode.call(this, "a");
  }
  toMarkup() {
    return toMarkup.call(this, "a");
  }
};
var Img = class {
  constructor(src, alt, style) {
    this.src = void 0;
    this.alt = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    this.alt = alt;
    this.src = src;
    this.classes = ["mord"];
    this.style = style;
  }
  hasClass(className) {
    return utils.contains(this.classes, className);
  }
  toNode() {
    var node = document.createElement("img");
    node.src = this.src;
    node.alt = this.alt;
    node.className = "mord";
    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        node.style[style] = this.style[style];
      }
    }
    return node;
  }
  toMarkup() {
    var markup = '<img src="' + utils.escape(this.src) + '"' + (' alt="' + utils.escape(this.alt) + '"');
    var styles2 = "";
    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        styles2 += utils.hyphenate(style) + ":" + this.style[style] + ";";
      }
    }
    if (styles2) {
      markup += ' style="' + utils.escape(styles2) + '"';
    }
    markup += "'/>";
    return markup;
  }
};
var iCombinations = {
  "\xEE": "\u0131\u0302",
  "\xEF": "\u0131\u0308",
  "\xED": "\u0131\u0301",
  "\xEC": "\u0131\u0300"
};
var SymbolNode = class {
  constructor(text2, height, depth, italic, skew, width, classes, style) {
    this.text = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.italic = void 0;
    this.skew = void 0;
    this.width = void 0;
    this.maxFontSize = void 0;
    this.classes = void 0;
    this.style = void 0;
    this.text = text2;
    this.height = height || 0;
    this.depth = depth || 0;
    this.italic = italic || 0;
    this.skew = skew || 0;
    this.width = width || 0;
    this.classes = classes || [];
    this.style = style || {};
    this.maxFontSize = 0;
    var script = scriptFromCodepoint(this.text.charCodeAt(0));
    if (script) {
      this.classes.push(script + "_fallback");
    }
    if (/[îïíì]/.test(this.text)) {
      this.text = iCombinations[this.text];
    }
  }
  hasClass(className) {
    return utils.contains(this.classes, className);
  }
  toNode() {
    var node = document.createTextNode(this.text);
    var span = null;
    if (this.italic > 0) {
      span = document.createElement("span");
      span.style.marginRight = makeEm(this.italic);
    }
    if (this.classes.length > 0) {
      span = span || document.createElement("span");
      span.className = createClass(this.classes);
    }
    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        span = span || document.createElement("span");
        span.style[style] = this.style[style];
      }
    }
    if (span) {
      span.appendChild(node);
      return span;
    } else {
      return node;
    }
  }
  toMarkup() {
    var needsSpan = false;
    var markup = "<span";
    if (this.classes.length) {
      needsSpan = true;
      markup += ' class="';
      markup += utils.escape(createClass(this.classes));
      markup += '"';
    }
    var styles2 = "";
    if (this.italic > 0) {
      styles2 += "margin-right:" + this.italic + "em;";
    }
    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        styles2 += utils.hyphenate(style) + ":" + this.style[style] + ";";
      }
    }
    if (styles2) {
      needsSpan = true;
      markup += ' style="' + utils.escape(styles2) + '"';
    }
    var escaped = utils.escape(this.text);
    if (needsSpan) {
      markup += ">";
      markup += escaped;
      markup += "</span>";
      return markup;
    } else {
      return escaped;
    }
  }
};
var SvgNode = class {
  constructor(children, attributes) {
    this.children = void 0;
    this.attributes = void 0;
    this.children = children || [];
    this.attributes = attributes || {};
  }
  toNode() {
    var svgNS = "http://www.w3.org/2000/svg";
    var node = document.createElementNS(svgNS, "svg");
    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }
    for (var i = 0; i < this.children.length; i++) {
      node.appendChild(this.children[i].toNode());
    }
    return node;
  }
  toMarkup() {
    var markup = '<svg xmlns="http://www.w3.org/2000/svg"';
    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + '="' + utils.escape(this.attributes[attr]) + '"';
      }
    }
    markup += ">";
    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }
    markup += "</svg>";
    return markup;
  }
};
var PathNode = class {
  constructor(pathName, alternate) {
    this.pathName = void 0;
    this.alternate = void 0;
    this.pathName = pathName;
    this.alternate = alternate;
  }
  toNode() {
    var svgNS = "http://www.w3.org/2000/svg";
    var node = document.createElementNS(svgNS, "path");
    if (this.alternate) {
      node.setAttribute("d", this.alternate);
    } else {
      node.setAttribute("d", path[this.pathName]);
    }
    return node;
  }
  toMarkup() {
    if (this.alternate) {
      return '<path d="' + utils.escape(this.alternate) + '"/>';
    } else {
      return '<path d="' + utils.escape(path[this.pathName]) + '"/>';
    }
  }
};
var LineNode = class {
  constructor(attributes) {
    this.attributes = void 0;
    this.attributes = attributes || {};
  }
  toNode() {
    var svgNS = "http://www.w3.org/2000/svg";
    var node = document.createElementNS(svgNS, "line");
    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }
    return node;
  }
  toMarkup() {
    var markup = "<line";
    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + '="' + utils.escape(this.attributes[attr]) + '"';
      }
    }
    markup += "/>";
    return markup;
  }
};
function assertSymbolDomNode(group) {
  if (group instanceof SymbolNode) {
    return group;
  } else {
    throw new Error("Expected symbolNode but got " + String(group) + ".");
  }
}
function assertSpan(group) {
  if (group instanceof Span) {
    return group;
  } else {
    throw new Error("Expected span<HtmlDomNode> but got " + String(group) + ".");
  }
}
var ATOMS = {
  "bin": 1,
  "close": 1,
  "inner": 1,
  "open": 1,
  "punct": 1,
  "rel": 1
};
var NON_ATOMS = {
  "accent-token": 1,
  "mathord": 1,
  "op-token": 1,
  "spacing": 1,
  "textord": 1
};
var symbols = {
  "math": {},
  "text": {}
};
function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {
  symbols[mode][name] = {
    font,
    group,
    replace
  };
  if (acceptUnicodeChar && replace) {
    symbols[mode][replace] = symbols[mode][name];
  }
}
var math = "math";
var text = "text";
var main = "main";
var ams = "ams";
var accent = "accent-token";
var bin = "bin";
var close = "close";
var inner = "inner";
var mathord = "mathord";
var op = "op-token";
var open = "open";
var punct = "punct";
var rel = "rel";
var spacing = "spacing";
var textord = "textord";
defineSymbol(math, main, rel, "\u2261", "\\equiv", true);
defineSymbol(math, main, rel, "\u227A", "\\prec", true);
defineSymbol(math, main, rel, "\u227B", "\\succ", true);
defineSymbol(math, main, rel, "\u223C", "\\sim", true);
defineSymbol(math, main, rel, "\u22A5", "\\perp");
defineSymbol(math, main, rel, "\u2AAF", "\\preceq", true);
defineSymbol(math, main, rel, "\u2AB0", "\\succeq", true);
defineSymbol(math, main, rel, "\u2243", "\\simeq", true);
defineSymbol(math, main, rel, "\u2223", "\\mid", true);
defineSymbol(math, main, rel, "\u226A", "\\ll", true);
defineSymbol(math, main, rel, "\u226B", "\\gg", true);
defineSymbol(math, main, rel, "\u224D", "\\asymp", true);
defineSymbol(math, main, rel, "\u2225", "\\parallel");
defineSymbol(math, main, rel, "\u22C8", "\\bowtie", true);
defineSymbol(math, main, rel, "\u2323", "\\smile", true);
defineSymbol(math, main, rel, "\u2291", "\\sqsubseteq", true);
defineSymbol(math, main, rel, "\u2292", "\\sqsupseteq", true);
defineSymbol(math, main, rel, "\u2250", "\\doteq", true);
defineSymbol(math, main, rel, "\u2322", "\\frown", true);
defineSymbol(math, main, rel, "\u220B", "\\ni", true);
defineSymbol(math, main, rel, "\u221D", "\\propto", true);
defineSymbol(math, main, rel, "\u22A2", "\\vdash", true);
defineSymbol(math, main, rel, "\u22A3", "\\dashv", true);
defineSymbol(math, main, rel, "\u220B", "\\owns");
defineSymbol(math, main, punct, ".", "\\ldotp");
defineSymbol(math, main, punct, "\u22C5", "\\cdotp");
defineSymbol(math, main, textord, "#", "\\#");
defineSymbol(text, main, textord, "#", "\\#");
defineSymbol(math, main, textord, "&", "\\&");
defineSymbol(text, main, textord, "&", "\\&");
defineSymbol(math, main, textord, "\u2135", "\\aleph", true);
defineSymbol(math, main, textord, "\u2200", "\\forall", true);
defineSymbol(math, main, textord, "\u210F", "\\hbar", true);
defineSymbol(math, main, textord, "\u2203", "\\exists", true);
defineSymbol(math, main, textord, "\u2207", "\\nabla", true);
defineSymbol(math, main, textord, "\u266D", "\\flat", true);
defineSymbol(math, main, textord, "\u2113", "\\ell", true);
defineSymbol(math, main, textord, "\u266E", "\\natural", true);
defineSymbol(math, main, textord, "\u2663", "\\clubsuit", true);
defineSymbol(math, main, textord, "\u2118", "\\wp", true);
defineSymbol(math, main, textord, "\u266F", "\\sharp", true);
defineSymbol(math, main, textord, "\u2662", "\\diamondsuit", true);
defineSymbol(math, main, textord, "\u211C", "\\Re", true);
defineSymbol(math, main, textord, "\u2661", "\\heartsuit", true);
defineSymbol(math, main, textord, "\u2111", "\\Im", true);
defineSymbol(math, main, textord, "\u2660", "\\spadesuit", true);
defineSymbol(math, main, textord, "\xA7", "\\S", true);
defineSymbol(text, main, textord, "\xA7", "\\S");
defineSymbol(math, main, textord, "\xB6", "\\P", true);
defineSymbol(text, main, textord, "\xB6", "\\P");
defineSymbol(math, main, textord, "\u2020", "\\dag");
defineSymbol(text, main, textord, "\u2020", "\\dag");
defineSymbol(text, main, textord, "\u2020", "\\textdagger");
defineSymbol(math, main, textord, "\u2021", "\\ddag");
defineSymbol(text, main, textord, "\u2021", "\\ddag");
defineSymbol(text, main, textord, "\u2021", "\\textdaggerdbl");
defineSymbol(math, main, close, "\u23B1", "\\rmoustache", true);
defineSymbol(math, main, open, "\u23B0", "\\lmoustache", true);
defineSymbol(math, main, close, "\u27EF", "\\rgroup", true);
defineSymbol(math, main, open, "\u27EE", "\\lgroup", true);
defineSymbol(math, main, bin, "\u2213", "\\mp", true);
defineSymbol(math, main, bin, "\u2296", "\\ominus", true);
defineSymbol(math, main, bin, "\u228E", "\\uplus", true);
defineSymbol(math, main, bin, "\u2293", "\\sqcap", true);
defineSymbol(math, main, bin, "\u2217", "\\ast");
defineSymbol(math, main, bin, "\u2294", "\\sqcup", true);
defineSymbol(math, main, bin, "\u25EF", "\\bigcirc", true);
defineSymbol(math, main, bin, "\u2219", "\\bullet", true);
defineSymbol(math, main, bin, "\u2021", "\\ddagger");
defineSymbol(math, main, bin, "\u2240", "\\wr", true);
defineSymbol(math, main, bin, "\u2A3F", "\\amalg");
defineSymbol(math, main, bin, "&", "\\And");
defineSymbol(math, main, rel, "\u27F5", "\\longleftarrow", true);
defineSymbol(math, main, rel, "\u21D0", "\\Leftarrow", true);
defineSymbol(math, main, rel, "\u27F8", "\\Longleftarrow", true);
defineSymbol(math, main, rel, "\u27F6", "\\longrightarrow", true);
defineSymbol(math, main, rel, "\u21D2", "\\Rightarrow", true);
defineSymbol(math, main, rel, "\u27F9", "\\Longrightarrow", true);
defineSymbol(math, main, rel, "\u2194", "\\leftrightarrow", true);
defineSymbol(math, main, rel, "\u27F7", "\\longleftrightarrow", true);
defineSymbol(math, main, rel, "\u21D4", "\\Leftrightarrow", true);
defineSymbol(math, main, rel, "\u27FA", "\\Longleftrightarrow", true);
defineSymbol(math, main, rel, "\u21A6", "\\mapsto", true);
defineSymbol(math, main, rel, "\u27FC", "\\longmapsto", true);
defineSymbol(math, main, rel, "\u2197", "\\nearrow", true);
defineSymbol(math, main, rel, "\u21A9", "\\hookleftarrow", true);
defineSymbol(math, main, rel, "\u21AA", "\\hookrightarrow", true);
defineSymbol(math, main, rel, "\u2198", "\\searrow", true);
defineSymbol(math, main, rel, "\u21BC", "\\leftharpoonup", true);
defineSymbol(math, main, rel, "\u21C0", "\\rightharpoonup", true);
defineSymbol(math, main, rel, "\u2199", "\\swarrow", true);
defineSymbol(math, main, rel, "\u21BD", "\\leftharpoondown", true);
defineSymbol(math, main, rel, "\u21C1", "\\rightharpoondown", true);
defineSymbol(math, main, rel, "\u2196", "\\nwarrow", true);
defineSymbol(math, main, rel, "\u21CC", "\\rightleftharpoons", true);
defineSymbol(math, ams, rel, "\u226E", "\\nless", true);
defineSymbol(math, ams, rel, "\uE010", "\\@nleqslant");
defineSymbol(math, ams, rel, "\uE011", "\\@nleqq");
defineSymbol(math, ams, rel, "\u2A87", "\\lneq", true);
defineSymbol(math, ams, rel, "\u2268", "\\lneqq", true);
defineSymbol(math, ams, rel, "\uE00C", "\\@lvertneqq");
defineSymbol(math, ams, rel, "\u22E6", "\\lnsim", true);
defineSymbol(math, ams, rel, "\u2A89", "\\lnapprox", true);
defineSymbol(math, ams, rel, "\u2280", "\\nprec", true);
defineSymbol(math, ams, rel, "\u22E0", "\\npreceq", true);
defineSymbol(math, ams, rel, "\u22E8", "\\precnsim", true);
defineSymbol(math, ams, rel, "\u2AB9", "\\precnapprox", true);
defineSymbol(math, ams, rel, "\u2241", "\\nsim", true);
defineSymbol(math, ams, rel, "\uE006", "\\@nshortmid");
defineSymbol(math, ams, rel, "\u2224", "\\nmid", true);
defineSymbol(math, ams, rel, "\u22AC", "\\nvdash", true);
defineSymbol(math, ams, rel, "\u22AD", "\\nvDash", true);
defineSymbol(math, ams, rel, "\u22EA", "\\ntriangleleft");
defineSymbol(math, ams, rel, "\u22EC", "\\ntrianglelefteq", true);
defineSymbol(math, ams, rel, "\u228A", "\\subsetneq", true);
defineSymbol(math, ams, rel, "\uE01A", "\\@varsubsetneq");
defineSymbol(math, ams, rel, "\u2ACB", "\\subsetneqq", true);
defineSymbol(math, ams, rel, "\uE017", "\\@varsubsetneqq");
defineSymbol(math, ams, rel, "\u226F", "\\ngtr", true);
defineSymbol(math, ams, rel, "\uE00F", "\\@ngeqslant");
defineSymbol(math, ams, rel, "\uE00E", "\\@ngeqq");
defineSymbol(math, ams, rel, "\u2A88", "\\gneq", true);
defineSymbol(math, ams, rel, "\u2269", "\\gneqq", true);
defineSymbol(math, ams, rel, "\uE00D", "\\@gvertneqq");
defineSymbol(math, ams, rel, "\u22E7", "\\gnsim", true);
defineSymbol(math, ams, rel, "\u2A8A", "\\gnapprox", true);
defineSymbol(math, ams, rel, "\u2281", "\\nsucc", true);
defineSymbol(math, ams, rel, "\u22E1", "\\nsucceq", true);
defineSymbol(math, ams, rel, "\u22E9", "\\succnsim", true);
defineSymbol(math, ams, rel, "\u2ABA", "\\succnapprox", true);
defineSymbol(math, ams, rel, "\u2246", "\\ncong", true);
defineSymbol(math, ams, rel, "\uE007", "\\@nshortparallel");
defineSymbol(math, ams, rel, "\u2226", "\\nparallel", true);
defineSymbol(math, ams, rel, "\u22AF", "\\nVDash", true);
defineSymbol(math, ams, rel, "\u22EB", "\\ntriangleright");
defineSymbol(math, ams, rel, "\u22ED", "\\ntrianglerighteq", true);
defineSymbol(math, ams, rel, "\uE018", "\\@nsupseteqq");
defineSymbol(math, ams, rel, "\u228B", "\\supsetneq", true);
defineSymbol(math, ams, rel, "\uE01B", "\\@varsupsetneq");
defineSymbol(math, ams, rel, "\u2ACC", "\\supsetneqq", true);
defineSymbol(math, ams, rel, "\uE019", "\\@varsupsetneqq");
defineSymbol(math, ams, rel, "\u22AE", "\\nVdash", true);
defineSymbol(math, ams, rel, "\u2AB5", "\\precneqq", true);
defineSymbol(math, ams, rel, "\u2AB6", "\\succneqq", true);
defineSymbol(math, ams, rel, "\uE016", "\\@nsubseteqq");
defineSymbol(math, ams, bin, "\u22B4", "\\unlhd");
defineSymbol(math, ams, bin, "\u22B5", "\\unrhd");
defineSymbol(math, ams, rel, "\u219A", "\\nleftarrow", true);
defineSymbol(math, ams, rel, "\u219B", "\\nrightarrow", true);
defineSymbol(math, ams, rel, "\u21CD", "\\nLeftarrow", true);
defineSymbol(math, ams, rel, "\u21CF", "\\nRightarrow", true);
defineSymbol(math, ams, rel, "\u21AE", "\\nleftrightarrow", true);
defineSymbol(math, ams, rel, "\u21CE", "\\nLeftrightarrow", true);
defineSymbol(math, ams, rel, "\u25B3", "\\vartriangle");
defineSymbol(math, ams, textord, "\u210F", "\\hslash");
defineSymbol(math, ams, textord, "\u25BD", "\\triangledown");
defineSymbol(math, ams, textord, "\u25CA", "\\lozenge");
defineSymbol(math, ams, textord, "\u24C8", "\\circledS");
defineSymbol(math, ams, textord, "\xAE", "\\circledR");
defineSymbol(text, ams, textord, "\xAE", "\\circledR");
defineSymbol(math, ams, textord, "\u2221", "\\measuredangle", true);
defineSymbol(math, ams, textord, "\u2204", "\\nexists");
defineSymbol(math, ams, textord, "\u2127", "\\mho");
defineSymbol(math, ams, textord, "\u2132", "\\Finv", true);
defineSymbol(math, ams, textord, "\u2141", "\\Game", true);
defineSymbol(math, ams, textord, "\u2035", "\\backprime");
defineSymbol(math, ams, textord, "\u25B2", "\\blacktriangle");
defineSymbol(math, ams, textord, "\u25BC", "\\blacktriangledown");
defineSymbol(math, ams, textord, "\u25A0", "\\blacksquare");
defineSymbol(math, ams, textord, "\u29EB", "\\blacklozenge");
defineSymbol(math, ams, textord, "\u2605", "\\bigstar");
defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle", true);
defineSymbol(math, ams, textord, "\u2201", "\\complement", true);
defineSymbol(math, ams, textord, "\xF0", "\\eth", true);
defineSymbol(text, main, textord, "\xF0", "\xF0");
defineSymbol(math, ams, textord, "\u2571", "\\diagup");
defineSymbol(math, ams, textord, "\u2572", "\\diagdown");
defineSymbol(math, ams, textord, "\u25A1", "\\square");
defineSymbol(math, ams, textord, "\u25A1", "\\Box");
defineSymbol(math, ams, textord, "\u25CA", "\\Diamond");
defineSymbol(math, ams, textord, "\xA5", "\\yen", true);
defineSymbol(text, ams, textord, "\xA5", "\\yen", true);
defineSymbol(math, ams, textord, "\u2713", "\\checkmark", true);
defineSymbol(text, ams, textord, "\u2713", "\\checkmark");
defineSymbol(math, ams, textord, "\u2136", "\\beth", true);
defineSymbol(math, ams, textord, "\u2138", "\\daleth", true);
defineSymbol(math, ams, textord, "\u2137", "\\gimel", true);
defineSymbol(math, ams, textord, "\u03DD", "\\digamma", true);
defineSymbol(math, ams, textord, "\u03F0", "\\varkappa");
defineSymbol(math, ams, open, "\u250C", "\\@ulcorner", true);
defineSymbol(math, ams, close, "\u2510", "\\@urcorner", true);
defineSymbol(math, ams, open, "\u2514", "\\@llcorner", true);
defineSymbol(math, ams, close, "\u2518", "\\@lrcorner", true);
defineSymbol(math, ams, rel, "\u2266", "\\leqq", true);
defineSymbol(math, ams, rel, "\u2A7D", "\\leqslant", true);
defineSymbol(math, ams, rel, "\u2A95", "\\eqslantless", true);
defineSymbol(math, ams, rel, "\u2272", "\\lesssim", true);
defineSymbol(math, ams, rel, "\u2A85", "\\lessapprox", true);
defineSymbol(math, ams, rel, "\u224A", "\\approxeq", true);
defineSymbol(math, ams, bin, "\u22D6", "\\lessdot");
defineSymbol(math, ams, rel, "\u22D8", "\\lll", true);
defineSymbol(math, ams, rel, "\u2276", "\\lessgtr", true);
defineSymbol(math, ams, rel, "\u22DA", "\\lesseqgtr", true);
defineSymbol(math, ams, rel, "\u2A8B", "\\lesseqqgtr", true);
defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");
defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq", true);
defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq", true);
defineSymbol(math, ams, rel, "\u223D", "\\backsim", true);
defineSymbol(math, ams, rel, "\u22CD", "\\backsimeq", true);
defineSymbol(math, ams, rel, "\u2AC5", "\\subseteqq", true);
defineSymbol(math, ams, rel, "\u22D0", "\\Subset", true);
defineSymbol(math, ams, rel, "\u228F", "\\sqsubset", true);
defineSymbol(math, ams, rel, "\u227C", "\\preccurlyeq", true);
defineSymbol(math, ams, rel, "\u22DE", "\\curlyeqprec", true);
defineSymbol(math, ams, rel, "\u227E", "\\precsim", true);
defineSymbol(math, ams, rel, "\u2AB7", "\\precapprox", true);
defineSymbol(math, ams, rel, "\u22B2", "\\vartriangleleft");
defineSymbol(math, ams, rel, "\u22B4", "\\trianglelefteq");
defineSymbol(math, ams, rel, "\u22A8", "\\vDash", true);
defineSymbol(math, ams, rel, "\u22AA", "\\Vvdash", true);
defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");
defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");
defineSymbol(math, ams, rel, "\u224F", "\\bumpeq", true);
defineSymbol(math, ams, rel, "\u224E", "\\Bumpeq", true);
defineSymbol(math, ams, rel, "\u2267", "\\geqq", true);
defineSymbol(math, ams, rel, "\u2A7E", "\\geqslant", true);
defineSymbol(math, ams, rel, "\u2A96", "\\eqslantgtr", true);
defineSymbol(math, ams, rel, "\u2273", "\\gtrsim", true);
defineSymbol(math, ams, rel, "\u2A86", "\\gtrapprox", true);
defineSymbol(math, ams, bin, "\u22D7", "\\gtrdot");
defineSymbol(math, ams, rel, "\u22D9", "\\ggg", true);
defineSymbol(math, ams, rel, "\u2277", "\\gtrless", true);
defineSymbol(math, ams, rel, "\u22DB", "\\gtreqless", true);
defineSymbol(math, ams, rel, "\u2A8C", "\\gtreqqless", true);
defineSymbol(math, ams, rel, "\u2256", "\\eqcirc", true);
defineSymbol(math, ams, rel, "\u2257", "\\circeq", true);
defineSymbol(math, ams, rel, "\u225C", "\\triangleq", true);
defineSymbol(math, ams, rel, "\u223C", "\\thicksim");
defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");
defineSymbol(math, ams, rel, "\u2AC6", "\\supseteqq", true);
defineSymbol(math, ams, rel, "\u22D1", "\\Supset", true);
defineSymbol(math, ams, rel, "\u2290", "\\sqsupset", true);
defineSymbol(math, ams, rel, "\u227D", "\\succcurlyeq", true);
defineSymbol(math, ams, rel, "\u22DF", "\\curlyeqsucc", true);
defineSymbol(math, ams, rel, "\u227F", "\\succsim", true);
defineSymbol(math, ams, rel, "\u2AB8", "\\succapprox", true);
defineSymbol(math, ams, rel, "\u22B3", "\\vartriangleright");
defineSymbol(math, ams, rel, "\u22B5", "\\trianglerighteq");
defineSymbol(math, ams, rel, "\u22A9", "\\Vdash", true);
defineSymbol(math, ams, rel, "\u2223", "\\shortmid");
defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");
defineSymbol(math, ams, rel, "\u226C", "\\between", true);
defineSymbol(math, ams, rel, "\u22D4", "\\pitchfork", true);
defineSymbol(math, ams, rel, "\u221D", "\\varpropto");
defineSymbol(math, ams, rel, "\u25C0", "\\blacktriangleleft");
defineSymbol(math, ams, rel, "\u2234", "\\therefore", true);
defineSymbol(math, ams, rel, "\u220D", "\\backepsilon");
defineSymbol(math, ams, rel, "\u25B6", "\\blacktriangleright");
defineSymbol(math, ams, rel, "\u2235", "\\because", true);
defineSymbol(math, ams, rel, "\u22D8", "\\llless");
defineSymbol(math, ams, rel, "\u22D9", "\\gggtr");
defineSymbol(math, ams, bin, "\u22B2", "\\lhd");
defineSymbol(math, ams, bin, "\u22B3", "\\rhd");
defineSymbol(math, ams, rel, "\u2242", "\\eqsim", true);
defineSymbol(math, main, rel, "\u22C8", "\\Join");
defineSymbol(math, ams, rel, "\u2251", "\\Doteq", true);
defineSymbol(math, ams, bin, "\u2214", "\\dotplus", true);
defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");
defineSymbol(math, ams, bin, "\u22D2", "\\Cap", true);
defineSymbol(math, ams, bin, "\u22D3", "\\Cup", true);
defineSymbol(math, ams, bin, "\u2A5E", "\\doublebarwedge", true);
defineSymbol(math, ams, bin, "\u229F", "\\boxminus", true);
defineSymbol(math, ams, bin, "\u229E", "\\boxplus", true);
defineSymbol(math, ams, bin, "\u22C7", "\\divideontimes", true);
defineSymbol(math, ams, bin, "\u22C9", "\\ltimes", true);
defineSymbol(math, ams, bin, "\u22CA", "\\rtimes", true);
defineSymbol(math, ams, bin, "\u22CB", "\\leftthreetimes", true);
defineSymbol(math, ams, bin, "\u22CC", "\\rightthreetimes", true);
defineSymbol(math, ams, bin, "\u22CF", "\\curlywedge", true);
defineSymbol(math, ams, bin, "\u22CE", "\\curlyvee", true);
defineSymbol(math, ams, bin, "\u229D", "\\circleddash", true);
defineSymbol(math, ams, bin, "\u229B", "\\circledast", true);
defineSymbol(math, ams, bin, "\u22C5", "\\centerdot");
defineSymbol(math, ams, bin, "\u22BA", "\\intercal", true);
defineSymbol(math, ams, bin, "\u22D2", "\\doublecap");
defineSymbol(math, ams, bin, "\u22D3", "\\doublecup");
defineSymbol(math, ams, bin, "\u22A0", "\\boxtimes", true);
defineSymbol(math, ams, rel, "\u21E2", "\\dashrightarrow", true);
defineSymbol(math, ams, rel, "\u21E0", "\\dashleftarrow", true);
defineSymbol(math, ams, rel, "\u21C7", "\\leftleftarrows", true);
defineSymbol(math, ams, rel, "\u21C6", "\\leftrightarrows", true);
defineSymbol(math, ams, rel, "\u21DA", "\\Lleftarrow", true);
defineSymbol(math, ams, rel, "\u219E", "\\twoheadleftarrow", true);
defineSymbol(math, ams, rel, "\u21A2", "\\leftarrowtail", true);
defineSymbol(math, ams, rel, "\u21AB", "\\looparrowleft", true);
defineSymbol(math, ams, rel, "\u21CB", "\\leftrightharpoons", true);
defineSymbol(math, ams, rel, "\u21B6", "\\curvearrowleft", true);
defineSymbol(math, ams, rel, "\u21BA", "\\circlearrowleft", true);
defineSymbol(math, ams, rel, "\u21B0", "\\Lsh", true);
defineSymbol(math, ams, rel, "\u21C8", "\\upuparrows", true);
defineSymbol(math, ams, rel, "\u21BF", "\\upharpoonleft", true);
defineSymbol(math, ams, rel, "\u21C3", "\\downharpoonleft", true);
defineSymbol(math, main, rel, "\u22B6", "\\origof", true);
defineSymbol(math, main, rel, "\u22B7", "\\imageof", true);
defineSymbol(math, ams, rel, "\u22B8", "\\multimap", true);
defineSymbol(math, ams, rel, "\u21AD", "\\leftrightsquigarrow", true);
defineSymbol(math, ams, rel, "\u21C9", "\\rightrightarrows", true);
defineSymbol(math, ams, rel, "\u21C4", "\\rightleftarrows", true);
defineSymbol(math, ams, rel, "\u21A0", "\\twoheadrightarrow", true);
defineSymbol(math, ams, rel, "\u21A3", "\\rightarrowtail", true);
defineSymbol(math, ams, rel, "\u21AC", "\\looparrowright", true);
defineSymbol(math, ams, rel, "\u21B7", "\\curvearrowright", true);
defineSymbol(math, ams, rel, "\u21BB", "\\circlearrowright", true);
defineSymbol(math, ams, rel, "\u21B1", "\\Rsh", true);
defineSymbol(math, ams, rel, "\u21CA", "\\downdownarrows", true);
defineSymbol(math, ams, rel, "\u21BE", "\\upharpoonright", true);
defineSymbol(math, ams, rel, "\u21C2", "\\downharpoonright", true);
defineSymbol(math, ams, rel, "\u21DD", "\\rightsquigarrow", true);
defineSymbol(math, ams, rel, "\u21DD", "\\leadsto");
defineSymbol(math, ams, rel, "\u21DB", "\\Rrightarrow", true);
defineSymbol(math, ams, rel, "\u21BE", "\\restriction");
defineSymbol(math, main, textord, "\u2018", "`");
defineSymbol(math, main, textord, "$", "\\$");
defineSymbol(text, main, textord, "$", "\\$");
defineSymbol(text, main, textord, "$", "\\textdollar");
defineSymbol(math, main, textord, "%", "\\%");
defineSymbol(text, main, textord, "%", "\\%");
defineSymbol(math, main, textord, "_", "\\_");
defineSymbol(text, main, textord, "_", "\\_");
defineSymbol(text, main, textord, "_", "\\textunderscore");
defineSymbol(math, main, textord, "\u2220", "\\angle", true);
defineSymbol(math, main, textord, "\u221E", "\\infty", true);
defineSymbol(math, main, textord, "\u2032", "\\prime");
defineSymbol(math, main, textord, "\u25B3", "\\triangle");
defineSymbol(math, main, textord, "\u0393", "\\Gamma", true);
defineSymbol(math, main, textord, "\u0394", "\\Delta", true);
defineSymbol(math, main, textord, "\u0398", "\\Theta", true);
defineSymbol(math, main, textord, "\u039B", "\\Lambda", true);
defineSymbol(math, main, textord, "\u039E", "\\Xi", true);
defineSymbol(math, main, textord, "\u03A0", "\\Pi", true);
defineSymbol(math, main, textord, "\u03A3", "\\Sigma", true);
defineSymbol(math, main, textord, "\u03A5", "\\Upsilon", true);
defineSymbol(math, main, textord, "\u03A6", "\\Phi", true);
defineSymbol(math, main, textord, "\u03A8", "\\Psi", true);
defineSymbol(math, main, textord, "\u03A9", "\\Omega", true);
defineSymbol(math, main, textord, "A", "\u0391");
defineSymbol(math, main, textord, "B", "\u0392");
defineSymbol(math, main, textord, "E", "\u0395");
defineSymbol(math, main, textord, "Z", "\u0396");
defineSymbol(math, main, textord, "H", "\u0397");
defineSymbol(math, main, textord, "I", "\u0399");
defineSymbol(math, main, textord, "K", "\u039A");
defineSymbol(math, main, textord, "M", "\u039C");
defineSymbol(math, main, textord, "N", "\u039D");
defineSymbol(math, main, textord, "O", "\u039F");
defineSymbol(math, main, textord, "P", "\u03A1");
defineSymbol(math, main, textord, "T", "\u03A4");
defineSymbol(math, main, textord, "X", "\u03A7");
defineSymbol(math, main, textord, "\xAC", "\\neg", true);
defineSymbol(math, main, textord, "\xAC", "\\lnot");
defineSymbol(math, main, textord, "\u22A4", "\\top");
defineSymbol(math, main, textord, "\u22A5", "\\bot");
defineSymbol(math, main, textord, "\u2205", "\\emptyset");
defineSymbol(math, ams, textord, "\u2205", "\\varnothing");
defineSymbol(math, main, mathord, "\u03B1", "\\alpha", true);
defineSymbol(math, main, mathord, "\u03B2", "\\beta", true);
defineSymbol(math, main, mathord, "\u03B3", "\\gamma", true);
defineSymbol(math, main, mathord, "\u03B4", "\\delta", true);
defineSymbol(math, main, mathord, "\u03F5", "\\epsilon", true);
defineSymbol(math, main, mathord, "\u03B6", "\\zeta", true);
defineSymbol(math, main, mathord, "\u03B7", "\\eta", true);
defineSymbol(math, main, mathord, "\u03B8", "\\theta", true);
defineSymbol(math, main, mathord, "\u03B9", "\\iota", true);
defineSymbol(math, main, mathord, "\u03BA", "\\kappa", true);
defineSymbol(math, main, mathord, "\u03BB", "\\lambda", true);
defineSymbol(math, main, mathord, "\u03BC", "\\mu", true);
defineSymbol(math, main, mathord, "\u03BD", "\\nu", true);
defineSymbol(math, main, mathord, "\u03BE", "\\xi", true);
defineSymbol(math, main, mathord, "\u03BF", "\\omicron", true);
defineSymbol(math, main, mathord, "\u03C0", "\\pi", true);
defineSymbol(math, main, mathord, "\u03C1", "\\rho", true);
defineSymbol(math, main, mathord, "\u03C3", "\\sigma", true);
defineSymbol(math, main, mathord, "\u03C4", "\\tau", true);
defineSymbol(math, main, mathord, "\u03C5", "\\upsilon", true);
defineSymbol(math, main, mathord, "\u03D5", "\\phi", true);
defineSymbol(math, main, mathord, "\u03C7", "\\chi", true);
defineSymbol(math, main, mathord, "\u03C8", "\\psi", true);
defineSymbol(math, main, mathord, "\u03C9", "\\omega", true);
defineSymbol(math, main, mathord, "\u03B5", "\\varepsilon", true);
defineSymbol(math, main, mathord, "\u03D1", "\\vartheta", true);
defineSymbol(math, main, mathord, "\u03D6", "\\varpi", true);
defineSymbol(math, main, mathord, "\u03F1", "\\varrho", true);
defineSymbol(math, main, mathord, "\u03C2", "\\varsigma", true);
defineSymbol(math, main, mathord, "\u03C6", "\\varphi", true);
defineSymbol(math, main, bin, "\u2217", "*", true);
defineSymbol(math, main, bin, "+", "+");
defineSymbol(math, main, bin, "\u2212", "-", true);
defineSymbol(math, main, bin, "\u22C5", "\\cdot", true);
defineSymbol(math, main, bin, "\u2218", "\\circ", true);
defineSymbol(math, main, bin, "\xF7", "\\div", true);
defineSymbol(math, main, bin, "\xB1", "\\pm", true);
defineSymbol(math, main, bin, "\xD7", "\\times", true);
defineSymbol(math, main, bin, "\u2229", "\\cap", true);
defineSymbol(math, main, bin, "\u222A", "\\cup", true);
defineSymbol(math, main, bin, "\u2216", "\\setminus", true);
defineSymbol(math, main, bin, "\u2227", "\\land");
defineSymbol(math, main, bin, "\u2228", "\\lor");
defineSymbol(math, main, bin, "\u2227", "\\wedge", true);
defineSymbol(math, main, bin, "\u2228", "\\vee", true);
defineSymbol(math, main, textord, "\u221A", "\\surd");
defineSymbol(math, main, open, "\u27E8", "\\langle", true);
defineSymbol(math, main, open, "\u2223", "\\lvert");
defineSymbol(math, main, open, "\u2225", "\\lVert");
defineSymbol(math, main, close, "?", "?");
defineSymbol(math, main, close, "!", "!");
defineSymbol(math, main, close, "\u27E9", "\\rangle", true);
defineSymbol(math, main, close, "\u2223", "\\rvert");
defineSymbol(math, main, close, "\u2225", "\\rVert");
defineSymbol(math, main, rel, "=", "=");
defineSymbol(math, main, rel, ":", ":");
defineSymbol(math, main, rel, "\u2248", "\\approx", true);
defineSymbol(math, main, rel, "\u2245", "\\cong", true);
defineSymbol(math, main, rel, "\u2265", "\\ge");
defineSymbol(math, main, rel, "\u2265", "\\geq", true);
defineSymbol(math, main, rel, "\u2190", "\\gets");
defineSymbol(math, main, rel, ">", "\\gt", true);
defineSymbol(math, main, rel, "\u2208", "\\in", true);
defineSymbol(math, main, rel, "\uE020", "\\@not");
defineSymbol(math, main, rel, "\u2282", "\\subset", true);
defineSymbol(math, main, rel, "\u2283", "\\supset", true);
defineSymbol(math, main, rel, "\u2286", "\\subseteq", true);
defineSymbol(math, main, rel, "\u2287", "\\supseteq", true);
defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq", true);
defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq", true);
defineSymbol(math, main, rel, "\u22A8", "\\models");
defineSymbol(math, main, rel, "\u2190", "\\leftarrow", true);
defineSymbol(math, main, rel, "\u2264", "\\le");
defineSymbol(math, main, rel, "\u2264", "\\leq", true);
defineSymbol(math, main, rel, "<", "\\lt", true);
defineSymbol(math, main, rel, "\u2192", "\\rightarrow", true);
defineSymbol(math, main, rel, "\u2192", "\\to");
defineSymbol(math, ams, rel, "\u2271", "\\ngeq", true);
defineSymbol(math, ams, rel, "\u2270", "\\nleq", true);
defineSymbol(math, main, spacing, "\xA0", "\\ ");
defineSymbol(math, main, spacing, "\xA0", "\\space");
defineSymbol(math, main, spacing, "\xA0", "\\nobreakspace");
defineSymbol(text, main, spacing, "\xA0", "\\ ");
defineSymbol(text, main, spacing, "\xA0", " ");
defineSymbol(text, main, spacing, "\xA0", "\\space");
defineSymbol(text, main, spacing, "\xA0", "\\nobreakspace");
defineSymbol(math, main, spacing, null, "\\nobreak");
defineSymbol(math, main, spacing, null, "\\allowbreak");
defineSymbol(math, main, punct, ",", ",");
defineSymbol(math, main, punct, ";", ";");
defineSymbol(math, ams, bin, "\u22BC", "\\barwedge", true);
defineSymbol(math, ams, bin, "\u22BB", "\\veebar", true);
defineSymbol(math, main, bin, "\u2299", "\\odot", true);
defineSymbol(math, main, bin, "\u2295", "\\oplus", true);
defineSymbol(math, main, bin, "\u2297", "\\otimes", true);
defineSymbol(math, main, textord, "\u2202", "\\partial", true);
defineSymbol(math, main, bin, "\u2298", "\\oslash", true);
defineSymbol(math, ams, bin, "\u229A", "\\circledcirc", true);
defineSymbol(math, ams, bin, "\u22A1", "\\boxdot", true);
defineSymbol(math, main, bin, "\u25B3", "\\bigtriangleup");
defineSymbol(math, main, bin, "\u25BD", "\\bigtriangledown");
defineSymbol(math, main, bin, "\u2020", "\\dagger");
defineSymbol(math, main, bin, "\u22C4", "\\diamond");
defineSymbol(math, main, bin, "\u22C6", "\\star");
defineSymbol(math, main, bin, "\u25C3", "\\triangleleft");
defineSymbol(math, main, bin, "\u25B9", "\\triangleright");
defineSymbol(math, main, open, "{", "\\{");
defineSymbol(text, main, textord, "{", "\\{");
defineSymbol(text, main, textord, "{", "\\textbraceleft");
defineSymbol(math, main, close, "}", "\\}");
defineSymbol(text, main, textord, "}", "\\}");
defineSymbol(text, main, textord, "}", "\\textbraceright");
defineSymbol(math, main, open, "{", "\\lbrace");
defineSymbol(math, main, close, "}", "\\rbrace");
defineSymbol(math, main, open, "[", "\\lbrack", true);
defineSymbol(text, main, textord, "[", "\\lbrack", true);
defineSymbol(math, main, close, "]", "\\rbrack", true);
defineSymbol(text, main, textord, "]", "\\rbrack", true);
defineSymbol(math, main, open, "(", "\\lparen", true);
defineSymbol(math, main, close, ")", "\\rparen", true);
defineSymbol(text, main, textord, "<", "\\textless", true);
defineSymbol(text, main, textord, ">", "\\textgreater", true);
defineSymbol(math, main, open, "\u230A", "\\lfloor", true);
defineSymbol(math, main, close, "\u230B", "\\rfloor", true);
defineSymbol(math, main, open, "\u2308", "\\lceil", true);
defineSymbol(math, main, close, "\u2309", "\\rceil", true);
defineSymbol(math, main, textord, "\\", "\\backslash");
defineSymbol(math, main, textord, "\u2223", "|");
defineSymbol(math, main, textord, "\u2223", "\\vert");
defineSymbol(text, main, textord, "|", "\\textbar", true);
defineSymbol(math, main, textord, "\u2225", "\\|");
defineSymbol(math, main, textord, "\u2225", "\\Vert");
defineSymbol(text, main, textord, "\u2225", "\\textbardbl");
defineSymbol(text, main, textord, "~", "\\textasciitilde");
defineSymbol(text, main, textord, "\\", "\\textbackslash");
defineSymbol(text, main, textord, "^", "\\textasciicircum");
defineSymbol(math, main, rel, "\u2191", "\\uparrow", true);
defineSymbol(math, main, rel, "\u21D1", "\\Uparrow", true);
defineSymbol(math, main, rel, "\u2193", "\\downarrow", true);
defineSymbol(math, main, rel, "\u21D3", "\\Downarrow", true);
defineSymbol(math, main, rel, "\u2195", "\\updownarrow", true);
defineSymbol(math, main, rel, "\u21D5", "\\Updownarrow", true);
defineSymbol(math, main, op, "\u2210", "\\coprod");
defineSymbol(math, main, op, "\u22C1", "\\bigvee");
defineSymbol(math, main, op, "\u22C0", "\\bigwedge");
defineSymbol(math, main, op, "\u2A04", "\\biguplus");
defineSymbol(math, main, op, "\u22C2", "\\bigcap");
defineSymbol(math, main, op, "\u22C3", "\\bigcup");
defineSymbol(math, main, op, "\u222B", "\\int");
defineSymbol(math, main, op, "\u222B", "\\intop");
defineSymbol(math, main, op, "\u222C", "\\iint");
defineSymbol(math, main, op, "\u222D", "\\iiint");
defineSymbol(math, main, op, "\u220F", "\\prod");
defineSymbol(math, main, op, "\u2211", "\\sum");
defineSymbol(math, main, op, "\u2A02", "\\bigotimes");
defineSymbol(math, main, op, "\u2A01", "\\bigoplus");
defineSymbol(math, main, op, "\u2A00", "\\bigodot");
defineSymbol(math, main, op, "\u222E", "\\oint");
defineSymbol(math, main, op, "\u222F", "\\oiint");
defineSymbol(math, main, op, "\u2230", "\\oiiint");
defineSymbol(math, main, op, "\u2A06", "\\bigsqcup");
defineSymbol(math, main, op, "\u222B", "\\smallint");
defineSymbol(text, main, inner, "\u2026", "\\textellipsis");
defineSymbol(math, main, inner, "\u2026", "\\mathellipsis");
defineSymbol(text, main, inner, "\u2026", "\\ldots", true);
defineSymbol(math, main, inner, "\u2026", "\\ldots", true);
defineSymbol(math, main, inner, "\u22EF", "\\@cdots", true);
defineSymbol(math, main, inner, "\u22F1", "\\ddots", true);
defineSymbol(math, main, textord, "\u22EE", "\\varvdots");
defineSymbol(math, main, accent, "\u02CA", "\\acute");
defineSymbol(math, main, accent, "\u02CB", "\\grave");
defineSymbol(math, main, accent, "\xA8", "\\ddot");
defineSymbol(math, main, accent, "~", "\\tilde");
defineSymbol(math, main, accent, "\u02C9", "\\bar");
defineSymbol(math, main, accent, "\u02D8", "\\breve");
defineSymbol(math, main, accent, "\u02C7", "\\check");
defineSymbol(math, main, accent, "^", "\\hat");
defineSymbol(math, main, accent, "\u20D7", "\\vec");
defineSymbol(math, main, accent, "\u02D9", "\\dot");
defineSymbol(math, main, accent, "\u02DA", "\\mathring");
defineSymbol(math, main, mathord, "\uE131", "\\@imath");
defineSymbol(math, main, mathord, "\uE237", "\\@jmath");
defineSymbol(math, main, textord, "\u0131", "\u0131");
defineSymbol(math, main, textord, "\u0237", "\u0237");
defineSymbol(text, main, textord, "\u0131", "\\i", true);
defineSymbol(text, main, textord, "\u0237", "\\j", true);
defineSymbol(text, main, textord, "\xDF", "\\ss", true);
defineSymbol(text, main, textord, "\xE6", "\\ae", true);
defineSymbol(text, main, textord, "\u0153", "\\oe", true);
defineSymbol(text, main, textord, "\xF8", "\\o", true);
defineSymbol(text, main, textord, "\xC6", "\\AE", true);
defineSymbol(text, main, textord, "\u0152", "\\OE", true);
defineSymbol(text, main, textord, "\xD8", "\\O", true);
defineSymbol(text, main, accent, "\u02CA", "\\'");
defineSymbol(text, main, accent, "\u02CB", "\\`");
defineSymbol(text, main, accent, "\u02C6", "\\^");
defineSymbol(text, main, accent, "\u02DC", "\\~");
defineSymbol(text, main, accent, "\u02C9", "\\=");
defineSymbol(text, main, accent, "\u02D8", "\\u");
defineSymbol(text, main, accent, "\u02D9", "\\.");
defineSymbol(text, main, accent, "\xB8", "\\c");
defineSymbol(text, main, accent, "\u02DA", "\\r");
defineSymbol(text, main, accent, "\u02C7", "\\v");
defineSymbol(text, main, accent, "\xA8", '\\"');
defineSymbol(text, main, accent, "\u02DD", "\\H");
defineSymbol(text, main, accent, "\u25EF", "\\textcircled");
var ligatures = {
  "--": true,
  "---": true,
  "``": true,
  "''": true
};
defineSymbol(text, main, textord, "\u2013", "--", true);
defineSymbol(text, main, textord, "\u2013", "\\textendash");
defineSymbol(text, main, textord, "\u2014", "---", true);
defineSymbol(text, main, textord, "\u2014", "\\textemdash");
defineSymbol(text, main, textord, "\u2018", "`", true);
defineSymbol(text, main, textord, "\u2018", "\\textquoteleft");
defineSymbol(text, main, textord, "\u2019", "'", true);
defineSymbol(text, main, textord, "\u2019", "\\textquoteright");
defineSymbol(text, main, textord, "\u201C", "``", true);
defineSymbol(text, main, textord, "\u201C", "\\textquotedblleft");
defineSymbol(text, main, textord, "\u201D", "''", true);
defineSymbol(text, main, textord, "\u201D", "\\textquotedblright");
defineSymbol(math, main, textord, "\xB0", "\\degree", true);
defineSymbol(text, main, textord, "\xB0", "\\degree");
defineSymbol(text, main, textord, "\xB0", "\\textdegree", true);
defineSymbol(math, main, textord, "\xA3", "\\pounds");
defineSymbol(math, main, textord, "\xA3", "\\mathsterling", true);
defineSymbol(text, main, textord, "\xA3", "\\pounds");
defineSymbol(text, main, textord, "\xA3", "\\textsterling", true);
defineSymbol(math, ams, textord, "\u2720", "\\maltese");
defineSymbol(text, ams, textord, "\u2720", "\\maltese");
var mathTextSymbols = '0123456789/@."';
for (i = 0; i < mathTextSymbols.length; i++) {
  ch = mathTextSymbols.charAt(i);
  defineSymbol(math, main, textord, ch, ch);
}
var textSymbols = '0123456789!@*()-=+";:?/.,';
for (_i = 0; _i < textSymbols.length; _i++) {
  _ch = textSymbols.charAt(_i);
  defineSymbol(text, main, textord, _ch, _ch);
}
var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
for (_i2 = 0; _i2 < letters.length; _i2++) {
  _ch2 = letters.charAt(_i2);
  defineSymbol(math, main, mathord, _ch2, _ch2);
  defineSymbol(text, main, textord, _ch2, _ch2);
}
defineSymbol(math, ams, textord, "C", "\u2102");
defineSymbol(text, ams, textord, "C", "\u2102");
defineSymbol(math, ams, textord, "H", "\u210D");
defineSymbol(text, ams, textord, "H", "\u210D");
defineSymbol(math, ams, textord, "N", "\u2115");
defineSymbol(text, ams, textord, "N", "\u2115");
defineSymbol(math, ams, textord, "P", "\u2119");
defineSymbol(text, ams, textord, "P", "\u2119");
defineSymbol(math, ams, textord, "Q", "\u211A");
defineSymbol(text, ams, textord, "Q", "\u211A");
defineSymbol(math, ams, textord, "R", "\u211D");
defineSymbol(text, ams, textord, "R", "\u211D");
defineSymbol(math, ams, textord, "Z", "\u2124");
defineSymbol(text, ams, textord, "Z", "\u2124");
defineSymbol(math, main, mathord, "h", "\u210E");
defineSymbol(text, main, mathord, "h", "\u210E");
var wideChar = "";
for (_i3 = 0; _i3 < letters.length; _i3++) {
  _ch3 = letters.charAt(_i3);
  wideChar = String.fromCharCode(55349, 56320 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56372 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56424 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56580 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56684 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56736 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56788 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56840 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56944 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text, main, textord, _ch3, wideChar);
  if (_i3 < 26) {
    wideChar = String.fromCharCode(55349, 56632 + _i3);
    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text, main, textord, _ch3, wideChar);
    wideChar = String.fromCharCode(55349, 56476 + _i3);
    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text, main, textord, _ch3, wideChar);
  }
}
wideChar = String.fromCharCode(55349, 56668);
defineSymbol(math, main, mathord, "k", wideChar);
defineSymbol(text, main, textord, "k", wideChar);
for (_i4 = 0; _i4 < 10; _i4++) {
  _ch4 = _i4.toString();
  wideChar = String.fromCharCode(55349, 57294 + _i4);
  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(text, main, textord, _ch4, wideChar);
  wideChar = String.fromCharCode(55349, 57314 + _i4);
  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(text, main, textord, _ch4, wideChar);
  wideChar = String.fromCharCode(55349, 57324 + _i4);
  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(text, main, textord, _ch4, wideChar);
  wideChar = String.fromCharCode(55349, 57334 + _i4);
  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(text, main, textord, _ch4, wideChar);
}
var extraLatin = "\xD0\xDE\xFE";
for (_i5 = 0; _i5 < extraLatin.length; _i5++) {
  _ch5 = extraLatin.charAt(_i5);
  defineSymbol(math, main, mathord, _ch5, _ch5);
  defineSymbol(text, main, textord, _ch5, _ch5);
}
var wideLatinLetterData = [["mathbf", "textbf", "Main-Bold"], ["mathbf", "textbf", "Main-Bold"], ["mathnormal", "textit", "Math-Italic"], ["mathnormal", "textit", "Math-Italic"], ["boldsymbol", "boldsymbol", "Main-BoldItalic"], ["boldsymbol", "boldsymbol", "Main-BoldItalic"], ["mathscr", "textscr", "Script-Regular"], ["", "", ""], ["", "", ""], ["", "", ""], ["mathfrak", "textfrak", "Fraktur-Regular"], ["mathfrak", "textfrak", "Fraktur-Regular"], ["mathbb", "textbb", "AMS-Regular"], ["mathbb", "textbb", "AMS-Regular"], ["mathboldfrak", "textboldfrak", "Fraktur-Regular"], ["mathboldfrak", "textboldfrak", "Fraktur-Regular"], ["mathsf", "textsf", "SansSerif-Regular"], ["mathsf", "textsf", "SansSerif-Regular"], ["mathboldsf", "textboldsf", "SansSerif-Bold"], ["mathboldsf", "textboldsf", "SansSerif-Bold"], ["mathitsf", "textitsf", "SansSerif-Italic"], ["mathitsf", "textitsf", "SansSerif-Italic"], ["", "", ""], ["", "", ""], ["mathtt", "texttt", "Typewriter-Regular"], ["mathtt", "texttt", "Typewriter-Regular"]];
var wideNumeralData = [["mathbf", "textbf", "Main-Bold"], ["", "", ""], ["mathsf", "textsf", "SansSerif-Regular"], ["mathboldsf", "textboldsf", "SansSerif-Bold"], ["mathtt", "texttt", "Typewriter-Regular"]];
var wideCharacterFont = function wideCharacterFont2(wideChar2, mode) {
  var H = wideChar2.charCodeAt(0);
  var L = wideChar2.charCodeAt(1);
  var codePoint = (H - 55296) * 1024 + (L - 56320) + 65536;
  var j = mode === "math" ? 0 : 1;
  if (119808 <= codePoint && codePoint < 120484) {
    var i = Math.floor((codePoint - 119808) / 26);
    return [wideLatinLetterData[i][2], wideLatinLetterData[i][j]];
  } else if (120782 <= codePoint && codePoint <= 120831) {
    var _i = Math.floor((codePoint - 120782) / 10);
    return [wideNumeralData[_i][2], wideNumeralData[_i][j]];
  } else if (codePoint === 120485 || codePoint === 120486) {
    return [wideLatinLetterData[0][2], wideLatinLetterData[0][j]];
  } else if (120486 < codePoint && codePoint < 120782) {
    return ["", ""];
  } else {
    throw new ParseError("Unsupported character: " + wideChar2);
  }
};
var lookupSymbol = function lookupSymbol2(value, fontName, mode) {
  if (symbols[mode][value] && symbols[mode][value].replace) {
    value = symbols[mode][value].replace;
  }
  return {
    value,
    metrics: getCharacterMetrics(value, fontName, mode)
  };
};
var makeSymbol = function makeSymbol2(value, fontName, mode, options, classes) {
  var lookup = lookupSymbol(value, fontName, mode);
  var metrics = lookup.metrics;
  value = lookup.value;
  var symbolNode;
  if (metrics) {
    var italic = metrics.italic;
    if (mode === "text" || options && options.font === "mathit") {
      italic = 0;
    }
    symbolNode = new SymbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);
  } else {
    typeof console !== "undefined" && console.warn("No character metrics " + ("for '" + value + "' in style '" + fontName + "' and mode '" + mode + "'"));
    symbolNode = new SymbolNode(value, 0, 0, 0, 0, 0, classes);
  }
  if (options) {
    symbolNode.maxFontSize = options.sizeMultiplier;
    if (options.style.isTight()) {
      symbolNode.classes.push("mtight");
    }
    var color = options.getColor();
    if (color) {
      symbolNode.style.color = color;
    }
  }
  return symbolNode;
};
var mathsym = function mathsym2(value, mode, options, classes) {
  if (classes === void 0) {
    classes = [];
  }
  if (options.font === "boldsymbol" && lookupSymbol(value, "Main-Bold", mode).metrics) {
    return makeSymbol(value, "Main-Bold", mode, options, classes.concat(["mathbf"]));
  } else if (value === "\\" || symbols[mode][value].font === "main") {
    return makeSymbol(value, "Main-Regular", mode, options, classes);
  } else {
    return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
  }
};
var boldsymbol = function boldsymbol2(value, mode, options, classes, type) {
  if (type !== "textord" && lookupSymbol(value, "Math-BoldItalic", mode).metrics) {
    return {
      fontName: "Math-BoldItalic",
      fontClass: "boldsymbol"
    };
  } else {
    return {
      fontName: "Main-Bold",
      fontClass: "mathbf"
    };
  }
};
var makeOrd = function makeOrd2(group, options, type) {
  var mode = group.mode;
  var text2 = group.text;
  var classes = ["mord"];
  var isFont = mode === "math" || mode === "text" && options.font;
  var fontOrFamily = isFont ? options.font : options.fontFamily;
  var wideFontName = "";
  var wideFontClass = "";
  if (text2.charCodeAt(0) === 55349) {
    [wideFontName, wideFontClass] = wideCharacterFont(text2, mode);
  }
  if (wideFontName.length > 0) {
    return makeSymbol(text2, wideFontName, mode, options, classes.concat(wideFontClass));
  } else if (fontOrFamily) {
    var fontName;
    var fontClasses;
    if (fontOrFamily === "boldsymbol") {
      var fontData = boldsymbol(text2, mode, options, classes, type);
      fontName = fontData.fontName;
      fontClasses = [fontData.fontClass];
    } else if (isFont) {
      fontName = fontMap[fontOrFamily].fontName;
      fontClasses = [fontOrFamily];
    } else {
      fontName = retrieveTextFontName(fontOrFamily, options.fontWeight, options.fontShape);
      fontClasses = [fontOrFamily, options.fontWeight, options.fontShape];
    }
    if (lookupSymbol(text2, fontName, mode).metrics) {
      return makeSymbol(text2, fontName, mode, options, classes.concat(fontClasses));
    } else if (ligatures.hasOwnProperty(text2) && fontName.slice(0, 10) === "Typewriter") {
      var parts = [];
      for (var i = 0; i < text2.length; i++) {
        parts.push(makeSymbol(text2[i], fontName, mode, options, classes.concat(fontClasses)));
      }
      return makeFragment(parts);
    }
  }
  if (type === "mathord") {
    return makeSymbol(text2, "Math-Italic", mode, options, classes.concat(["mathnormal"]));
  } else if (type === "textord") {
    var font = symbols[mode][text2] && symbols[mode][text2].font;
    if (font === "ams") {
      var _fontName = retrieveTextFontName("amsrm", options.fontWeight, options.fontShape);
      return makeSymbol(text2, _fontName, mode, options, classes.concat("amsrm", options.fontWeight, options.fontShape));
    } else if (font === "main" || !font) {
      var _fontName2 = retrieveTextFontName("textrm", options.fontWeight, options.fontShape);
      return makeSymbol(text2, _fontName2, mode, options, classes.concat(options.fontWeight, options.fontShape));
    } else {
      var _fontName3 = retrieveTextFontName(font, options.fontWeight, options.fontShape);
      return makeSymbol(text2, _fontName3, mode, options, classes.concat(_fontName3, options.fontWeight, options.fontShape));
    }
  } else {
    throw new Error("unexpected type: " + type + " in makeOrd");
  }
};
var canCombine = (prev, next) => {
  if (createClass(prev.classes) !== createClass(next.classes) || prev.skew !== next.skew || prev.maxFontSize !== next.maxFontSize) {
    return false;
  }
  if (prev.classes.length === 1) {
    var cls = prev.classes[0];
    if (cls === "mbin" || cls === "mord") {
      return false;
    }
  }
  for (var style in prev.style) {
    if (prev.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {
      return false;
    }
  }
  for (var _style in next.style) {
    if (next.style.hasOwnProperty(_style) && prev.style[_style] !== next.style[_style]) {
      return false;
    }
  }
  return true;
};
var tryCombineChars = chars => {
  for (var i = 0; i < chars.length - 1; i++) {
    var prev = chars[i];
    var next = chars[i + 1];
    if (prev instanceof SymbolNode && next instanceof SymbolNode && canCombine(prev, next)) {
      prev.text += next.text;
      prev.height = Math.max(prev.height, next.height);
      prev.depth = Math.max(prev.depth, next.depth);
      prev.italic = next.italic;
      chars.splice(i + 1, 1);
      i--;
    }
  }
  return chars;
};
var sizeElementFromChildren = function sizeElementFromChildren2(elem) {
  var height = 0;
  var depth = 0;
  var maxFontSize = 0;
  for (var i = 0; i < elem.children.length; i++) {
    var child = elem.children[i];
    if (child.height > height) {
      height = child.height;
    }
    if (child.depth > depth) {
      depth = child.depth;
    }
    if (child.maxFontSize > maxFontSize) {
      maxFontSize = child.maxFontSize;
    }
  }
  elem.height = height;
  elem.depth = depth;
  elem.maxFontSize = maxFontSize;
};
var makeSpan$2 = function makeSpan(classes, children, options, style) {
  var span = new Span(classes, children, options, style);
  sizeElementFromChildren(span);
  return span;
};
var makeSvgSpan = (classes, children, options, style) => new Span(classes, children, options, style);
var makeLineSpan = function makeLineSpan2(className, options, thickness) {
  var line = makeSpan$2([className], [], options);
  line.height = Math.max(thickness || options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
  line.style.borderBottomWidth = makeEm(line.height);
  line.maxFontSize = 1;
  return line;
};
var makeAnchor = function makeAnchor2(href, classes, children, options) {
  var anchor = new Anchor(href, classes, children, options);
  sizeElementFromChildren(anchor);
  return anchor;
};
var makeFragment = function makeFragment2(children) {
  var fragment = new DocumentFragment(children);
  sizeElementFromChildren(fragment);
  return fragment;
};
var wrapFragment = function wrapFragment2(group, options) {
  if (group instanceof DocumentFragment) {
    return makeSpan$2([], [group], options);
  }
  return group;
};
var getVListChildrenAndDepth = function getVListChildrenAndDepth2(params) {
  if (params.positionType === "individualShift") {
    var oldChildren = params.children;
    var children = [oldChildren[0]];
    var _depth = -oldChildren[0].shift - oldChildren[0].elem.depth;
    var currPos = _depth;
    for (var i = 1; i < oldChildren.length; i++) {
      var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;
      var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);
      currPos = currPos + diff;
      children.push({
        type: "kern",
        size
      });
      children.push(oldChildren[i]);
    }
    return {
      children,
      depth: _depth
    };
  }
  var depth;
  if (params.positionType === "top") {
    var bottom = params.positionData;
    for (var _i = 0; _i < params.children.length; _i++) {
      var child = params.children[_i];
      bottom -= child.type === "kern" ? child.size : child.elem.height + child.elem.depth;
    }
    depth = bottom;
  } else if (params.positionType === "bottom") {
    depth = -params.positionData;
  } else {
    var firstChild = params.children[0];
    if (firstChild.type !== "elem") {
      throw new Error('First child must have type "elem".');
    }
    if (params.positionType === "shift") {
      depth = -firstChild.elem.depth - params.positionData;
    } else if (params.positionType === "firstBaseline") {
      depth = -firstChild.elem.depth;
    } else {
      throw new Error("Invalid positionType " + params.positionType + ".");
    }
  }
  return {
    children: params.children,
    depth
  };
};
var makeVList = function makeVList2(params, options) {
  var {
    children,
    depth
  } = getVListChildrenAndDepth(params);
  var pstrutSize = 0;
  for (var i = 0; i < children.length; i++) {
    var child = children[i];
    if (child.type === "elem") {
      var elem = child.elem;
      pstrutSize = Math.max(pstrutSize, elem.maxFontSize, elem.height);
    }
  }
  pstrutSize += 2;
  var pstrut = makeSpan$2(["pstrut"], []);
  pstrut.style.height = makeEm(pstrutSize);
  var realChildren = [];
  var minPos = depth;
  var maxPos = depth;
  var currPos = depth;
  for (var _i2 = 0; _i2 < children.length; _i2++) {
    var _child = children[_i2];
    if (_child.type === "kern") {
      currPos += _child.size;
    } else {
      var _elem = _child.elem;
      var classes = _child.wrapperClasses || [];
      var style = _child.wrapperStyle || {};
      var childWrap = makeSpan$2(classes, [pstrut, _elem], void 0, style);
      childWrap.style.top = makeEm(-pstrutSize - currPos - _elem.depth);
      if (_child.marginLeft) {
        childWrap.style.marginLeft = _child.marginLeft;
      }
      if (_child.marginRight) {
        childWrap.style.marginRight = _child.marginRight;
      }
      realChildren.push(childWrap);
      currPos += _elem.height + _elem.depth;
    }
    minPos = Math.min(minPos, currPos);
    maxPos = Math.max(maxPos, currPos);
  }
  var vlist = makeSpan$2(["vlist"], realChildren);
  vlist.style.height = makeEm(maxPos);
  var rows;
  if (minPos < 0) {
    var emptySpan = makeSpan$2([], []);
    var depthStrut = makeSpan$2(["vlist"], [emptySpan]);
    depthStrut.style.height = makeEm(-minPos);
    var topStrut = makeSpan$2(["vlist-s"], [new SymbolNode("\u200B")]);
    rows = [makeSpan$2(["vlist-r"], [vlist, topStrut]), makeSpan$2(["vlist-r"], [depthStrut])];
  } else {
    rows = [makeSpan$2(["vlist-r"], [vlist])];
  }
  var vtable = makeSpan$2(["vlist-t"], rows);
  if (rows.length === 2) {
    vtable.classes.push("vlist-t2");
  }
  vtable.height = maxPos;
  vtable.depth = -minPos;
  return vtable;
};
var makeGlue = (measurement, options) => {
  var rule = makeSpan$2(["mspace"], [], options);
  var size = calculateSize(measurement, options);
  rule.style.marginRight = makeEm(size);
  return rule;
};
var retrieveTextFontName = function retrieveTextFontName2(fontFamily, fontWeight, fontShape) {
  var baseFontName = "";
  switch (fontFamily) {
    case "amsrm":
      baseFontName = "AMS";
      break;
    case "textrm":
      baseFontName = "Main";
      break;
    case "textsf":
      baseFontName = "SansSerif";
      break;
    case "texttt":
      baseFontName = "Typewriter";
      break;
    default:
      baseFontName = fontFamily;
  }
  var fontStylesName;
  if (fontWeight === "textbf" && fontShape === "textit") {
    fontStylesName = "BoldItalic";
  } else if (fontWeight === "textbf") {
    fontStylesName = "Bold";
  } else if (fontWeight === "textit") {
    fontStylesName = "Italic";
  } else {
    fontStylesName = "Regular";
  }
  return baseFontName + "-" + fontStylesName;
};
var fontMap = {
  "mathbf": {
    variant: "bold",
    fontName: "Main-Bold"
  },
  "mathrm": {
    variant: "normal",
    fontName: "Main-Regular"
  },
  "textit": {
    variant: "italic",
    fontName: "Main-Italic"
  },
  "mathit": {
    variant: "italic",
    fontName: "Main-Italic"
  },
  "mathnormal": {
    variant: "italic",
    fontName: "Math-Italic"
  },
  "mathbb": {
    variant: "double-struck",
    fontName: "AMS-Regular"
  },
  "mathcal": {
    variant: "script",
    fontName: "Caligraphic-Regular"
  },
  "mathfrak": {
    variant: "fraktur",
    fontName: "Fraktur-Regular"
  },
  "mathscr": {
    variant: "script",
    fontName: "Script-Regular"
  },
  "mathsf": {
    variant: "sans-serif",
    fontName: "SansSerif-Regular"
  },
  "mathtt": {
    variant: "monospace",
    fontName: "Typewriter-Regular"
  }
};
var svgData = {
  vec: ["vec", 0.471, 0.714],
  oiintSize1: ["oiintSize1", 0.957, 0.499],
  oiintSize2: ["oiintSize2", 1.472, 0.659],
  oiiintSize1: ["oiiintSize1", 1.304, 0.499],
  oiiintSize2: ["oiiintSize2", 1.98, 0.659]
};
var staticSvg = function staticSvg2(value, options) {
  var [pathName, width, height] = svgData[value];
  var path2 = new PathNode(pathName);
  var svgNode = new SvgNode([path2], {
    "width": makeEm(width),
    "height": makeEm(height),
    "style": "width:" + makeEm(width),
    "viewBox": "0 0 " + 1e3 * width + " " + 1e3 * height,
    "preserveAspectRatio": "xMinYMin"
  });
  var span = makeSvgSpan(["overlay"], [svgNode], options);
  span.height = height;
  span.style.height = makeEm(height);
  span.style.width = makeEm(width);
  return span;
};
var buildCommon = {
  fontMap,
  makeSymbol,
  mathsym,
  makeSpan: makeSpan$2,
  makeSvgSpan,
  makeLineSpan,
  makeAnchor,
  makeFragment,
  wrapFragment,
  makeVList,
  makeOrd,
  makeGlue,
  staticSvg,
  svgData,
  tryCombineChars
};
var thinspace = {
  number: 3,
  unit: "mu"
};
var mediumspace = {
  number: 4,
  unit: "mu"
};
var thickspace = {
  number: 5,
  unit: "mu"
};
var spacings = {
  mord: {
    mop: thinspace,
    mbin: mediumspace,
    mrel: thickspace,
    minner: thinspace
  },
  mop: {
    mord: thinspace,
    mop: thinspace,
    mrel: thickspace,
    minner: thinspace
  },
  mbin: {
    mord: mediumspace,
    mop: mediumspace,
    mopen: mediumspace,
    minner: mediumspace
  },
  mrel: {
    mord: thickspace,
    mop: thickspace,
    mopen: thickspace,
    minner: thickspace
  },
  mopen: {},
  mclose: {
    mop: thinspace,
    mbin: mediumspace,
    mrel: thickspace,
    minner: thinspace
  },
  mpunct: {
    mord: thinspace,
    mop: thinspace,
    mrel: thickspace,
    mopen: thinspace,
    mclose: thinspace,
    mpunct: thinspace,
    minner: thinspace
  },
  minner: {
    mord: thinspace,
    mop: thinspace,
    mbin: mediumspace,
    mrel: thickspace,
    mopen: thinspace,
    mpunct: thinspace,
    minner: thinspace
  }
};
var tightSpacings = {
  mord: {
    mop: thinspace
  },
  mop: {
    mord: thinspace,
    mop: thinspace
  },
  mbin: {},
  mrel: {},
  mopen: {},
  mclose: {
    mop: thinspace
  },
  mpunct: {},
  minner: {
    mop: thinspace
  }
};
var _functions = {};
var _htmlGroupBuilders = {};
var _mathmlGroupBuilders = {};
function defineFunction(_ref) {
  var {
    type,
    names,
    props,
    handler,
    htmlBuilder: htmlBuilder3,
    mathmlBuilder: mathmlBuilder3
  } = _ref;
  var data = {
    type,
    numArgs: props.numArgs,
    argTypes: props.argTypes,
    allowedInArgument: !!props.allowedInArgument,
    allowedInText: !!props.allowedInText,
    allowedInMath: props.allowedInMath === void 0 ? true : props.allowedInMath,
    numOptionalArgs: props.numOptionalArgs || 0,
    infix: !!props.infix,
    primitive: !!props.primitive,
    handler
  };
  for (var i = 0; i < names.length; ++i) {
    _functions[names[i]] = data;
  }
  if (type) {
    if (htmlBuilder3) {
      _htmlGroupBuilders[type] = htmlBuilder3;
    }
    if (mathmlBuilder3) {
      _mathmlGroupBuilders[type] = mathmlBuilder3;
    }
  }
}
function defineFunctionBuilders(_ref2) {
  var {
    type,
    htmlBuilder: htmlBuilder3,
    mathmlBuilder: mathmlBuilder3
  } = _ref2;
  defineFunction({
    type,
    names: [],
    props: {
      numArgs: 0
    },
    handler() {
      throw new Error("Should never be called.");
    },
    htmlBuilder: htmlBuilder3,
    mathmlBuilder: mathmlBuilder3
  });
}
var normalizeArgument = function normalizeArgument2(arg) {
  return arg.type === "ordgroup" && arg.body.length === 1 ? arg.body[0] : arg;
};
var ordargument = function ordargument2(arg) {
  return arg.type === "ordgroup" ? arg.body : [arg];
};
var makeSpan$1 = buildCommon.makeSpan;
var binLeftCanceller = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"];
var binRightCanceller = ["rightmost", "mrel", "mclose", "mpunct"];
var styleMap$1 = {
  "display": Style$1.DISPLAY,
  "text": Style$1.TEXT,
  "script": Style$1.SCRIPT,
  "scriptscript": Style$1.SCRIPTSCRIPT
};
var DomEnum = {
  mord: "mord",
  mop: "mop",
  mbin: "mbin",
  mrel: "mrel",
  mopen: "mopen",
  mclose: "mclose",
  mpunct: "mpunct",
  minner: "minner"
};
var buildExpression$1 = function buildExpression(expression, options, isRealGroup, surrounding) {
  if (surrounding === void 0) {
    surrounding = [null, null];
  }
  var groups = [];
  for (var i = 0; i < expression.length; i++) {
    var output = buildGroup$1(expression[i], options);
    if (output instanceof DocumentFragment) {
      var children = output.children;
      groups.push(...children);
    } else {
      groups.push(output);
    }
  }
  buildCommon.tryCombineChars(groups);
  if (!isRealGroup) {
    return groups;
  }
  var glueOptions = options;
  if (expression.length === 1) {
    var node = expression[0];
    if (node.type === "sizing") {
      glueOptions = options.havingSize(node.size);
    } else if (node.type === "styling") {
      glueOptions = options.havingStyle(styleMap$1[node.style]);
    }
  }
  var dummyPrev = makeSpan$1([surrounding[0] || "leftmost"], [], options);
  var dummyNext = makeSpan$1([surrounding[1] || "rightmost"], [], options);
  var isRoot = isRealGroup === "root";
  traverseNonSpaceNodes(groups, (node2, prev) => {
    var prevType = prev.classes[0];
    var type = node2.classes[0];
    if (prevType === "mbin" && utils.contains(binRightCanceller, type)) {
      prev.classes[0] = "mord";
    } else if (type === "mbin" && utils.contains(binLeftCanceller, prevType)) {
      node2.classes[0] = "mord";
    }
  }, {
    node: dummyPrev
  }, dummyNext, isRoot);
  traverseNonSpaceNodes(groups, (node2, prev) => {
    var prevType = getTypeOfDomTree(prev);
    var type = getTypeOfDomTree(node2);
    var space = prevType && type ? node2.hasClass("mtight") ? tightSpacings[prevType][type] : spacings[prevType][type] : null;
    if (space) {
      return buildCommon.makeGlue(space, glueOptions);
    }
  }, {
    node: dummyPrev
  }, dummyNext, isRoot);
  return groups;
};
var traverseNonSpaceNodes = function traverseNonSpaceNodes2(nodes, callback, prev, next, isRoot) {
  if (next) {
    nodes.push(next);
  }
  var i = 0;
  for (; i < nodes.length; i++) {
    var node = nodes[i];
    var partialGroup = checkPartialGroup(node);
    if (partialGroup) {
      traverseNonSpaceNodes2(partialGroup.children, callback, prev, null, isRoot);
      continue;
    }
    var nonspace = !node.hasClass("mspace");
    if (nonspace) {
      var result = callback(node, prev.node);
      if (result) {
        if (prev.insertAfter) {
          prev.insertAfter(result);
        } else {
          nodes.unshift(result);
          i++;
        }
      }
    }
    if (nonspace) {
      prev.node = node;
    } else if (isRoot && node.hasClass("newline")) {
      prev.node = makeSpan$1(["leftmost"]);
    }
    prev.insertAfter = (index => n => {
      nodes.splice(index + 1, 0, n);
      i++;
    })(i);
  }
  if (next) {
    nodes.pop();
  }
};
var checkPartialGroup = function checkPartialGroup2(node) {
  if (node instanceof DocumentFragment || node instanceof Anchor || node instanceof Span && node.hasClass("enclosing")) {
    return node;
  }
  return null;
};
var getOutermostNode = function getOutermostNode2(node, side) {
  var partialGroup = checkPartialGroup(node);
  if (partialGroup) {
    var children = partialGroup.children;
    if (children.length) {
      if (side === "right") {
        return getOutermostNode2(children[children.length - 1], "right");
      } else if (side === "left") {
        return getOutermostNode2(children[0], "left");
      }
    }
  }
  return node;
};
var getTypeOfDomTree = function getTypeOfDomTree2(node, side) {
  if (!node) {
    return null;
  }
  if (side) {
    node = getOutermostNode(node, side);
  }
  return DomEnum[node.classes[0]] || null;
};
var makeNullDelimiter = function makeNullDelimiter2(options, classes) {
  var moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
  return makeSpan$1(classes.concat(moreClasses));
};
var buildGroup$1 = function buildGroup(group, options, baseOptions) {
  if (!group) {
    return makeSpan$1();
  }
  if (_htmlGroupBuilders[group.type]) {
    var groupNode = _htmlGroupBuilders[group.type](group, options);
    if (baseOptions && options.size !== baseOptions.size) {
      groupNode = makeSpan$1(options.sizingClasses(baseOptions), [groupNode], options);
      var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
      groupNode.height *= multiplier;
      groupNode.depth *= multiplier;
    }
    return groupNode;
  } else {
    throw new ParseError("Got group of unknown type: '" + group.type + "'");
  }
};
function buildHTMLUnbreakable(children, options) {
  var body = makeSpan$1(["base"], children, options);
  var strut = makeSpan$1(["strut"]);
  strut.style.height = makeEm(body.height + body.depth);
  if (body.depth) {
    strut.style.verticalAlign = makeEm(-body.depth);
  }
  body.children.unshift(strut);
  return body;
}
function buildHTML(tree, options) {
  var tag = null;
  if (tree.length === 1 && tree[0].type === "tag") {
    tag = tree[0].tag;
    tree = tree[0].body;
  }
  var expression = buildExpression$1(tree, options, "root");
  var eqnNum;
  if (expression.length === 2 && expression[1].hasClass("tag")) {
    eqnNum = expression.pop();
  }
  var children = [];
  var parts = [];
  for (var i = 0; i < expression.length; i++) {
    parts.push(expression[i]);
    if (expression[i].hasClass("mbin") || expression[i].hasClass("mrel") || expression[i].hasClass("allowbreak")) {
      var nobreak = false;
      while (i < expression.length - 1 && expression[i + 1].hasClass("mspace") && !expression[i + 1].hasClass("newline")) {
        i++;
        parts.push(expression[i]);
        if (expression[i].hasClass("nobreak")) {
          nobreak = true;
        }
      }
      if (!nobreak) {
        children.push(buildHTMLUnbreakable(parts, options));
        parts = [];
      }
    } else if (expression[i].hasClass("newline")) {
      parts.pop();
      if (parts.length > 0) {
        children.push(buildHTMLUnbreakable(parts, options));
        parts = [];
      }
      children.push(expression[i]);
    }
  }
  if (parts.length > 0) {
    children.push(buildHTMLUnbreakable(parts, options));
  }
  var tagChild;
  if (tag) {
    tagChild = buildHTMLUnbreakable(buildExpression$1(tag, options, true));
    tagChild.classes = ["tag"];
    children.push(tagChild);
  } else if (eqnNum) {
    children.push(eqnNum);
  }
  var htmlNode = makeSpan$1(["katex-html"], children);
  htmlNode.setAttribute("aria-hidden", "true");
  if (tagChild) {
    var strut = tagChild.children[0];
    strut.style.height = makeEm(htmlNode.height + htmlNode.depth);
    if (htmlNode.depth) {
      strut.style.verticalAlign = makeEm(-htmlNode.depth);
    }
  }
  return htmlNode;
}
function newDocumentFragment(children) {
  return new DocumentFragment(children);
}
var MathNode = class {
  constructor(type, children, classes) {
    this.type = void 0;
    this.attributes = void 0;
    this.children = void 0;
    this.classes = void 0;
    this.type = type;
    this.attributes = {};
    this.children = children || [];
    this.classes = classes || [];
  }
  setAttribute(name, value) {
    this.attributes[name] = value;
  }
  getAttribute(name) {
    return this.attributes[name];
  }
  toNode() {
    var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);
    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }
    if (this.classes.length > 0) {
      node.className = createClass(this.classes);
    }
    for (var i = 0; i < this.children.length; i++) {
      node.appendChild(this.children[i].toNode());
    }
    return node;
  }
  toMarkup() {
    var markup = "<" + this.type;
    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + '="';
        markup += utils.escape(this.attributes[attr]);
        markup += '"';
      }
    }
    if (this.classes.length > 0) {
      markup += ' class ="' + utils.escape(createClass(this.classes)) + '"';
    }
    markup += ">";
    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }
    markup += "</" + this.type + ">";
    return markup;
  }
  toText() {
    return this.children.map(child => child.toText()).join("");
  }
};
var TextNode = class {
  constructor(text2) {
    this.text = void 0;
    this.text = text2;
  }
  toNode() {
    return document.createTextNode(this.text);
  }
  toMarkup() {
    return utils.escape(this.toText());
  }
  toText() {
    return this.text;
  }
};
var SpaceNode = class {
  constructor(width) {
    this.width = void 0;
    this.character = void 0;
    this.width = width;
    if (width >= 0.05555 && width <= 0.05556) {
      this.character = "\u200A";
    } else if (width >= 0.1666 && width <= 0.1667) {
      this.character = "\u2009";
    } else if (width >= 0.2222 && width <= 0.2223) {
      this.character = "\u2005";
    } else if (width >= 0.2777 && width <= 0.2778) {
      this.character = "\u2005\u200A";
    } else if (width >= -0.05556 && width <= -0.05555) {
      this.character = "\u200A\u2063";
    } else if (width >= -0.1667 && width <= -0.1666) {
      this.character = "\u2009\u2063";
    } else if (width >= -0.2223 && width <= -0.2222) {
      this.character = "\u205F\u2063";
    } else if (width >= -0.2778 && width <= -0.2777) {
      this.character = "\u2005\u2063";
    } else {
      this.character = null;
    }
  }
  toNode() {
    if (this.character) {
      return document.createTextNode(this.character);
    } else {
      var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
      node.setAttribute("width", makeEm(this.width));
      return node;
    }
  }
  toMarkup() {
    if (this.character) {
      return "<mtext>" + this.character + "</mtext>";
    } else {
      return '<mspace width="' + makeEm(this.width) + '"/>';
    }
  }
  toText() {
    if (this.character) {
      return this.character;
    } else {
      return " ";
    }
  }
};
var mathMLTree = {
  MathNode,
  TextNode,
  SpaceNode,
  newDocumentFragment
};
var makeText = function makeText2(text2, mode, options) {
  if (symbols[mode][text2] && symbols[mode][text2].replace && text2.charCodeAt(0) !== 55349 && !(ligatures.hasOwnProperty(text2) && options && (options.fontFamily && options.fontFamily.slice(4, 6) === "tt" || options.font && options.font.slice(4, 6) === "tt"))) {
    text2 = symbols[mode][text2].replace;
  }
  return new mathMLTree.TextNode(text2);
};
var makeRow = function makeRow2(body) {
  if (body.length === 1) {
    return body[0];
  } else {
    return new mathMLTree.MathNode("mrow", body);
  }
};
var getVariant = function getVariant2(group, options) {
  if (options.fontFamily === "texttt") {
    return "monospace";
  } else if (options.fontFamily === "textsf") {
    if (options.fontShape === "textit" && options.fontWeight === "textbf") {
      return "sans-serif-bold-italic";
    } else if (options.fontShape === "textit") {
      return "sans-serif-italic";
    } else if (options.fontWeight === "textbf") {
      return "bold-sans-serif";
    } else {
      return "sans-serif";
    }
  } else if (options.fontShape === "textit" && options.fontWeight === "textbf") {
    return "bold-italic";
  } else if (options.fontShape === "textit") {
    return "italic";
  } else if (options.fontWeight === "textbf") {
    return "bold";
  }
  var font = options.font;
  if (!font || font === "mathnormal") {
    return null;
  }
  var mode = group.mode;
  if (font === "mathit") {
    return "italic";
  } else if (font === "boldsymbol") {
    return group.type === "textord" ? "bold" : "bold-italic";
  } else if (font === "mathbf") {
    return "bold";
  } else if (font === "mathbb") {
    return "double-struck";
  } else if (font === "mathfrak") {
    return "fraktur";
  } else if (font === "mathscr" || font === "mathcal") {
    return "script";
  } else if (font === "mathsf") {
    return "sans-serif";
  } else if (font === "mathtt") {
    return "monospace";
  }
  var text2 = group.text;
  if (utils.contains(["\\imath", "\\jmath"], text2)) {
    return null;
  }
  if (symbols[mode][text2] && symbols[mode][text2].replace) {
    text2 = symbols[mode][text2].replace;
  }
  var fontName = buildCommon.fontMap[font].fontName;
  if (getCharacterMetrics(text2, fontName, mode)) {
    return buildCommon.fontMap[font].variant;
  }
  return null;
};
var buildExpression2 = function buildExpression3(expression, options, isOrdgroup) {
  if (expression.length === 1) {
    var group = buildGroup2(expression[0], options);
    if (isOrdgroup && group instanceof MathNode && group.type === "mo") {
      group.setAttribute("lspace", "0em");
      group.setAttribute("rspace", "0em");
    }
    return [group];
  }
  var groups = [];
  var lastGroup;
  for (var i = 0; i < expression.length; i++) {
    var _group = buildGroup2(expression[i], options);
    if (_group instanceof MathNode && lastGroup instanceof MathNode) {
      if (_group.type === "mtext" && lastGroup.type === "mtext" && _group.getAttribute("mathvariant") === lastGroup.getAttribute("mathvariant")) {
        lastGroup.children.push(..._group.children);
        continue;
      } else if (_group.type === "mn" && lastGroup.type === "mn") {
        lastGroup.children.push(..._group.children);
        continue;
      } else if (_group.type === "mi" && _group.children.length === 1 && lastGroup.type === "mn") {
        var child = _group.children[0];
        if (child instanceof TextNode && child.text === ".") {
          lastGroup.children.push(..._group.children);
          continue;
        }
      } else if (lastGroup.type === "mi" && lastGroup.children.length === 1) {
        var lastChild = lastGroup.children[0];
        if (lastChild instanceof TextNode && lastChild.text === "\u0338" && (_group.type === "mo" || _group.type === "mi" || _group.type === "mn")) {
          var _child = _group.children[0];
          if (_child instanceof TextNode && _child.text.length > 0) {
            _child.text = _child.text.slice(0, 1) + "\u0338" + _child.text.slice(1);
            groups.pop();
          }
        }
      }
    }
    groups.push(_group);
    lastGroup = _group;
  }
  return groups;
};
var buildExpressionRow = function buildExpressionRow2(expression, options, isOrdgroup) {
  return makeRow(buildExpression2(expression, options, isOrdgroup));
};
var buildGroup2 = function buildGroup3(group, options) {
  if (!group) {
    return new mathMLTree.MathNode("mrow");
  }
  if (_mathmlGroupBuilders[group.type]) {
    var result = _mathmlGroupBuilders[group.type](group, options);
    return result;
  } else {
    throw new ParseError("Got group of unknown type: '" + group.type + "'");
  }
};
function buildMathML(tree, texExpression, options, isDisplayMode, forMathmlOnly) {
  var expression = buildExpression2(tree, options);
  var wrapper;
  if (expression.length === 1 && expression[0] instanceof MathNode && utils.contains(["mrow", "mtable"], expression[0].type)) {
    wrapper = expression[0];
  } else {
    wrapper = new mathMLTree.MathNode("mrow", expression);
  }
  var annotation = new mathMLTree.MathNode("annotation", [new mathMLTree.TextNode(texExpression)]);
  annotation.setAttribute("encoding", "application/x-tex");
  var semantics = new mathMLTree.MathNode("semantics", [wrapper, annotation]);
  var math2 = new mathMLTree.MathNode("math", [semantics]);
  math2.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML");
  if (isDisplayMode) {
    math2.setAttribute("display", "block");
  }
  var wrapperClass = forMathmlOnly ? "katex" : "katex-mathml";
  return buildCommon.makeSpan([wrapperClass], [math2]);
}
var optionsFromSettings = function optionsFromSettings2(settings) {
  return new Options({
    style: settings.displayMode ? Style$1.DISPLAY : Style$1.TEXT,
    maxSize: settings.maxSize,
    minRuleThickness: settings.minRuleThickness
  });
};
var displayWrap = function displayWrap2(node, settings) {
  if (settings.displayMode) {
    var classes = ["katex-display"];
    if (settings.leqno) {
      classes.push("leqno");
    }
    if (settings.fleqn) {
      classes.push("fleqn");
    }
    node = buildCommon.makeSpan(classes, [node]);
  }
  return node;
};
var buildTree = function buildTree2(tree, expression, settings) {
  var options = optionsFromSettings(settings);
  var katexNode;
  if (settings.output === "mathml") {
    return buildMathML(tree, expression, options, settings.displayMode, true);
  } else if (settings.output === "html") {
    var htmlNode = buildHTML(tree, options);
    katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
  } else {
    var mathMLNode = buildMathML(tree, expression, options, settings.displayMode, false);
    var _htmlNode = buildHTML(tree, options);
    katexNode = buildCommon.makeSpan(["katex"], [mathMLNode, _htmlNode]);
  }
  return displayWrap(katexNode, settings);
};
var buildHTMLTree = function buildHTMLTree2(tree, expression, settings) {
  var options = optionsFromSettings(settings);
  var htmlNode = buildHTML(tree, options);
  var katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
  return displayWrap(katexNode, settings);
};
var stretchyCodePoint = {
  widehat: "^",
  widecheck: "\u02C7",
  widetilde: "~",
  utilde: "~",
  overleftarrow: "\u2190",
  underleftarrow: "\u2190",
  xleftarrow: "\u2190",
  overrightarrow: "\u2192",
  underrightarrow: "\u2192",
  xrightarrow: "\u2192",
  underbrace: "\u23DF",
  overbrace: "\u23DE",
  overgroup: "\u23E0",
  undergroup: "\u23E1",
  overleftrightarrow: "\u2194",
  underleftrightarrow: "\u2194",
  xleftrightarrow: "\u2194",
  Overrightarrow: "\u21D2",
  xRightarrow: "\u21D2",
  overleftharpoon: "\u21BC",
  xleftharpoonup: "\u21BC",
  overrightharpoon: "\u21C0",
  xrightharpoonup: "\u21C0",
  xLeftarrow: "\u21D0",
  xLeftrightarrow: "\u21D4",
  xhookleftarrow: "\u21A9",
  xhookrightarrow: "\u21AA",
  xmapsto: "\u21A6",
  xrightharpoondown: "\u21C1",
  xleftharpoondown: "\u21BD",
  xrightleftharpoons: "\u21CC",
  xleftrightharpoons: "\u21CB",
  xtwoheadleftarrow: "\u219E",
  xtwoheadrightarrow: "\u21A0",
  xlongequal: "=",
  xtofrom: "\u21C4",
  xrightleftarrows: "\u21C4",
  xrightequilibrium: "\u21CC",
  xleftequilibrium: "\u21CB",
  "\\cdrightarrow": "\u2192",
  "\\cdleftarrow": "\u2190",
  "\\cdlongequal": "="
};
var mathMLnode = function mathMLnode2(label) {
  var node = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(stretchyCodePoint[label.replace(/^\\/, "")])]);
  node.setAttribute("stretchy", "true");
  return node;
};
var katexImagesData = {
  overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
  "\\cdrightarrow": [["rightarrow"], 3, 522, "xMaxYMin"],
  xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
  "\\cdleftarrow": [["leftarrow"], 3, 522, "xMinYMin"],
  Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
  xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
  xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
  overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
  overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
  xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
  "\\cdlongequal": [["longequal"], 3, 334, "xMinYMin"],
  xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
  xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
  overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
  underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
  underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
  xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
  xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
  xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
  xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
  xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
  overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
  undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
  xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
  xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
  xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
  xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
  xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
};
var groupLength = function groupLength2(arg) {
  if (arg.type === "ordgroup") {
    return arg.body.length;
  } else {
    return 1;
  }
};
var svgSpan = function svgSpan2(group, options) {
  function buildSvgSpan_() {
    var viewBoxWidth = 4e5;
    var label = group.label.slice(1);
    if (utils.contains(["widehat", "widecheck", "widetilde", "utilde"], label)) {
      var grp = group;
      var numChars = groupLength(grp.base);
      var viewBoxHeight;
      var pathName;
      var _height;
      if (numChars > 5) {
        if (label === "widehat" || label === "widecheck") {
          viewBoxHeight = 420;
          viewBoxWidth = 2364;
          _height = 0.42;
          pathName = label + "4";
        } else {
          viewBoxHeight = 312;
          viewBoxWidth = 2340;
          _height = 0.34;
          pathName = "tilde4";
        }
      } else {
        var imgIndex = [1, 1, 2, 2, 3, 3][numChars];
        if (label === "widehat" || label === "widecheck") {
          viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
          viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
          _height = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
          pathName = label + imgIndex;
        } else {
          viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
          viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
          _height = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
          pathName = "tilde" + imgIndex;
        }
      }
      var path2 = new PathNode(pathName);
      var svgNode = new SvgNode([path2], {
        "width": "100%",
        "height": makeEm(_height),
        "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
        "preserveAspectRatio": "none"
      });
      return {
        span: buildCommon.makeSvgSpan([], [svgNode], options),
        minWidth: 0,
        height: _height
      };
    } else {
      var spans = [];
      var data = katexImagesData[label];
      var [paths, _minWidth, _viewBoxHeight] = data;
      var _height2 = _viewBoxHeight / 1e3;
      var numSvgChildren = paths.length;
      var widthClasses;
      var aligns;
      if (numSvgChildren === 1) {
        var align1 = data[3];
        widthClasses = ["hide-tail"];
        aligns = [align1];
      } else if (numSvgChildren === 2) {
        widthClasses = ["halfarrow-left", "halfarrow-right"];
        aligns = ["xMinYMin", "xMaxYMin"];
      } else if (numSvgChildren === 3) {
        widthClasses = ["brace-left", "brace-center", "brace-right"];
        aligns = ["xMinYMin", "xMidYMin", "xMaxYMin"];
      } else {
        throw new Error("Correct katexImagesData or update code here to support\n                    " + numSvgChildren + " children.");
      }
      for (var i = 0; i < numSvgChildren; i++) {
        var _path = new PathNode(paths[i]);
        var _svgNode = new SvgNode([_path], {
          "width": "400em",
          "height": makeEm(_height2),
          "viewBox": "0 0 " + viewBoxWidth + " " + _viewBoxHeight,
          "preserveAspectRatio": aligns[i] + " slice"
        });
        var _span = buildCommon.makeSvgSpan([widthClasses[i]], [_svgNode], options);
        if (numSvgChildren === 1) {
          return {
            span: _span,
            minWidth: _minWidth,
            height: _height2
          };
        } else {
          _span.style.height = makeEm(_height2);
          spans.push(_span);
        }
      }
      return {
        span: buildCommon.makeSpan(["stretchy"], spans, options),
        minWidth: _minWidth,
        height: _height2
      };
    }
  }
  var {
    span,
    minWidth,
    height
  } = buildSvgSpan_();
  span.height = height;
  span.style.height = makeEm(height);
  if (minWidth > 0) {
    span.style.minWidth = makeEm(minWidth);
  }
  return span;
};
var encloseSpan = function encloseSpan2(inner2, label, topPad, bottomPad, options) {
  var img;
  var totalHeight = inner2.height + inner2.depth + topPad + bottomPad;
  if (/fbox|color|angl/.test(label)) {
    img = buildCommon.makeSpan(["stretchy", label], [], options);
    if (label === "fbox") {
      var color = options.color && options.getColor();
      if (color) {
        img.style.borderColor = color;
      }
    }
  } else {
    var lines = [];
    if (/^[bx]cancel$/.test(label)) {
      lines.push(new LineNode({
        "x1": "0",
        "y1": "0",
        "x2": "100%",
        "y2": "100%",
        "stroke-width": "0.046em"
      }));
    }
    if (/^x?cancel$/.test(label)) {
      lines.push(new LineNode({
        "x1": "0",
        "y1": "100%",
        "x2": "100%",
        "y2": "0",
        "stroke-width": "0.046em"
      }));
    }
    var svgNode = new SvgNode(lines, {
      "width": "100%",
      "height": makeEm(totalHeight)
    });
    img = buildCommon.makeSvgSpan([], [svgNode], options);
  }
  img.height = totalHeight;
  img.style.height = makeEm(totalHeight);
  return img;
};
var stretchy = {
  encloseSpan,
  mathMLnode,
  svgSpan
};
function assertNodeType(node, type) {
  if (!node || node.type !== type) {
    throw new Error("Expected node of type " + type + ", but got " + (node ? "node of type " + node.type : String(node)));
  }
  return node;
}
function assertSymbolNodeType(node) {
  var typedNode = checkSymbolNodeType(node);
  if (!typedNode) {
    throw new Error("Expected node of symbol group type, but got " + (node ? "node of type " + node.type : String(node)));
  }
  return typedNode;
}
function checkSymbolNodeType(node) {
  if (node && (node.type === "atom" || NON_ATOMS.hasOwnProperty(node.type))) {
    return node;
  }
  return null;
}
var htmlBuilder$a = (grp, options) => {
  var base;
  var group;
  var supSubGroup;
  if (grp && grp.type === "supsub") {
    group = assertNodeType(grp.base, "accent");
    base = group.base;
    grp.base = base;
    supSubGroup = assertSpan(buildGroup$1(grp, options));
    grp.base = group;
  } else {
    group = assertNodeType(grp, "accent");
    base = group.base;
  }
  var body = buildGroup$1(base, options.havingCrampedStyle());
  var mustShift = group.isShifty && utils.isCharacterBox(base);
  var skew = 0;
  if (mustShift) {
    var baseChar = utils.getBaseElem(base);
    var baseGroup = buildGroup$1(baseChar, options.havingCrampedStyle());
    skew = assertSymbolDomNode(baseGroup).skew;
  }
  var accentBelow = group.label === "\\c";
  var clearance = accentBelow ? body.height + body.depth : Math.min(body.height, options.fontMetrics().xHeight);
  var accentBody;
  if (!group.isStretchy) {
    var accent2;
    var width;
    if (group.label === "\\vec") {
      accent2 = buildCommon.staticSvg("vec", options);
      width = buildCommon.svgData.vec[1];
    } else {
      accent2 = buildCommon.makeOrd({
        mode: group.mode,
        text: group.label
      }, options, "textord");
      accent2 = assertSymbolDomNode(accent2);
      accent2.italic = 0;
      width = accent2.width;
      if (accentBelow) {
        clearance += accent2.depth;
      }
    }
    accentBody = buildCommon.makeSpan(["accent-body"], [accent2]);
    var accentFull = group.label === "\\textcircled";
    if (accentFull) {
      accentBody.classes.push("accent-full");
      clearance = body.height;
    }
    var left = skew;
    if (!accentFull) {
      left -= width / 2;
    }
    accentBody.style.left = makeEm(left);
    if (group.label === "\\textcircled") {
      accentBody.style.top = ".2em";
    }
    accentBody = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: body
      }, {
        type: "kern",
        size: -clearance
      }, {
        type: "elem",
        elem: accentBody
      }]
    }, options);
  } else {
    accentBody = stretchy.svgSpan(group, options);
    accentBody = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: body
      }, {
        type: "elem",
        elem: accentBody,
        wrapperClasses: ["svg-align"],
        wrapperStyle: skew > 0 ? {
          width: "calc(100% - " + makeEm(2 * skew) + ")",
          marginLeft: makeEm(2 * skew)
        } : void 0
      }]
    }, options);
  }
  var accentWrap = buildCommon.makeSpan(["mord", "accent"], [accentBody], options);
  if (supSubGroup) {
    supSubGroup.children[0] = accentWrap;
    supSubGroup.height = Math.max(accentWrap.height, supSubGroup.height);
    supSubGroup.classes[0] = "mord";
    return supSubGroup;
  } else {
    return accentWrap;
  }
};
var mathmlBuilder$9 = (group, options) => {
  var accentNode = group.isStretchy ? stretchy.mathMLnode(group.label) : new mathMLTree.MathNode("mo", [makeText(group.label, group.mode)]);
  var node = new mathMLTree.MathNode("mover", [buildGroup2(group.base, options), accentNode]);
  node.setAttribute("accent", "true");
  return node;
};
var NON_STRETCHY_ACCENT_REGEX = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map(accent2 => "\\" + accent2).join("|"));
defineFunction({
  type: "accent",
  names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
  props: {
    numArgs: 1
  },
  handler: (context, args) => {
    var base = normalizeArgument(args[0]);
    var isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);
    var isShifty = !isStretchy || context.funcName === "\\widehat" || context.funcName === "\\widetilde" || context.funcName === "\\widecheck";
    return {
      type: "accent",
      mode: context.parser.mode,
      label: context.funcName,
      isStretchy,
      isShifty,
      base
    };
  },
  htmlBuilder: htmlBuilder$a,
  mathmlBuilder: mathmlBuilder$9
});
defineFunction({
  type: "accent",
  names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\c", "\\r", "\\H", "\\v", "\\textcircled"],
  props: {
    numArgs: 1,
    allowedInText: true,
    allowedInMath: true,
    argTypes: ["primitive"]
  },
  handler: (context, args) => {
    var base = args[0];
    var mode = context.parser.mode;
    if (mode === "math") {
      context.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + context.funcName + " works only in text mode");
      mode = "text";
    }
    return {
      type: "accent",
      mode,
      label: context.funcName,
      isStretchy: false,
      isShifty: true,
      base
    };
  },
  htmlBuilder: htmlBuilder$a,
  mathmlBuilder: mathmlBuilder$9
});
defineFunction({
  type: "accentUnder",
  names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
  props: {
    numArgs: 1
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName
    } = _ref;
    var base = args[0];
    return {
      type: "accentUnder",
      mode: parser.mode,
      label: funcName,
      base
    };
  },
  htmlBuilder: (group, options) => {
    var innerGroup = buildGroup$1(group.base, options);
    var accentBody = stretchy.svgSpan(group, options);
    var kern = group.label === "\\utilde" ? 0.12 : 0;
    var vlist = buildCommon.makeVList({
      positionType: "top",
      positionData: innerGroup.height,
      children: [{
        type: "elem",
        elem: accentBody,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: kern
      }, {
        type: "elem",
        elem: innerGroup
      }]
    }, options);
    return buildCommon.makeSpan(["mord", "accentunder"], [vlist], options);
  },
  mathmlBuilder: (group, options) => {
    var accentNode = stretchy.mathMLnode(group.label);
    var node = new mathMLTree.MathNode("munder", [buildGroup2(group.base, options), accentNode]);
    node.setAttribute("accentunder", "true");
    return node;
  }
});
var paddedNode = group => {
  var node = new mathMLTree.MathNode("mpadded", group ? [group] : []);
  node.setAttribute("width", "+0.6em");
  node.setAttribute("lspace", "0.3em");
  return node;
};
defineFunction({
  type: "xArrow",
  names: ["\\xleftarrow", "\\xrightarrow", "\\xLeftarrow", "\\xRightarrow", "\\xleftrightarrow", "\\xLeftrightarrow", "\\xhookleftarrow", "\\xhookrightarrow", "\\xmapsto", "\\xrightharpoondown", "\\xrightharpoonup", "\\xleftharpoondown", "\\xleftharpoonup", "\\xrightleftharpoons", "\\xleftrightharpoons", "\\xlongequal", "\\xtwoheadrightarrow", "\\xtwoheadleftarrow", "\\xtofrom", "\\xrightleftarrows", "\\xrightequilibrium", "\\xleftequilibrium", "\\\\cdrightarrow", "\\\\cdleftarrow", "\\\\cdlongequal"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler(_ref, args, optArgs) {
    var {
      parser,
      funcName
    } = _ref;
    return {
      type: "xArrow",
      mode: parser.mode,
      label: funcName,
      body: args[0],
      below: optArgs[0]
    };
  },
  htmlBuilder(group, options) {
    var style = options.style;
    var newOptions = options.havingStyle(style.sup());
    var upperGroup = buildCommon.wrapFragment(buildGroup$1(group.body, newOptions, options), options);
    var arrowPrefix = group.label.slice(0, 2) === "\\x" ? "x" : "cd";
    upperGroup.classes.push(arrowPrefix + "-arrow-pad");
    var lowerGroup;
    if (group.below) {
      newOptions = options.havingStyle(style.sub());
      lowerGroup = buildCommon.wrapFragment(buildGroup$1(group.below, newOptions, options), options);
      lowerGroup.classes.push(arrowPrefix + "-arrow-pad");
    }
    var arrowBody = stretchy.svgSpan(group, options);
    var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height;
    var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111;
    if (upperGroup.depth > 0.25 || group.label === "\\xleftequilibrium") {
      upperShift -= upperGroup.depth;
    }
    var vlist;
    if (lowerGroup) {
      var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
      vlist = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: upperGroup,
          shift: upperShift
        }, {
          type: "elem",
          elem: arrowBody,
          shift: arrowShift
        }, {
          type: "elem",
          elem: lowerGroup,
          shift: lowerShift
        }]
      }, options);
    } else {
      vlist = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: upperGroup,
          shift: upperShift
        }, {
          type: "elem",
          elem: arrowBody,
          shift: arrowShift
        }]
      }, options);
    }
    vlist.children[0].children[0].children[1].classes.push("svg-align");
    return buildCommon.makeSpan(["mrel", "x-arrow"], [vlist], options);
  },
  mathmlBuilder(group, options) {
    var arrowNode = stretchy.mathMLnode(group.label);
    arrowNode.setAttribute("minsize", group.label.charAt(0) === "x" ? "1.75em" : "3.0em");
    var node;
    if (group.body) {
      var upperNode = paddedNode(buildGroup2(group.body, options));
      if (group.below) {
        var lowerNode = paddedNode(buildGroup2(group.below, options));
        node = new mathMLTree.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
      } else {
        node = new mathMLTree.MathNode("mover", [arrowNode, upperNode]);
      }
    } else if (group.below) {
      var _lowerNode = paddedNode(buildGroup2(group.below, options));
      node = new mathMLTree.MathNode("munder", [arrowNode, _lowerNode]);
    } else {
      node = paddedNode();
      node = new mathMLTree.MathNode("mover", [arrowNode, node]);
    }
    return node;
  }
});
var makeSpan2 = buildCommon.makeSpan;
function htmlBuilder$9(group, options) {
  var elements = buildExpression$1(group.body, options, true);
  return makeSpan2([group.mclass], elements, options);
}
function mathmlBuilder$8(group, options) {
  var node;
  var inner2 = buildExpression2(group.body, options);
  if (group.mclass === "minner") {
    node = new mathMLTree.MathNode("mpadded", inner2);
  } else if (group.mclass === "mord") {
    if (group.isCharacterBox) {
      node = inner2[0];
      node.type = "mi";
    } else {
      node = new mathMLTree.MathNode("mi", inner2);
    }
  } else {
    if (group.isCharacterBox) {
      node = inner2[0];
      node.type = "mo";
    } else {
      node = new mathMLTree.MathNode("mo", inner2);
    }
    if (group.mclass === "mbin") {
      node.attributes.lspace = "0.22em";
      node.attributes.rspace = "0.22em";
    } else if (group.mclass === "mpunct") {
      node.attributes.lspace = "0em";
      node.attributes.rspace = "0.17em";
    } else if (group.mclass === "mopen" || group.mclass === "mclose") {
      node.attributes.lspace = "0em";
      node.attributes.rspace = "0em";
    } else if (group.mclass === "minner") {
      node.attributes.lspace = "0.0556em";
      node.attributes.width = "+0.1111em";
    }
  }
  return node;
}
defineFunction({
  type: "mclass",
  names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler(_ref, args) {
    var {
      parser,
      funcName
    } = _ref;
    var body = args[0];
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: "m" + funcName.slice(5),
      body: ordargument(body),
      isCharacterBox: utils.isCharacterBox(body)
    };
  },
  htmlBuilder: htmlBuilder$9,
  mathmlBuilder: mathmlBuilder$8
});
var binrelClass = arg => {
  var atom = arg.type === "ordgroup" && arg.body.length ? arg.body[0] : arg;
  if (atom.type === "atom" && (atom.family === "bin" || atom.family === "rel")) {
    return "m" + atom.family;
  } else {
    return "mord";
  }
};
defineFunction({
  type: "mclass",
  names: ["\\@binrel"],
  props: {
    numArgs: 2
  },
  handler(_ref2, args) {
    var {
      parser
    } = _ref2;
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: binrelClass(args[0]),
      body: ordargument(args[1]),
      isCharacterBox: utils.isCharacterBox(args[1])
    };
  }
});
defineFunction({
  type: "mclass",
  names: ["\\stackrel", "\\overset", "\\underset"],
  props: {
    numArgs: 2
  },
  handler(_ref3, args) {
    var {
      parser,
      funcName
    } = _ref3;
    var baseArg = args[1];
    var shiftedArg = args[0];
    var mclass;
    if (funcName !== "\\stackrel") {
      mclass = binrelClass(baseArg);
    } else {
      mclass = "mrel";
    }
    var baseOp = {
      type: "op",
      mode: baseArg.mode,
      limits: true,
      alwaysHandleSupSub: true,
      parentIsSupSub: false,
      symbol: false,
      suppressBaseShift: funcName !== "\\stackrel",
      body: ordargument(baseArg)
    };
    var supsub = {
      type: "supsub",
      mode: shiftedArg.mode,
      base: baseOp,
      sup: funcName === "\\underset" ? null : shiftedArg,
      sub: funcName === "\\underset" ? shiftedArg : null
    };
    return {
      type: "mclass",
      mode: parser.mode,
      mclass,
      body: [supsub],
      isCharacterBox: utils.isCharacterBox(supsub)
    };
  },
  htmlBuilder: htmlBuilder$9,
  mathmlBuilder: mathmlBuilder$8
});
defineFunction({
  type: "pmb",
  names: ["\\pmb"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    return {
      type: "pmb",
      mode: parser.mode,
      mclass: binrelClass(args[0]),
      body: ordargument(args[0])
    };
  },
  htmlBuilder(group, options) {
    var elements = buildExpression$1(group.body, options, true);
    var node = buildCommon.makeSpan([group.mclass], elements, options);
    node.style.textShadow = "0.02em 0.01em 0.04px";
    return node;
  },
  mathmlBuilder(group, style) {
    var inner2 = buildExpression2(group.body, style);
    var node = new mathMLTree.MathNode("mstyle", inner2);
    node.setAttribute("style", "text-shadow: 0.02em 0.01em 0.04px");
    return node;
  }
});
var cdArrowFunctionName = {
  ">": "\\\\cdrightarrow",
  "<": "\\\\cdleftarrow",
  "=": "\\\\cdlongequal",
  "A": "\\uparrow",
  "V": "\\downarrow",
  "|": "\\Vert",
  ".": "no arrow"
};
var newCell = () => {
  return {
    type: "styling",
    body: [],
    mode: "math",
    style: "display"
  };
};
var isStartOfArrow = node => {
  return node.type === "textord" && node.text === "@";
};
var isLabelEnd = (node, endChar) => {
  return (node.type === "mathord" || node.type === "atom") && node.text === endChar;
};
function cdArrow(arrowChar, labels, parser) {
  var funcName = cdArrowFunctionName[arrowChar];
  switch (funcName) {
    case "\\\\cdrightarrow":
    case "\\\\cdleftarrow":
      return parser.callFunction(funcName, [labels[0]], [labels[1]]);
    case "\\uparrow":
    case "\\downarrow":
      {
        var leftLabel = parser.callFunction("\\\\cdleft", [labels[0]], []);
        var bareArrow = {
          type: "atom",
          text: funcName,
          mode: "math",
          family: "rel"
        };
        var sizedArrow = parser.callFunction("\\Big", [bareArrow], []);
        var rightLabel = parser.callFunction("\\\\cdright", [labels[1]], []);
        var arrowGroup = {
          type: "ordgroup",
          mode: "math",
          body: [leftLabel, sizedArrow, rightLabel]
        };
        return parser.callFunction("\\\\cdparent", [arrowGroup], []);
      }
    case "\\\\cdlongequal":
      return parser.callFunction("\\\\cdlongequal", [], []);
    case "\\Vert":
      {
        var arrow = {
          type: "textord",
          text: "\\Vert",
          mode: "math"
        };
        return parser.callFunction("\\Big", [arrow], []);
      }
    default:
      return {
        type: "textord",
        text: " ",
        mode: "math"
      };
  }
}
function parseCD(parser) {
  var parsedRows = [];
  parser.gullet.beginGroup();
  parser.gullet.macros.set("\\cr", "\\\\\\relax");
  parser.gullet.beginGroup();
  while (true) {
    parsedRows.push(parser.parseExpression(false, "\\\\"));
    parser.gullet.endGroup();
    parser.gullet.beginGroup();
    var next = parser.fetch().text;
    if (next === "&" || next === "\\\\") {
      parser.consume();
    } else if (next === "\\end") {
      if (parsedRows[parsedRows.length - 1].length === 0) {
        parsedRows.pop();
      }
      break;
    } else {
      throw new ParseError("Expected \\\\ or \\cr or \\end", parser.nextToken);
    }
  }
  var row = [];
  var body = [row];
  for (var i = 0; i < parsedRows.length; i++) {
    var rowNodes = parsedRows[i];
    var cell = newCell();
    for (var j = 0; j < rowNodes.length; j++) {
      if (!isStartOfArrow(rowNodes[j])) {
        cell.body.push(rowNodes[j]);
      } else {
        row.push(cell);
        j += 1;
        var arrowChar = assertSymbolNodeType(rowNodes[j]).text;
        var labels = new Array(2);
        labels[0] = {
          type: "ordgroup",
          mode: "math",
          body: []
        };
        labels[1] = {
          type: "ordgroup",
          mode: "math",
          body: []
        };
        if ("=|.".indexOf(arrowChar) > -1) ;else if ("<>AV".indexOf(arrowChar) > -1) {
          for (var labelNum = 0; labelNum < 2; labelNum++) {
            var inLabel = true;
            for (var k = j + 1; k < rowNodes.length; k++) {
              if (isLabelEnd(rowNodes[k], arrowChar)) {
                inLabel = false;
                j = k;
                break;
              }
              if (isStartOfArrow(rowNodes[k])) {
                throw new ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[k]);
              }
              labels[labelNum].body.push(rowNodes[k]);
            }
            if (inLabel) {
              throw new ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[j]);
            }
          }
        } else {
          throw new ParseError('Expected one of "<>AV=|." after @', rowNodes[j]);
        }
        var arrow = cdArrow(arrowChar, labels, parser);
        var wrappedArrow = {
          type: "styling",
          body: [arrow],
          mode: "math",
          style: "display"
        };
        row.push(wrappedArrow);
        cell = newCell();
      }
    }
    if (i % 2 === 0) {
      row.push(cell);
    } else {
      row.shift();
    }
    row = [];
    body.push(row);
  }
  parser.gullet.endGroup();
  parser.gullet.endGroup();
  var cols = new Array(body[0].length).fill({
    type: "align",
    align: "c",
    pregap: 0.25,
    postgap: 0.25
  });
  return {
    type: "array",
    mode: "math",
    body,
    arraystretch: 1,
    addJot: true,
    rowGaps: [null],
    cols,
    colSeparationType: "CD",
    hLinesBeforeRow: new Array(body.length + 1).fill([])
  };
}
defineFunction({
  type: "cdlabel",
  names: ["\\\\cdleft", "\\\\cdright"],
  props: {
    numArgs: 1
  },
  handler(_ref, args) {
    var {
      parser,
      funcName
    } = _ref;
    return {
      type: "cdlabel",
      mode: parser.mode,
      side: funcName.slice(4),
      label: args[0]
    };
  },
  htmlBuilder(group, options) {
    var newOptions = options.havingStyle(options.style.sup());
    var label = buildCommon.wrapFragment(buildGroup$1(group.label, newOptions, options), options);
    label.classes.push("cd-label-" + group.side);
    label.style.bottom = makeEm(0.8 - label.depth);
    label.height = 0;
    label.depth = 0;
    return label;
  },
  mathmlBuilder(group, options) {
    var label = new mathMLTree.MathNode("mrow", [buildGroup2(group.label, options)]);
    label = new mathMLTree.MathNode("mpadded", [label]);
    label.setAttribute("width", "0");
    if (group.side === "left") {
      label.setAttribute("lspace", "-1width");
    }
    label.setAttribute("voffset", "0.7em");
    label = new mathMLTree.MathNode("mstyle", [label]);
    label.setAttribute("displaystyle", "false");
    label.setAttribute("scriptlevel", "1");
    return label;
  }
});
defineFunction({
  type: "cdlabelparent",
  names: ["\\\\cdparent"],
  props: {
    numArgs: 1
  },
  handler(_ref2, args) {
    var {
      parser
    } = _ref2;
    return {
      type: "cdlabelparent",
      mode: parser.mode,
      fragment: args[0]
    };
  },
  htmlBuilder(group, options) {
    var parent = buildCommon.wrapFragment(buildGroup$1(group.fragment, options), options);
    parent.classes.push("cd-vert-arrow");
    return parent;
  },
  mathmlBuilder(group, options) {
    return new mathMLTree.MathNode("mrow", [buildGroup2(group.fragment, options)]);
  }
});
defineFunction({
  type: "textord",
  names: ["\\@char"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    var arg = assertNodeType(args[0], "ordgroup");
    var group = arg.body;
    var number = "";
    for (var i = 0; i < group.length; i++) {
      var node = assertNodeType(group[i], "textord");
      number += node.text;
    }
    var code = parseInt(number);
    var text2;
    if (isNaN(code)) {
      throw new ParseError("\\@char has non-numeric argument " + number);
    } else if (code < 0 || code >= 1114111) {
      throw new ParseError("\\@char with invalid code point " + number);
    } else if (code <= 65535) {
      text2 = String.fromCharCode(code);
    } else {
      code -= 65536;
      text2 = String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
    }
    return {
      type: "textord",
      mode: parser.mode,
      text: text2
    };
  }
});
var htmlBuilder$8 = (group, options) => {
  var elements = buildExpression$1(group.body, options.withColor(group.color), false);
  return buildCommon.makeFragment(elements);
};
var mathmlBuilder$7 = (group, options) => {
  var inner2 = buildExpression2(group.body, options.withColor(group.color));
  var node = new mathMLTree.MathNode("mstyle", inner2);
  node.setAttribute("mathcolor", group.color);
  return node;
};
defineFunction({
  type: "color",
  names: ["\\textcolor"],
  props: {
    numArgs: 2,
    allowedInText: true,
    argTypes: ["color", "original"]
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    var color = assertNodeType(args[0], "color-token").color;
    var body = args[1];
    return {
      type: "color",
      mode: parser.mode,
      color,
      body: ordargument(body)
    };
  },
  htmlBuilder: htmlBuilder$8,
  mathmlBuilder: mathmlBuilder$7
});
defineFunction({
  type: "color",
  names: ["\\color"],
  props: {
    numArgs: 1,
    allowedInText: true,
    argTypes: ["color"]
  },
  handler(_ref2, args) {
    var {
      parser,
      breakOnTokenText
    } = _ref2;
    var color = assertNodeType(args[0], "color-token").color;
    parser.gullet.macros.set("\\current@color", color);
    var body = parser.parseExpression(true, breakOnTokenText);
    return {
      type: "color",
      mode: parser.mode,
      color,
      body
    };
  },
  htmlBuilder: htmlBuilder$8,
  mathmlBuilder: mathmlBuilder$7
});
defineFunction({
  type: "cr",
  names: ["\\\\"],
  props: {
    numArgs: 0,
    numOptionalArgs: 0,
    allowedInText: true
  },
  handler(_ref, args, optArgs) {
    var {
      parser
    } = _ref;
    var size = parser.gullet.future().text === "[" ? parser.parseSizeGroup(true) : null;
    var newLine = !parser.settings.displayMode || !parser.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline does nothing in display mode");
    return {
      type: "cr",
      mode: parser.mode,
      newLine,
      size: size && assertNodeType(size, "size").value
    };
  },
  htmlBuilder(group, options) {
    var span = buildCommon.makeSpan(["mspace"], [], options);
    if (group.newLine) {
      span.classes.push("newline");
      if (group.size) {
        span.style.marginTop = makeEm(calculateSize(group.size, options));
      }
    }
    return span;
  },
  mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mspace");
    if (group.newLine) {
      node.setAttribute("linebreak", "newline");
      if (group.size) {
        node.setAttribute("height", makeEm(calculateSize(group.size, options)));
      }
    }
    return node;
  }
});
var globalMap = {
  "\\global": "\\global",
  "\\long": "\\\\globallong",
  "\\\\globallong": "\\\\globallong",
  "\\def": "\\gdef",
  "\\gdef": "\\gdef",
  "\\edef": "\\xdef",
  "\\xdef": "\\xdef",
  "\\let": "\\\\globallet",
  "\\futurelet": "\\\\globalfuture"
};
var checkControlSequence = tok => {
  var name = tok.text;
  if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
    throw new ParseError("Expected a control sequence", tok);
  }
  return name;
};
var getRHS = parser => {
  var tok = parser.gullet.popToken();
  if (tok.text === "=") {
    tok = parser.gullet.popToken();
    if (tok.text === " ") {
      tok = parser.gullet.popToken();
    }
  }
  return tok;
};
var letCommand = (parser, name, tok, global) => {
  var macro = parser.gullet.macros.get(tok.text);
  if (macro == null) {
    tok.noexpand = true;
    macro = {
      tokens: [tok],
      numArgs: 0,
      unexpandable: !parser.gullet.isExpandable(tok.text)
    };
  }
  parser.gullet.macros.set(name, macro, global);
};
defineFunction({
  type: "internal",
  names: ["\\global", "\\long", "\\\\globallong"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler(_ref) {
    var {
      parser,
      funcName
    } = _ref;
    parser.consumeSpaces();
    var token = parser.fetch();
    if (globalMap[token.text]) {
      if (funcName === "\\global" || funcName === "\\\\globallong") {
        token.text = globalMap[token.text];
      }
      return assertNodeType(parser.parseFunction(), "internal");
    }
    throw new ParseError("Invalid token after macro prefix", token);
  }
});
defineFunction({
  type: "internal",
  names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler(_ref2) {
    var {
      parser,
      funcName
    } = _ref2;
    var tok = parser.gullet.popToken();
    var name = tok.text;
    if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
      throw new ParseError("Expected a control sequence", tok);
    }
    var numArgs = 0;
    var insert;
    var delimiters2 = [[]];
    while (parser.gullet.future().text !== "{") {
      tok = parser.gullet.popToken();
      if (tok.text === "#") {
        if (parser.gullet.future().text === "{") {
          insert = parser.gullet.future();
          delimiters2[numArgs].push("{");
          break;
        }
        tok = parser.gullet.popToken();
        if (!/^[1-9]$/.test(tok.text)) {
          throw new ParseError('Invalid argument number "' + tok.text + '"');
        }
        if (parseInt(tok.text) !== numArgs + 1) {
          throw new ParseError('Argument number "' + tok.text + '" out of order');
        }
        numArgs++;
        delimiters2.push([]);
      } else if (tok.text === "EOF") {
        throw new ParseError("Expected a macro definition");
      } else {
        delimiters2[numArgs].push(tok.text);
      }
    }
    var {
      tokens
    } = parser.gullet.consumeArg();
    if (insert) {
      tokens.unshift(insert);
    }
    if (funcName === "\\edef" || funcName === "\\xdef") {
      tokens = parser.gullet.expandTokens(tokens);
      tokens.reverse();
    }
    parser.gullet.macros.set(name, {
      tokens,
      numArgs,
      delimiters: delimiters2
    }, funcName === globalMap[funcName]);
    return {
      type: "internal",
      mode: parser.mode
    };
  }
});
defineFunction({
  type: "internal",
  names: ["\\let", "\\\\globallet"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler(_ref3) {
    var {
      parser,
      funcName
    } = _ref3;
    var name = checkControlSequence(parser.gullet.popToken());
    parser.gullet.consumeSpaces();
    var tok = getRHS(parser);
    letCommand(parser, name, tok, funcName === "\\\\globallet");
    return {
      type: "internal",
      mode: parser.mode
    };
  }
});
defineFunction({
  type: "internal",
  names: ["\\futurelet", "\\\\globalfuture"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler(_ref4) {
    var {
      parser,
      funcName
    } = _ref4;
    var name = checkControlSequence(parser.gullet.popToken());
    var middle = parser.gullet.popToken();
    var tok = parser.gullet.popToken();
    letCommand(parser, name, tok, funcName === "\\\\globalfuture");
    parser.gullet.pushToken(tok);
    parser.gullet.pushToken(middle);
    return {
      type: "internal",
      mode: parser.mode
    };
  }
});
var getMetrics = function getMetrics2(symbol, font, mode) {
  var replace = symbols.math[symbol] && symbols.math[symbol].replace;
  var metrics = getCharacterMetrics(replace || symbol, font, mode);
  if (!metrics) {
    throw new Error("Unsupported symbol " + symbol + " and font size " + font + ".");
  }
  return metrics;
};
var styleWrap = function styleWrap2(delim, toStyle, options, classes) {
  var newOptions = options.havingBaseStyle(toStyle);
  var span = buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)), [delim], options);
  var delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
  span.height *= delimSizeMultiplier;
  span.depth *= delimSizeMultiplier;
  span.maxFontSize = newOptions.sizeMultiplier;
  return span;
};
var centerSpan = function centerSpan2(span, options, style) {
  var newOptions = options.havingBaseStyle(style);
  var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;
  span.classes.push("delimcenter");
  span.style.top = makeEm(shift);
  span.height -= shift;
  span.depth += shift;
};
var makeSmallDelim = function makeSmallDelim2(delim, style, center, options, mode, classes) {
  var text2 = buildCommon.makeSymbol(delim, "Main-Regular", mode, options);
  var span = styleWrap(text2, style, options, classes);
  if (center) {
    centerSpan(span, options, style);
  }
  return span;
};
var mathrmSize = function mathrmSize2(value, size, mode, options) {
  return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode, options);
};
var makeLargeDelim = function makeLargeDelim2(delim, size, center, options, mode, classes) {
  var inner2 = mathrmSize(delim, size, mode, options);
  var span = styleWrap(buildCommon.makeSpan(["delimsizing", "size" + size], [inner2], options), Style$1.TEXT, options, classes);
  if (center) {
    centerSpan(span, options, Style$1.TEXT);
  }
  return span;
};
var makeGlyphSpan = function makeGlyphSpan2(symbol, font, mode) {
  var sizeClass;
  if (font === "Size1-Regular") {
    sizeClass = "delim-size1";
  } else {
    sizeClass = "delim-size4";
  }
  var corner = buildCommon.makeSpan(["delimsizinginner", sizeClass], [buildCommon.makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]);
  return {
    type: "elem",
    elem: corner
  };
};
var makeInner = function makeInner2(ch, height, options) {
  var width = fontMetricsData["Size4-Regular"][ch.charCodeAt(0)] ? fontMetricsData["Size4-Regular"][ch.charCodeAt(0)][4] : fontMetricsData["Size1-Regular"][ch.charCodeAt(0)][4];
  var path2 = new PathNode("inner", innerPath(ch, Math.round(1e3 * height)));
  var svgNode = new SvgNode([path2], {
    "width": makeEm(width),
    "height": makeEm(height),
    "style": "width:" + makeEm(width),
    "viewBox": "0 0 " + 1e3 * width + " " + Math.round(1e3 * height),
    "preserveAspectRatio": "xMinYMin"
  });
  var span = buildCommon.makeSvgSpan([], [svgNode], options);
  span.height = height;
  span.style.height = makeEm(height);
  span.style.width = makeEm(width);
  return {
    type: "elem",
    elem: span
  };
};
var lapInEms = 8e-3;
var lap = {
  type: "kern",
  size: -1 * lapInEms
};
var verts = ["|", "\\lvert", "\\rvert", "\\vert"];
var doubleVerts = ["\\|", "\\lVert", "\\rVert", "\\Vert"];
var makeStackedDelim = function makeStackedDelim2(delim, heightTotal, center, options, mode, classes) {
  var top;
  var middle;
  var repeat;
  var bottom;
  var svgLabel = "";
  var viewBoxWidth = 0;
  top = repeat = bottom = delim;
  middle = null;
  var font = "Size1-Regular";
  if (delim === "\\uparrow") {
    repeat = bottom = "\u23D0";
  } else if (delim === "\\Uparrow") {
    repeat = bottom = "\u2016";
  } else if (delim === "\\downarrow") {
    top = repeat = "\u23D0";
  } else if (delim === "\\Downarrow") {
    top = repeat = "\u2016";
  } else if (delim === "\\updownarrow") {
    top = "\\uparrow";
    repeat = "\u23D0";
    bottom = "\\downarrow";
  } else if (delim === "\\Updownarrow") {
    top = "\\Uparrow";
    repeat = "\u2016";
    bottom = "\\Downarrow";
  } else if (utils.contains(verts, delim)) {
    repeat = "\u2223";
    svgLabel = "vert";
    viewBoxWidth = 333;
  } else if (utils.contains(doubleVerts, delim)) {
    repeat = "\u2225";
    svgLabel = "doublevert";
    viewBoxWidth = 556;
  } else if (delim === "[" || delim === "\\lbrack") {
    top = "\u23A1";
    repeat = "\u23A2";
    bottom = "\u23A3";
    font = "Size4-Regular";
    svgLabel = "lbrack";
    viewBoxWidth = 667;
  } else if (delim === "]" || delim === "\\rbrack") {
    top = "\u23A4";
    repeat = "\u23A5";
    bottom = "\u23A6";
    font = "Size4-Regular";
    svgLabel = "rbrack";
    viewBoxWidth = 667;
  } else if (delim === "\\lfloor" || delim === "\u230A") {
    repeat = top = "\u23A2";
    bottom = "\u23A3";
    font = "Size4-Regular";
    svgLabel = "lfloor";
    viewBoxWidth = 667;
  } else if (delim === "\\lceil" || delim === "\u2308") {
    top = "\u23A1";
    repeat = bottom = "\u23A2";
    font = "Size4-Regular";
    svgLabel = "lceil";
    viewBoxWidth = 667;
  } else if (delim === "\\rfloor" || delim === "\u230B") {
    repeat = top = "\u23A5";
    bottom = "\u23A6";
    font = "Size4-Regular";
    svgLabel = "rfloor";
    viewBoxWidth = 667;
  } else if (delim === "\\rceil" || delim === "\u2309") {
    top = "\u23A4";
    repeat = bottom = "\u23A5";
    font = "Size4-Regular";
    svgLabel = "rceil";
    viewBoxWidth = 667;
  } else if (delim === "(" || delim === "\\lparen") {
    top = "\u239B";
    repeat = "\u239C";
    bottom = "\u239D";
    font = "Size4-Regular";
    svgLabel = "lparen";
    viewBoxWidth = 875;
  } else if (delim === ")" || delim === "\\rparen") {
    top = "\u239E";
    repeat = "\u239F";
    bottom = "\u23A0";
    font = "Size4-Regular";
    svgLabel = "rparen";
    viewBoxWidth = 875;
  } else if (delim === "\\{" || delim === "\\lbrace") {
    top = "\u23A7";
    middle = "\u23A8";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\}" || delim === "\\rbrace") {
    top = "\u23AB";
    middle = "\u23AC";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\lgroup" || delim === "\u27EE") {
    top = "\u23A7";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\rgroup" || delim === "\u27EF") {
    top = "\u23AB";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\lmoustache" || delim === "\u23B0") {
    top = "\u23A7";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\rmoustache" || delim === "\u23B1") {
    top = "\u23AB";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = "Size4-Regular";
  }
  var topMetrics = getMetrics(top, font, mode);
  var topHeightTotal = topMetrics.height + topMetrics.depth;
  var repeatMetrics = getMetrics(repeat, font, mode);
  var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
  var bottomMetrics = getMetrics(bottom, font, mode);
  var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
  var middleHeightTotal = 0;
  var middleFactor = 1;
  if (middle !== null) {
    var middleMetrics = getMetrics(middle, font, mode);
    middleHeightTotal = middleMetrics.height + middleMetrics.depth;
    middleFactor = 2;
  }
  var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal;
  var repeatCount = Math.max(0, Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal)));
  var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal;
  var axisHeight = options.fontMetrics().axisHeight;
  if (center) {
    axisHeight *= options.sizeMultiplier;
  }
  var depth = realHeightTotal / 2 - axisHeight;
  var stack = [];
  if (svgLabel.length > 0) {
    var midHeight = realHeightTotal - topHeightTotal - bottomHeightTotal;
    var viewBoxHeight = Math.round(realHeightTotal * 1e3);
    var pathStr = tallDelim(svgLabel, Math.round(midHeight * 1e3));
    var path2 = new PathNode(svgLabel, pathStr);
    var width = (viewBoxWidth / 1e3).toFixed(3) + "em";
    var height = (viewBoxHeight / 1e3).toFixed(3) + "em";
    var svg = new SvgNode([path2], {
      "width": width,
      "height": height,
      "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight
    });
    var wrapper = buildCommon.makeSvgSpan([], [svg], options);
    wrapper.height = viewBoxHeight / 1e3;
    wrapper.style.width = width;
    wrapper.style.height = height;
    stack.push({
      type: "elem",
      elem: wrapper
    });
  } else {
    stack.push(makeGlyphSpan(bottom, font, mode));
    stack.push(lap);
    if (middle === null) {
      var innerHeight = realHeightTotal - topHeightTotal - bottomHeightTotal + 2 * lapInEms;
      stack.push(makeInner(repeat, innerHeight, options));
    } else {
      var _innerHeight = (realHeightTotal - topHeightTotal - bottomHeightTotal - middleHeightTotal) / 2 + 2 * lapInEms;
      stack.push(makeInner(repeat, _innerHeight, options));
      stack.push(lap);
      stack.push(makeGlyphSpan(middle, font, mode));
      stack.push(lap);
      stack.push(makeInner(repeat, _innerHeight, options));
    }
    stack.push(lap);
    stack.push(makeGlyphSpan(top, font, mode));
  }
  var newOptions = options.havingBaseStyle(Style$1.TEXT);
  var inner2 = buildCommon.makeVList({
    positionType: "bottom",
    positionData: depth,
    children: stack
  }, newOptions);
  return styleWrap(buildCommon.makeSpan(["delimsizing", "mult"], [inner2], newOptions), Style$1.TEXT, options, classes);
};
var vbPad = 80;
var emPad = 0.08;
var sqrtSvg = function sqrtSvg2(sqrtName, height, viewBoxHeight, extraVinculum, options) {
  var path2 = sqrtPath(sqrtName, extraVinculum, viewBoxHeight);
  var pathNode = new PathNode(sqrtName, path2);
  var svg = new SvgNode([pathNode], {
    "width": "400em",
    "height": makeEm(height),
    "viewBox": "0 0 400000 " + viewBoxHeight,
    "preserveAspectRatio": "xMinYMin slice"
  });
  return buildCommon.makeSvgSpan(["hide-tail"], [svg], options);
};
var makeSqrtImage = function makeSqrtImage2(height, options) {
  var newOptions = options.havingBaseSizing();
  var delim = traverseSequence("\\surd", height * newOptions.sizeMultiplier, stackLargeDelimiterSequence, newOptions);
  var sizeMultiplier = newOptions.sizeMultiplier;
  var extraVinculum = Math.max(0, options.minRuleThickness - options.fontMetrics().sqrtRuleThickness);
  var span;
  var spanHeight = 0;
  var texHeight = 0;
  var viewBoxHeight = 0;
  var advanceWidth;
  if (delim.type === "small") {
    viewBoxHeight = 1e3 + 1e3 * extraVinculum + vbPad;
    if (height < 1) {
      sizeMultiplier = 1;
    } else if (height < 1.4) {
      sizeMultiplier = 0.7;
    }
    spanHeight = (1 + extraVinculum + emPad) / sizeMultiplier;
    texHeight = (1 + extraVinculum) / sizeMultiplier;
    span = sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, extraVinculum, options);
    span.style.minWidth = "0.853em";
    advanceWidth = 0.833 / sizeMultiplier;
  } else if (delim.type === "large") {
    viewBoxHeight = (1e3 + vbPad) * sizeToMaxHeight[delim.size];
    texHeight = (sizeToMaxHeight[delim.size] + extraVinculum) / sizeMultiplier;
    spanHeight = (sizeToMaxHeight[delim.size] + extraVinculum + emPad) / sizeMultiplier;
    span = sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, extraVinculum, options);
    span.style.minWidth = "1.02em";
    advanceWidth = 1 / sizeMultiplier;
  } else {
    spanHeight = height + extraVinculum + emPad;
    texHeight = height + extraVinculum;
    viewBoxHeight = Math.floor(1e3 * height + extraVinculum) + vbPad;
    span = sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, extraVinculum, options);
    span.style.minWidth = "0.742em";
    advanceWidth = 1.056;
  }
  span.height = texHeight;
  span.style.height = makeEm(spanHeight);
  return {
    span,
    advanceWidth,
    ruleWidth: (options.fontMetrics().sqrtRuleThickness + extraVinculum) * sizeMultiplier
  };
};
var stackLargeDelimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230A", "\u230B", "\\lceil", "\\rceil", "\u2308", "\u2309", "\\surd"];
var stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27EE", "\u27EF", "\\lmoustache", "\\rmoustache", "\u23B0", "\u23B1"];
var stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"];
var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3];
var makeSizedDelim = function makeSizedDelim2(delim, size, options, mode, classes) {
  if (delim === "<" || delim === "\\lt" || delim === "\u27E8") {
    delim = "\\langle";
  } else if (delim === ">" || delim === "\\gt" || delim === "\u27E9") {
    delim = "\\rangle";
  }
  if (utils.contains(stackLargeDelimiters, delim) || utils.contains(stackNeverDelimiters, delim)) {
    return makeLargeDelim(delim, size, false, options, mode, classes);
  } else if (utils.contains(stackAlwaysDelimiters, delim)) {
    return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
  } else {
    throw new ParseError("Illegal delimiter: '" + delim + "'");
  }
};
var stackNeverDelimiterSequence = [{
  type: "small",
  style: Style$1.SCRIPTSCRIPT
}, {
  type: "small",
  style: Style$1.SCRIPT
}, {
  type: "small",
  style: Style$1.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}];
var stackAlwaysDelimiterSequence = [{
  type: "small",
  style: Style$1.SCRIPTSCRIPT
}, {
  type: "small",
  style: Style$1.SCRIPT
}, {
  type: "small",
  style: Style$1.TEXT
}, {
  type: "stack"
}];
var stackLargeDelimiterSequence = [{
  type: "small",
  style: Style$1.SCRIPTSCRIPT
}, {
  type: "small",
  style: Style$1.SCRIPT
}, {
  type: "small",
  style: Style$1.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}, {
  type: "stack"
}];
var delimTypeToFont = function delimTypeToFont2(type) {
  if (type.type === "small") {
    return "Main-Regular";
  } else if (type.type === "large") {
    return "Size" + type.size + "-Regular";
  } else if (type.type === "stack") {
    return "Size4-Regular";
  } else {
    throw new Error("Add support for delim type '" + type.type + "' here.");
  }
};
var traverseSequence = function traverseSequence2(delim, height, sequence, options) {
  var start = Math.min(2, 3 - options.style.size);
  for (var i = start; i < sequence.length; i++) {
    if (sequence[i].type === "stack") {
      break;
    }
    var metrics = getMetrics(delim, delimTypeToFont(sequence[i]), "math");
    var heightDepth = metrics.height + metrics.depth;
    if (sequence[i].type === "small") {
      var newOptions = options.havingBaseStyle(sequence[i].style);
      heightDepth *= newOptions.sizeMultiplier;
    }
    if (heightDepth > height) {
      return sequence[i];
    }
  }
  return sequence[sequence.length - 1];
};
var makeCustomSizedDelim = function makeCustomSizedDelim2(delim, height, center, options, mode, classes) {
  if (delim === "<" || delim === "\\lt" || delim === "\u27E8") {
    delim = "\\langle";
  } else if (delim === ">" || delim === "\\gt" || delim === "\u27E9") {
    delim = "\\rangle";
  }
  var sequence;
  if (utils.contains(stackNeverDelimiters, delim)) {
    sequence = stackNeverDelimiterSequence;
  } else if (utils.contains(stackLargeDelimiters, delim)) {
    sequence = stackLargeDelimiterSequence;
  } else {
    sequence = stackAlwaysDelimiterSequence;
  }
  var delimType = traverseSequence(delim, height, sequence, options);
  if (delimType.type === "small") {
    return makeSmallDelim(delim, delimType.style, center, options, mode, classes);
  } else if (delimType.type === "large") {
    return makeLargeDelim(delim, delimType.size, center, options, mode, classes);
  } else {
    return makeStackedDelim(delim, height, center, options, mode, classes);
  }
};
var makeLeftRightDelim = function makeLeftRightDelim2(delim, height, depth, options, mode, classes) {
  var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier;
  var delimiterFactor = 901;
  var delimiterExtend = 5 / options.fontMetrics().ptPerEm;
  var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
  var totalHeight = Math.max(maxDistFromAxis / 500 * delimiterFactor, 2 * maxDistFromAxis - delimiterExtend);
  return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
};
var delimiter = {
  sqrtImage: makeSqrtImage,
  sizedDelim: makeSizedDelim,
  sizeToMaxHeight,
  customSizedDelim: makeCustomSizedDelim,
  leftRightDelim: makeLeftRightDelim
};
var delimiterSizes = {
  "\\bigl": {
    mclass: "mopen",
    size: 1
  },
  "\\Bigl": {
    mclass: "mopen",
    size: 2
  },
  "\\biggl": {
    mclass: "mopen",
    size: 3
  },
  "\\Biggl": {
    mclass: "mopen",
    size: 4
  },
  "\\bigr": {
    mclass: "mclose",
    size: 1
  },
  "\\Bigr": {
    mclass: "mclose",
    size: 2
  },
  "\\biggr": {
    mclass: "mclose",
    size: 3
  },
  "\\Biggr": {
    mclass: "mclose",
    size: 4
  },
  "\\bigm": {
    mclass: "mrel",
    size: 1
  },
  "\\Bigm": {
    mclass: "mrel",
    size: 2
  },
  "\\biggm": {
    mclass: "mrel",
    size: 3
  },
  "\\Biggm": {
    mclass: "mrel",
    size: 4
  },
  "\\big": {
    mclass: "mord",
    size: 1
  },
  "\\Big": {
    mclass: "mord",
    size: 2
  },
  "\\bigg": {
    mclass: "mord",
    size: 3
  },
  "\\Bigg": {
    mclass: "mord",
    size: 4
  }
};
var delimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230A", "\u230B", "\\lceil", "\\rceil", "\u2308", "\u2309", "<", ">", "\\langle", "\u27E8", "\\rangle", "\u27E9", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27EE", "\u27EF", "\\lmoustache", "\\rmoustache", "\u23B0", "\u23B1", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];
function checkDelimiter(delim, context) {
  var symDelim = checkSymbolNodeType(delim);
  if (symDelim && utils.contains(delimiters, symDelim.text)) {
    return symDelim;
  } else if (symDelim) {
    throw new ParseError("Invalid delimiter '" + symDelim.text + "' after '" + context.funcName + "'", delim);
  } else {
    throw new ParseError("Invalid delimiter type '" + delim.type + "'", delim);
  }
}
defineFunction({
  type: "delimsizing",
  names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
  props: {
    numArgs: 1,
    argTypes: ["primitive"]
  },
  handler: (context, args) => {
    var delim = checkDelimiter(args[0], context);
    return {
      type: "delimsizing",
      mode: context.parser.mode,
      size: delimiterSizes[context.funcName].size,
      mclass: delimiterSizes[context.funcName].mclass,
      delim: delim.text
    };
  },
  htmlBuilder: (group, options) => {
    if (group.delim === ".") {
      return buildCommon.makeSpan([group.mclass]);
    }
    return delimiter.sizedDelim(group.delim, group.size, options, group.mode, [group.mclass]);
  },
  mathmlBuilder: group => {
    var children = [];
    if (group.delim !== ".") {
      children.push(makeText(group.delim, group.mode));
    }
    var node = new mathMLTree.MathNode("mo", children);
    if (group.mclass === "mopen" || group.mclass === "mclose") {
      node.setAttribute("fence", "true");
    } else {
      node.setAttribute("fence", "false");
    }
    node.setAttribute("stretchy", "true");
    var size = makeEm(delimiter.sizeToMaxHeight[group.size]);
    node.setAttribute("minsize", size);
    node.setAttribute("maxsize", size);
    return node;
  }
});
function assertParsed(group) {
  if (!group.body) {
    throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
  }
}
defineFunction({
  type: "leftright-right",
  names: ["\\right"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: (context, args) => {
    var color = context.parser.gullet.macros.get("\\current@color");
    if (color && typeof color !== "string") {
      throw new ParseError("\\current@color set to non-string in \\right");
    }
    return {
      type: "leftright-right",
      mode: context.parser.mode,
      delim: checkDelimiter(args[0], context).text,
      color
    };
  }
});
defineFunction({
  type: "leftright",
  names: ["\\left"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: (context, args) => {
    var delim = checkDelimiter(args[0], context);
    var parser = context.parser;
    ++parser.leftrightDepth;
    var body = parser.parseExpression(false);
    --parser.leftrightDepth;
    parser.expect("\\right", false);
    var right = assertNodeType(parser.parseFunction(), "leftright-right");
    return {
      type: "leftright",
      mode: parser.mode,
      body,
      left: delim.text,
      right: right.delim,
      rightColor: right.color
    };
  },
  htmlBuilder: (group, options) => {
    assertParsed(group);
    var inner2 = buildExpression$1(group.body, options, true, ["mopen", "mclose"]);
    var innerHeight = 0;
    var innerDepth = 0;
    var hadMiddle = false;
    for (var i = 0; i < inner2.length; i++) {
      if (inner2[i].isMiddle) {
        hadMiddle = true;
      } else {
        innerHeight = Math.max(inner2[i].height, innerHeight);
        innerDepth = Math.max(inner2[i].depth, innerDepth);
      }
    }
    innerHeight *= options.sizeMultiplier;
    innerDepth *= options.sizeMultiplier;
    var leftDelim;
    if (group.left === ".") {
      leftDelim = makeNullDelimiter(options, ["mopen"]);
    } else {
      leftDelim = delimiter.leftRightDelim(group.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
    }
    inner2.unshift(leftDelim);
    if (hadMiddle) {
      for (var _i = 1; _i < inner2.length; _i++) {
        var middleDelim = inner2[_i];
        var isMiddle = middleDelim.isMiddle;
        if (isMiddle) {
          inner2[_i] = delimiter.leftRightDelim(isMiddle.delim, innerHeight, innerDepth, isMiddle.options, group.mode, []);
        }
      }
    }
    var rightDelim;
    if (group.right === ".") {
      rightDelim = makeNullDelimiter(options, ["mclose"]);
    } else {
      var colorOptions = group.rightColor ? options.withColor(group.rightColor) : options;
      rightDelim = delimiter.leftRightDelim(group.right, innerHeight, innerDepth, colorOptions, group.mode, ["mclose"]);
    }
    inner2.push(rightDelim);
    return buildCommon.makeSpan(["minner"], inner2, options);
  },
  mathmlBuilder: (group, options) => {
    assertParsed(group);
    var inner2 = buildExpression2(group.body, options);
    if (group.left !== ".") {
      var leftNode = new mathMLTree.MathNode("mo", [makeText(group.left, group.mode)]);
      leftNode.setAttribute("fence", "true");
      inner2.unshift(leftNode);
    }
    if (group.right !== ".") {
      var rightNode = new mathMLTree.MathNode("mo", [makeText(group.right, group.mode)]);
      rightNode.setAttribute("fence", "true");
      if (group.rightColor) {
        rightNode.setAttribute("mathcolor", group.rightColor);
      }
      inner2.push(rightNode);
    }
    return makeRow(inner2);
  }
});
defineFunction({
  type: "middle",
  names: ["\\middle"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: (context, args) => {
    var delim = checkDelimiter(args[0], context);
    if (!context.parser.leftrightDepth) {
      throw new ParseError("\\middle without preceding \\left", delim);
    }
    return {
      type: "middle",
      mode: context.parser.mode,
      delim: delim.text
    };
  },
  htmlBuilder: (group, options) => {
    var middleDelim;
    if (group.delim === ".") {
      middleDelim = makeNullDelimiter(options, []);
    } else {
      middleDelim = delimiter.sizedDelim(group.delim, 1, options, group.mode, []);
      var isMiddle = {
        delim: group.delim,
        options
      };
      middleDelim.isMiddle = isMiddle;
    }
    return middleDelim;
  },
  mathmlBuilder: (group, options) => {
    var textNode = group.delim === "\\vert" || group.delim === "|" ? makeText("|", "text") : makeText(group.delim, group.mode);
    var middleNode = new mathMLTree.MathNode("mo", [textNode]);
    middleNode.setAttribute("fence", "true");
    middleNode.setAttribute("lspace", "0.05em");
    middleNode.setAttribute("rspace", "0.05em");
    return middleNode;
  }
});
var htmlBuilder$7 = (group, options) => {
  var inner2 = buildCommon.wrapFragment(buildGroup$1(group.body, options), options);
  var label = group.label.slice(1);
  var scale = options.sizeMultiplier;
  var img;
  var imgShift = 0;
  var isSingleChar = utils.isCharacterBox(group.body);
  if (label === "sout") {
    img = buildCommon.makeSpan(["stretchy", "sout"]);
    img.height = options.fontMetrics().defaultRuleThickness / scale;
    imgShift = -0.5 * options.fontMetrics().xHeight;
  } else if (label === "phase") {
    var lineWeight = calculateSize({
      number: 0.6,
      unit: "pt"
    }, options);
    var clearance = calculateSize({
      number: 0.35,
      unit: "ex"
    }, options);
    var newOptions = options.havingBaseSizing();
    scale = scale / newOptions.sizeMultiplier;
    var angleHeight = inner2.height + inner2.depth + lineWeight + clearance;
    inner2.style.paddingLeft = makeEm(angleHeight / 2 + lineWeight);
    var viewBoxHeight = Math.floor(1e3 * angleHeight * scale);
    var path2 = phasePath(viewBoxHeight);
    var svgNode = new SvgNode([new PathNode("phase", path2)], {
      "width": "400em",
      "height": makeEm(viewBoxHeight / 1e3),
      "viewBox": "0 0 400000 " + viewBoxHeight,
      "preserveAspectRatio": "xMinYMin slice"
    });
    img = buildCommon.makeSvgSpan(["hide-tail"], [svgNode], options);
    img.style.height = makeEm(angleHeight);
    imgShift = inner2.depth + lineWeight + clearance;
  } else {
    if (/cancel/.test(label)) {
      if (!isSingleChar) {
        inner2.classes.push("cancel-pad");
      }
    } else if (label === "angl") {
      inner2.classes.push("anglpad");
    } else {
      inner2.classes.push("boxpad");
    }
    var topPad = 0;
    var bottomPad = 0;
    var ruleThickness = 0;
    if (/box/.test(label)) {
      ruleThickness = Math.max(options.fontMetrics().fboxrule, options.minRuleThickness);
      topPad = options.fontMetrics().fboxsep + (label === "colorbox" ? 0 : ruleThickness);
      bottomPad = topPad;
    } else if (label === "angl") {
      ruleThickness = Math.max(options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
      topPad = 4 * ruleThickness;
      bottomPad = Math.max(0, 0.25 - inner2.depth);
    } else {
      topPad = isSingleChar ? 0.2 : 0;
      bottomPad = topPad;
    }
    img = stretchy.encloseSpan(inner2, label, topPad, bottomPad, options);
    if (/fbox|boxed|fcolorbox/.test(label)) {
      img.style.borderStyle = "solid";
      img.style.borderWidth = makeEm(ruleThickness);
    } else if (label === "angl" && ruleThickness !== 0.049) {
      img.style.borderTopWidth = makeEm(ruleThickness);
      img.style.borderRightWidth = makeEm(ruleThickness);
    }
    imgShift = inner2.depth + bottomPad;
    if (group.backgroundColor) {
      img.style.backgroundColor = group.backgroundColor;
      if (group.borderColor) {
        img.style.borderColor = group.borderColor;
      }
    }
  }
  var vlist;
  if (group.backgroundColor) {
    vlist = buildCommon.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: img,
        shift: imgShift
      }, {
        type: "elem",
        elem: inner2,
        shift: 0
      }]
    }, options);
  } else {
    var classes = /cancel|phase/.test(label) ? ["svg-align"] : [];
    vlist = buildCommon.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: inner2,
        shift: 0
      }, {
        type: "elem",
        elem: img,
        shift: imgShift,
        wrapperClasses: classes
      }]
    }, options);
  }
  if (/cancel/.test(label)) {
    vlist.height = inner2.height;
    vlist.depth = inner2.depth;
  }
  if (/cancel/.test(label) && !isSingleChar) {
    return buildCommon.makeSpan(["mord", "cancel-lap"], [vlist], options);
  } else {
    return buildCommon.makeSpan(["mord"], [vlist], options);
  }
};
var mathmlBuilder$6 = (group, options) => {
  var fboxsep = 0;
  var node = new mathMLTree.MathNode(group.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [buildGroup2(group.body, options)]);
  switch (group.label) {
    case "\\cancel":
      node.setAttribute("notation", "updiagonalstrike");
      break;
    case "\\bcancel":
      node.setAttribute("notation", "downdiagonalstrike");
      break;
    case "\\phase":
      node.setAttribute("notation", "phasorangle");
      break;
    case "\\sout":
      node.setAttribute("notation", "horizontalstrike");
      break;
    case "\\fbox":
      node.setAttribute("notation", "box");
      break;
    case "\\angl":
      node.setAttribute("notation", "actuarial");
      break;
    case "\\fcolorbox":
    case "\\colorbox":
      fboxsep = options.fontMetrics().fboxsep * options.fontMetrics().ptPerEm;
      node.setAttribute("width", "+" + 2 * fboxsep + "pt");
      node.setAttribute("height", "+" + 2 * fboxsep + "pt");
      node.setAttribute("lspace", fboxsep + "pt");
      node.setAttribute("voffset", fboxsep + "pt");
      if (group.label === "\\fcolorbox") {
        var thk = Math.max(options.fontMetrics().fboxrule, options.minRuleThickness);
        node.setAttribute("style", "border: " + thk + "em solid " + String(group.borderColor));
      }
      break;
    case "\\xcancel":
      node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
      break;
  }
  if (group.backgroundColor) {
    node.setAttribute("mathbackground", group.backgroundColor);
  }
  return node;
};
defineFunction({
  type: "enclose",
  names: ["\\colorbox"],
  props: {
    numArgs: 2,
    allowedInText: true,
    argTypes: ["color", "text"]
  },
  handler(_ref, args, optArgs) {
    var {
      parser,
      funcName
    } = _ref;
    var color = assertNodeType(args[0], "color-token").color;
    var body = args[1];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      backgroundColor: color,
      body
    };
  },
  htmlBuilder: htmlBuilder$7,
  mathmlBuilder: mathmlBuilder$6
});
defineFunction({
  type: "enclose",
  names: ["\\fcolorbox"],
  props: {
    numArgs: 3,
    allowedInText: true,
    argTypes: ["color", "color", "text"]
  },
  handler(_ref2, args, optArgs) {
    var {
      parser,
      funcName
    } = _ref2;
    var borderColor = assertNodeType(args[0], "color-token").color;
    var backgroundColor = assertNodeType(args[1], "color-token").color;
    var body = args[2];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      backgroundColor,
      borderColor,
      body
    };
  },
  htmlBuilder: htmlBuilder$7,
  mathmlBuilder: mathmlBuilder$6
});
defineFunction({
  type: "enclose",
  names: ["\\fbox"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: true
  },
  handler(_ref3, args) {
    var {
      parser
    } = _ref3;
    return {
      type: "enclose",
      mode: parser.mode,
      label: "\\fbox",
      body: args[0]
    };
  }
});
defineFunction({
  type: "enclose",
  names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
  props: {
    numArgs: 1
  },
  handler(_ref4, args) {
    var {
      parser,
      funcName
    } = _ref4;
    var body = args[0];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      body
    };
  },
  htmlBuilder: htmlBuilder$7,
  mathmlBuilder: mathmlBuilder$6
});
defineFunction({
  type: "enclose",
  names: ["\\angl"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: false
  },
  handler(_ref5, args) {
    var {
      parser
    } = _ref5;
    return {
      type: "enclose",
      mode: parser.mode,
      label: "\\angl",
      body: args[0]
    };
  }
});
var _environments = {};
function defineEnvironment(_ref) {
  var {
    type,
    names,
    props,
    handler,
    htmlBuilder: htmlBuilder3,
    mathmlBuilder: mathmlBuilder3
  } = _ref;
  var data = {
    type,
    numArgs: props.numArgs || 0,
    allowedInText: false,
    numOptionalArgs: 0,
    handler
  };
  for (var i = 0; i < names.length; ++i) {
    _environments[names[i]] = data;
  }
  if (htmlBuilder3) {
    _htmlGroupBuilders[type] = htmlBuilder3;
  }
  if (mathmlBuilder3) {
    _mathmlGroupBuilders[type] = mathmlBuilder3;
  }
}
var _macros = {};
function defineMacro(name, body) {
  _macros[name] = body;
}
function getHLines(parser) {
  var hlineInfo = [];
  parser.consumeSpaces();
  var nxt = parser.fetch().text;
  if (nxt === "\\relax") {
    parser.consume();
    parser.consumeSpaces();
    nxt = parser.fetch().text;
  }
  while (nxt === "\\hline" || nxt === "\\hdashline") {
    parser.consume();
    hlineInfo.push(nxt === "\\hdashline");
    parser.consumeSpaces();
    nxt = parser.fetch().text;
  }
  return hlineInfo;
}
var validateAmsEnvironmentContext = context => {
  var settings = context.parser.settings;
  if (!settings.displayMode) {
    throw new ParseError("{" + context.envName + "} can be used only in display mode.");
  }
};
function getAutoTag(name) {
  if (name.indexOf("ed") === -1) {
    return name.indexOf("*") === -1;
  }
}
function parseArray(parser, _ref, style) {
  var {
    hskipBeforeAndAfter,
    addJot,
    cols,
    arraystretch,
    colSeparationType,
    autoTag,
    singleRow,
    emptySingleRow,
    maxNumCols,
    leqno
  } = _ref;
  parser.gullet.beginGroup();
  if (!singleRow) {
    parser.gullet.macros.set("\\cr", "\\\\\\relax");
  }
  if (!arraystretch) {
    var stretch = parser.gullet.expandMacroAsText("\\arraystretch");
    if (stretch == null) {
      arraystretch = 1;
    } else {
      arraystretch = parseFloat(stretch);
      if (!arraystretch || arraystretch < 0) {
        throw new ParseError("Invalid \\arraystretch: " + stretch);
      }
    }
  }
  parser.gullet.beginGroup();
  var row = [];
  var body = [row];
  var rowGaps = [];
  var hLinesBeforeRow = [];
  var tags = autoTag != null ? [] : void 0;
  function beginRow() {
    if (autoTag) {
      parser.gullet.macros.set("\\@eqnsw", "1", true);
    }
  }
  function endRow() {
    if (tags) {
      if (parser.gullet.macros.get("\\df@tag")) {
        tags.push(parser.subparse([new Token("\\df@tag")]));
        parser.gullet.macros.set("\\df@tag", void 0, true);
      } else {
        tags.push(Boolean(autoTag) && parser.gullet.macros.get("\\@eqnsw") === "1");
      }
    }
  }
  beginRow();
  hLinesBeforeRow.push(getHLines(parser));
  while (true) {
    var cell = parser.parseExpression(false, singleRow ? "\\end" : "\\\\");
    parser.gullet.endGroup();
    parser.gullet.beginGroup();
    cell = {
      type: "ordgroup",
      mode: parser.mode,
      body: cell
    };
    if (style) {
      cell = {
        type: "styling",
        mode: parser.mode,
        style,
        body: [cell]
      };
    }
    row.push(cell);
    var next = parser.fetch().text;
    if (next === "&") {
      if (maxNumCols && row.length === maxNumCols) {
        if (singleRow || colSeparationType) {
          throw new ParseError("Too many tab characters: &", parser.nextToken);
        } else {
          parser.settings.reportNonstrict("textEnv", "Too few columns specified in the {array} column argument.");
        }
      }
      parser.consume();
    } else if (next === "\\end") {
      endRow();
      if (row.length === 1 && cell.type === "styling" && cell.body[0].body.length === 0 && (body.length > 1 || !emptySingleRow)) {
        body.pop();
      }
      if (hLinesBeforeRow.length < body.length + 1) {
        hLinesBeforeRow.push([]);
      }
      break;
    } else if (next === "\\\\") {
      parser.consume();
      var size = void 0;
      if (parser.gullet.future().text !== " ") {
        size = parser.parseSizeGroup(true);
      }
      rowGaps.push(size ? size.value : null);
      endRow();
      hLinesBeforeRow.push(getHLines(parser));
      row = [];
      body.push(row);
      beginRow();
    } else {
      throw new ParseError("Expected & or \\\\ or \\cr or \\end", parser.nextToken);
    }
  }
  parser.gullet.endGroup();
  parser.gullet.endGroup();
  return {
    type: "array",
    mode: parser.mode,
    addJot,
    arraystretch,
    body,
    cols,
    rowGaps,
    hskipBeforeAndAfter,
    hLinesBeforeRow,
    colSeparationType,
    tags,
    leqno
  };
}
function dCellStyle(envName) {
  if (envName.slice(0, 1) === "d") {
    return "display";
  } else {
    return "text";
  }
}
var htmlBuilder$6 = function htmlBuilder(group, options) {
  var r;
  var c;
  var nr = group.body.length;
  var hLinesBeforeRow = group.hLinesBeforeRow;
  var nc = 0;
  var body = new Array(nr);
  var hlines = [];
  var ruleThickness = Math.max(options.fontMetrics().arrayRuleWidth, options.minRuleThickness);
  var pt = 1 / options.fontMetrics().ptPerEm;
  var arraycolsep = 5 * pt;
  if (group.colSeparationType && group.colSeparationType === "small") {
    var localMultiplier = options.havingStyle(Style$1.SCRIPT).sizeMultiplier;
    arraycolsep = 0.2778 * (localMultiplier / options.sizeMultiplier);
  }
  var baselineskip = group.colSeparationType === "CD" ? calculateSize({
    number: 3,
    unit: "ex"
  }, options) : 12 * pt;
  var jot = 3 * pt;
  var arrayskip = group.arraystretch * baselineskip;
  var arstrutHeight = 0.7 * arrayskip;
  var arstrutDepth = 0.3 * arrayskip;
  var totalHeight = 0;
  function setHLinePos(hlinesInGap) {
    for (var i = 0; i < hlinesInGap.length; ++i) {
      if (i > 0) {
        totalHeight += 0.25;
      }
      hlines.push({
        pos: totalHeight,
        isDashed: hlinesInGap[i]
      });
    }
  }
  setHLinePos(hLinesBeforeRow[0]);
  for (r = 0; r < group.body.length; ++r) {
    var inrow = group.body[r];
    var height = arstrutHeight;
    var depth = arstrutDepth;
    if (nc < inrow.length) {
      nc = inrow.length;
    }
    var outrow = new Array(inrow.length);
    for (c = 0; c < inrow.length; ++c) {
      var elt = buildGroup$1(inrow[c], options);
      if (depth < elt.depth) {
        depth = elt.depth;
      }
      if (height < elt.height) {
        height = elt.height;
      }
      outrow[c] = elt;
    }
    var rowGap = group.rowGaps[r];
    var gap = 0;
    if (rowGap) {
      gap = calculateSize(rowGap, options);
      if (gap > 0) {
        gap += arstrutDepth;
        if (depth < gap) {
          depth = gap;
        }
        gap = 0;
      }
    }
    if (group.addJot) {
      depth += jot;
    }
    outrow.height = height;
    outrow.depth = depth;
    totalHeight += height;
    outrow.pos = totalHeight;
    totalHeight += depth + gap;
    body[r] = outrow;
    setHLinePos(hLinesBeforeRow[r + 1]);
  }
  var offset = totalHeight / 2 + options.fontMetrics().axisHeight;
  var colDescriptions = group.cols || [];
  var cols = [];
  var colSep;
  var colDescrNum;
  var tagSpans = [];
  if (group.tags && group.tags.some(tag2 => tag2)) {
    for (r = 0; r < nr; ++r) {
      var rw = body[r];
      var shift = rw.pos - offset;
      var tag = group.tags[r];
      var tagSpan = void 0;
      if (tag === true) {
        tagSpan = buildCommon.makeSpan(["eqn-num"], [], options);
      } else if (tag === false) {
        tagSpan = buildCommon.makeSpan([], [], options);
      } else {
        tagSpan = buildCommon.makeSpan([], buildExpression$1(tag, options, true), options);
      }
      tagSpan.depth = rw.depth;
      tagSpan.height = rw.height;
      tagSpans.push({
        type: "elem",
        elem: tagSpan,
        shift
      });
    }
  }
  for (c = 0, colDescrNum = 0; c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {
    var colDescr = colDescriptions[colDescrNum] || {};
    var firstSeparator = true;
    while (colDescr.type === "separator") {
      if (!firstSeparator) {
        colSep = buildCommon.makeSpan(["arraycolsep"], []);
        colSep.style.width = makeEm(options.fontMetrics().doubleRuleSep);
        cols.push(colSep);
      }
      if (colDescr.separator === "|" || colDescr.separator === ":") {
        var lineType = colDescr.separator === "|" ? "solid" : "dashed";
        var separator = buildCommon.makeSpan(["vertical-separator"], [], options);
        separator.style.height = makeEm(totalHeight);
        separator.style.borderRightWidth = makeEm(ruleThickness);
        separator.style.borderRightStyle = lineType;
        separator.style.margin = "0 " + makeEm(-ruleThickness / 2);
        var _shift = totalHeight - offset;
        if (_shift) {
          separator.style.verticalAlign = makeEm(-_shift);
        }
        cols.push(separator);
      } else {
        throw new ParseError("Invalid separator type: " + colDescr.separator);
      }
      colDescrNum++;
      colDescr = colDescriptions[colDescrNum] || {};
      firstSeparator = false;
    }
    if (c >= nc) {
      continue;
    }
    var sepwidth = void 0;
    if (c > 0 || group.hskipBeforeAndAfter) {
      sepwidth = utils.deflt(colDescr.pregap, arraycolsep);
      if (sepwidth !== 0) {
        colSep = buildCommon.makeSpan(["arraycolsep"], []);
        colSep.style.width = makeEm(sepwidth);
        cols.push(colSep);
      }
    }
    var col = [];
    for (r = 0; r < nr; ++r) {
      var row = body[r];
      var elem = row[c];
      if (!elem) {
        continue;
      }
      var _shift2 = row.pos - offset;
      elem.depth = row.depth;
      elem.height = row.height;
      col.push({
        type: "elem",
        elem,
        shift: _shift2
      });
    }
    col = buildCommon.makeVList({
      positionType: "individualShift",
      children: col
    }, options);
    col = buildCommon.makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
    cols.push(col);
    if (c < nc - 1 || group.hskipBeforeAndAfter) {
      sepwidth = utils.deflt(colDescr.postgap, arraycolsep);
      if (sepwidth !== 0) {
        colSep = buildCommon.makeSpan(["arraycolsep"], []);
        colSep.style.width = makeEm(sepwidth);
        cols.push(colSep);
      }
    }
  }
  body = buildCommon.makeSpan(["mtable"], cols);
  if (hlines.length > 0) {
    var line = buildCommon.makeLineSpan("hline", options, ruleThickness);
    var dashes = buildCommon.makeLineSpan("hdashline", options, ruleThickness);
    var vListElems = [{
      type: "elem",
      elem: body,
      shift: 0
    }];
    while (hlines.length > 0) {
      var hline = hlines.pop();
      var lineShift = hline.pos - offset;
      if (hline.isDashed) {
        vListElems.push({
          type: "elem",
          elem: dashes,
          shift: lineShift
        });
      } else {
        vListElems.push({
          type: "elem",
          elem: line,
          shift: lineShift
        });
      }
    }
    body = buildCommon.makeVList({
      positionType: "individualShift",
      children: vListElems
    }, options);
  }
  if (tagSpans.length === 0) {
    return buildCommon.makeSpan(["mord"], [body], options);
  } else {
    var eqnNumCol = buildCommon.makeVList({
      positionType: "individualShift",
      children: tagSpans
    }, options);
    eqnNumCol = buildCommon.makeSpan(["tag"], [eqnNumCol], options);
    return buildCommon.makeFragment([body, eqnNumCol]);
  }
};
var alignMap = {
  c: "center ",
  l: "left ",
  r: "right "
};
var mathmlBuilder$5 = function mathmlBuilder(group, options) {
  var tbl = [];
  var glue = new mathMLTree.MathNode("mtd", [], ["mtr-glue"]);
  var tag = new mathMLTree.MathNode("mtd", [], ["mml-eqn-num"]);
  for (var i = 0; i < group.body.length; i++) {
    var rw = group.body[i];
    var row = [];
    for (var j = 0; j < rw.length; j++) {
      row.push(new mathMLTree.MathNode("mtd", [buildGroup2(rw[j], options)]));
    }
    if (group.tags && group.tags[i]) {
      row.unshift(glue);
      row.push(glue);
      if (group.leqno) {
        row.unshift(tag);
      } else {
        row.push(tag);
      }
    }
    tbl.push(new mathMLTree.MathNode("mtr", row));
  }
  var table = new mathMLTree.MathNode("mtable", tbl);
  var gap = group.arraystretch === 0.5 ? 0.1 : 0.16 + group.arraystretch - 1 + (group.addJot ? 0.09 : 0);
  table.setAttribute("rowspacing", makeEm(gap));
  var menclose = "";
  var align = "";
  if (group.cols && group.cols.length > 0) {
    var cols = group.cols;
    var columnLines = "";
    var prevTypeWasAlign = false;
    var iStart = 0;
    var iEnd = cols.length;
    if (cols[0].type === "separator") {
      menclose += "top ";
      iStart = 1;
    }
    if (cols[cols.length - 1].type === "separator") {
      menclose += "bottom ";
      iEnd -= 1;
    }
    for (var _i = iStart; _i < iEnd; _i++) {
      if (cols[_i].type === "align") {
        align += alignMap[cols[_i].align];
        if (prevTypeWasAlign) {
          columnLines += "none ";
        }
        prevTypeWasAlign = true;
      } else if (cols[_i].type === "separator") {
        if (prevTypeWasAlign) {
          columnLines += cols[_i].separator === "|" ? "solid " : "dashed ";
          prevTypeWasAlign = false;
        }
      }
    }
    table.setAttribute("columnalign", align.trim());
    if (/[sd]/.test(columnLines)) {
      table.setAttribute("columnlines", columnLines.trim());
    }
  }
  if (group.colSeparationType === "align") {
    var _cols = group.cols || [];
    var spacing2 = "";
    for (var _i2 = 1; _i2 < _cols.length; _i2++) {
      spacing2 += _i2 % 2 ? "0em " : "1em ";
    }
    table.setAttribute("columnspacing", spacing2.trim());
  } else if (group.colSeparationType === "alignat" || group.colSeparationType === "gather") {
    table.setAttribute("columnspacing", "0em");
  } else if (group.colSeparationType === "small") {
    table.setAttribute("columnspacing", "0.2778em");
  } else if (group.colSeparationType === "CD") {
    table.setAttribute("columnspacing", "0.5em");
  } else {
    table.setAttribute("columnspacing", "1em");
  }
  var rowLines = "";
  var hlines = group.hLinesBeforeRow;
  menclose += hlines[0].length > 0 ? "left " : "";
  menclose += hlines[hlines.length - 1].length > 0 ? "right " : "";
  for (var _i3 = 1; _i3 < hlines.length - 1; _i3++) {
    rowLines += hlines[_i3].length === 0 ? "none " : hlines[_i3][0] ? "dashed " : "solid ";
  }
  if (/[sd]/.test(rowLines)) {
    table.setAttribute("rowlines", rowLines.trim());
  }
  if (menclose !== "") {
    table = new mathMLTree.MathNode("menclose", [table]);
    table.setAttribute("notation", menclose.trim());
  }
  if (group.arraystretch && group.arraystretch < 1) {
    table = new mathMLTree.MathNode("mstyle", [table]);
    table.setAttribute("scriptlevel", "1");
  }
  return table;
};
var alignedHandler = function alignedHandler2(context, args) {
  if (context.envName.indexOf("ed") === -1) {
    validateAmsEnvironmentContext(context);
  }
  var cols = [];
  var separationType = context.envName.indexOf("at") > -1 ? "alignat" : "align";
  var isSplit = context.envName === "split";
  var res = parseArray(context.parser, {
    cols,
    addJot: true,
    autoTag: isSplit ? void 0 : getAutoTag(context.envName),
    emptySingleRow: true,
    colSeparationType: separationType,
    maxNumCols: isSplit ? 2 : void 0,
    leqno: context.parser.settings.leqno
  }, "display");
  var numMaths;
  var numCols = 0;
  var emptyGroup = {
    type: "ordgroup",
    mode: context.mode,
    body: []
  };
  if (args[0] && args[0].type === "ordgroup") {
    var arg0 = "";
    for (var i = 0; i < args[0].body.length; i++) {
      var textord2 = assertNodeType(args[0].body[i], "textord");
      arg0 += textord2.text;
    }
    numMaths = Number(arg0);
    numCols = numMaths * 2;
  }
  var isAligned = !numCols;
  res.body.forEach(function (row) {
    for (var _i4 = 1; _i4 < row.length; _i4 += 2) {
      var styling = assertNodeType(row[_i4], "styling");
      var ordgroup = assertNodeType(styling.body[0], "ordgroup");
      ordgroup.body.unshift(emptyGroup);
    }
    if (!isAligned) {
      var curMaths = row.length / 2;
      if (numMaths < curMaths) {
        throw new ParseError("Too many math in a row: " + ("expected " + numMaths + ", but got " + curMaths), row[0]);
      }
    } else if (numCols < row.length) {
      numCols = row.length;
    }
  });
  for (var _i5 = 0; _i5 < numCols; ++_i5) {
    var align = "r";
    var pregap = 0;
    if (_i5 % 2 === 1) {
      align = "l";
    } else if (_i5 > 0 && isAligned) {
      pregap = 1;
    }
    cols[_i5] = {
      type: "align",
      align,
      pregap,
      postgap: 0
    };
  }
  res.colSeparationType = isAligned ? "align" : "alignat";
  return res;
};
defineEnvironment({
  type: "array",
  names: ["array", "darray"],
  props: {
    numArgs: 1
  },
  handler(context, args) {
    var symNode = checkSymbolNodeType(args[0]);
    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
    var cols = colalign.map(function (nde) {
      var node = assertSymbolNodeType(nde);
      var ca = node.text;
      if ("lcr".indexOf(ca) !== -1) {
        return {
          type: "align",
          align: ca
        };
      } else if (ca === "|") {
        return {
          type: "separator",
          separator: "|"
        };
      } else if (ca === ":") {
        return {
          type: "separator",
          separator: ":"
        };
      }
      throw new ParseError("Unknown column alignment: " + ca, nde);
    });
    var res = {
      cols,
      hskipBeforeAndAfter: true,
      maxNumCols: cols.length
    };
    return parseArray(context.parser, res, dCellStyle(context.envName));
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
  props: {
    numArgs: 0
  },
  handler(context) {
    var delimiters2 = {
      "matrix": null,
      "pmatrix": ["(", ")"],
      "bmatrix": ["[", "]"],
      "Bmatrix": ["\\{", "\\}"],
      "vmatrix": ["|", "|"],
      "Vmatrix": ["\\Vert", "\\Vert"]
    }[context.envName.replace("*", "")];
    var colAlign = "c";
    var payload = {
      hskipBeforeAndAfter: false,
      cols: [{
        type: "align",
        align: colAlign
      }]
    };
    if (context.envName.charAt(context.envName.length - 1) === "*") {
      var parser = context.parser;
      parser.consumeSpaces();
      if (parser.fetch().text === "[") {
        parser.consume();
        parser.consumeSpaces();
        colAlign = parser.fetch().text;
        if ("lcr".indexOf(colAlign) === -1) {
          throw new ParseError("Expected l or c or r", parser.nextToken);
        }
        parser.consume();
        parser.consumeSpaces();
        parser.expect("]");
        parser.consume();
        payload.cols = [{
          type: "align",
          align: colAlign
        }];
      }
    }
    var res = parseArray(context.parser, payload, dCellStyle(context.envName));
    var numCols = Math.max(0, ...res.body.map(row => row.length));
    res.cols = new Array(numCols).fill({
      type: "align",
      align: colAlign
    });
    return delimiters2 ? {
      type: "leftright",
      mode: context.mode,
      body: [res],
      left: delimiters2[0],
      right: delimiters2[1],
      rightColor: void 0
    } : res;
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["smallmatrix"],
  props: {
    numArgs: 0
  },
  handler(context) {
    var payload = {
      arraystretch: 0.5
    };
    var res = parseArray(context.parser, payload, "script");
    res.colSeparationType = "small";
    return res;
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["subarray"],
  props: {
    numArgs: 1
  },
  handler(context, args) {
    var symNode = checkSymbolNodeType(args[0]);
    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
    var cols = colalign.map(function (nde) {
      var node = assertSymbolNodeType(nde);
      var ca = node.text;
      if ("lc".indexOf(ca) !== -1) {
        return {
          type: "align",
          align: ca
        };
      }
      throw new ParseError("Unknown column alignment: " + ca, nde);
    });
    if (cols.length > 1) {
      throw new ParseError("{subarray} can contain only one column");
    }
    var res = {
      cols,
      hskipBeforeAndAfter: false,
      arraystretch: 0.5
    };
    res = parseArray(context.parser, res, "script");
    if (res.body.length > 0 && res.body[0].length > 1) {
      throw new ParseError("{subarray} can contain only one column");
    }
    return res;
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["cases", "dcases", "rcases", "drcases"],
  props: {
    numArgs: 0
  },
  handler(context) {
    var payload = {
      arraystretch: 1.2,
      cols: [{
        type: "align",
        align: "l",
        pregap: 0,
        postgap: 1
      }, {
        type: "align",
        align: "l",
        pregap: 0,
        postgap: 0
      }]
    };
    var res = parseArray(context.parser, payload, dCellStyle(context.envName));
    return {
      type: "leftright",
      mode: context.mode,
      body: [res],
      left: context.envName.indexOf("r") > -1 ? "." : "\\{",
      right: context.envName.indexOf("r") > -1 ? "\\}" : ".",
      rightColor: void 0
    };
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["align", "align*", "aligned", "split"],
  props: {
    numArgs: 0
  },
  handler: alignedHandler,
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["gathered", "gather", "gather*"],
  props: {
    numArgs: 0
  },
  handler(context) {
    if (utils.contains(["gather", "gather*"], context.envName)) {
      validateAmsEnvironmentContext(context);
    }
    var res = {
      cols: [{
        type: "align",
        align: "c"
      }],
      addJot: true,
      colSeparationType: "gather",
      autoTag: getAutoTag(context.envName),
      emptySingleRow: true,
      leqno: context.parser.settings.leqno
    };
    return parseArray(context.parser, res, "display");
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["alignat", "alignat*", "alignedat"],
  props: {
    numArgs: 1
  },
  handler: alignedHandler,
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["equation", "equation*"],
  props: {
    numArgs: 0
  },
  handler(context) {
    validateAmsEnvironmentContext(context);
    var res = {
      autoTag: getAutoTag(context.envName),
      emptySingleRow: true,
      singleRow: true,
      maxNumCols: 1,
      leqno: context.parser.settings.leqno
    };
    return parseArray(context.parser, res, "display");
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["CD"],
  props: {
    numArgs: 0
  },
  handler(context) {
    validateAmsEnvironmentContext(context);
    return parseCD(context.parser);
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineMacro("\\nonumber", "\\gdef\\@eqnsw{0}");
defineMacro("\\notag", "\\nonumber");
defineFunction({
  type: "text",
  names: ["\\hline", "\\hdashline"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: true
  },
  handler(context, args) {
    throw new ParseError(context.funcName + " valid only within array environment");
  }
});
var environments = _environments;
defineFunction({
  type: "environment",
  names: ["\\begin", "\\end"],
  props: {
    numArgs: 1,
    argTypes: ["text"]
  },
  handler(_ref, args) {
    var {
      parser,
      funcName
    } = _ref;
    var nameGroup = args[0];
    if (nameGroup.type !== "ordgroup") {
      throw new ParseError("Invalid environment name", nameGroup);
    }
    var envName = "";
    for (var i = 0; i < nameGroup.body.length; ++i) {
      envName += assertNodeType(nameGroup.body[i], "textord").text;
    }
    if (funcName === "\\begin") {
      if (!environments.hasOwnProperty(envName)) {
        throw new ParseError("No such environment: " + envName, nameGroup);
      }
      var env = environments[envName];
      var {
        args: _args,
        optArgs
      } = parser.parseArguments("\\begin{" + envName + "}", env);
      var context = {
        mode: parser.mode,
        envName,
        parser
      };
      var result = env.handler(context, _args, optArgs);
      parser.expect("\\end", false);
      var endNameToken = parser.nextToken;
      var end = assertNodeType(parser.parseFunction(), "environment");
      if (end.name !== envName) {
        throw new ParseError("Mismatch: \\begin{" + envName + "} matched by \\end{" + end.name + "}", endNameToken);
      }
      return result;
    }
    return {
      type: "environment",
      mode: parser.mode,
      name: envName,
      nameGroup
    };
  }
});
var htmlBuilder$5 = (group, options) => {
  var font = group.font;
  var newOptions = options.withFont(font);
  return buildGroup$1(group.body, newOptions);
};
var mathmlBuilder$4 = (group, options) => {
  var font = group.font;
  var newOptions = options.withFont(font);
  return buildGroup2(group.body, newOptions);
};
var fontAliases = {
  "\\Bbb": "\\mathbb",
  "\\bold": "\\mathbf",
  "\\frak": "\\mathfrak",
  "\\bm": "\\boldsymbol"
};
defineFunction({
  type: "font",
  names: ["\\mathrm", "\\mathit", "\\mathbf", "\\mathnormal", "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf", "\\mathtt", "\\Bbb", "\\bold", "\\frak"],
  props: {
    numArgs: 1,
    allowedInArgument: true
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName
    } = _ref;
    var body = normalizeArgument(args[0]);
    var func = funcName;
    if (func in fontAliases) {
      func = fontAliases[func];
    }
    return {
      type: "font",
      mode: parser.mode,
      font: func.slice(1),
      body
    };
  },
  htmlBuilder: htmlBuilder$5,
  mathmlBuilder: mathmlBuilder$4
});
defineFunction({
  type: "mclass",
  names: ["\\boldsymbol", "\\bm"],
  props: {
    numArgs: 1
  },
  handler: (_ref2, args) => {
    var {
      parser
    } = _ref2;
    var body = args[0];
    var isCharacterBox3 = utils.isCharacterBox(body);
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: binrelClass(body),
      body: [{
        type: "font",
        mode: parser.mode,
        font: "boldsymbol",
        body
      }],
      isCharacterBox: isCharacterBox3
    };
  }
});
defineFunction({
  type: "font",
  names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: (_ref3, args) => {
    var {
      parser,
      funcName,
      breakOnTokenText
    } = _ref3;
    var {
      mode
    } = parser;
    var body = parser.parseExpression(true, breakOnTokenText);
    var style = "math" + funcName.slice(1);
    return {
      type: "font",
      mode,
      font: style,
      body: {
        type: "ordgroup",
        mode: parser.mode,
        body
      }
    };
  },
  htmlBuilder: htmlBuilder$5,
  mathmlBuilder: mathmlBuilder$4
});
var adjustStyle = (size, originalStyle) => {
  var style = originalStyle;
  if (size === "display") {
    style = style.id >= Style$1.SCRIPT.id ? style.text() : Style$1.DISPLAY;
  } else if (size === "text" && style.size === Style$1.DISPLAY.size) {
    style = Style$1.TEXT;
  } else if (size === "script") {
    style = Style$1.SCRIPT;
  } else if (size === "scriptscript") {
    style = Style$1.SCRIPTSCRIPT;
  }
  return style;
};
var htmlBuilder$4 = (group, options) => {
  var style = adjustStyle(group.size, options.style);
  var nstyle = style.fracNum();
  var dstyle = style.fracDen();
  var newOptions;
  newOptions = options.havingStyle(nstyle);
  var numerm = buildGroup$1(group.numer, newOptions, options);
  if (group.continued) {
    var hStrut = 8.5 / options.fontMetrics().ptPerEm;
    var dStrut = 3.5 / options.fontMetrics().ptPerEm;
    numerm.height = numerm.height < hStrut ? hStrut : numerm.height;
    numerm.depth = numerm.depth < dStrut ? dStrut : numerm.depth;
  }
  newOptions = options.havingStyle(dstyle);
  var denomm = buildGroup$1(group.denom, newOptions, options);
  var rule;
  var ruleWidth;
  var ruleSpacing;
  if (group.hasBarLine) {
    if (group.barSize) {
      ruleWidth = calculateSize(group.barSize, options);
      rule = buildCommon.makeLineSpan("frac-line", options, ruleWidth);
    } else {
      rule = buildCommon.makeLineSpan("frac-line", options);
    }
    ruleWidth = rule.height;
    ruleSpacing = rule.height;
  } else {
    rule = null;
    ruleWidth = 0;
    ruleSpacing = options.fontMetrics().defaultRuleThickness;
  }
  var numShift;
  var clearance;
  var denomShift;
  if (style.size === Style$1.DISPLAY.size || group.size === "display") {
    numShift = options.fontMetrics().num1;
    if (ruleWidth > 0) {
      clearance = 3 * ruleSpacing;
    } else {
      clearance = 7 * ruleSpacing;
    }
    denomShift = options.fontMetrics().denom1;
  } else {
    if (ruleWidth > 0) {
      numShift = options.fontMetrics().num2;
      clearance = ruleSpacing;
    } else {
      numShift = options.fontMetrics().num3;
      clearance = 3 * ruleSpacing;
    }
    denomShift = options.fontMetrics().denom2;
  }
  var frac;
  if (!rule) {
    var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);
    if (candidateClearance < clearance) {
      numShift += 0.5 * (clearance - candidateClearance);
      denomShift += 0.5 * (clearance - candidateClearance);
    }
    frac = buildCommon.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: denomm,
        shift: denomShift
      }, {
        type: "elem",
        elem: numerm,
        shift: -numShift
      }]
    }, options);
  } else {
    var axisHeight = options.fontMetrics().axisHeight;
    if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
      numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
    }
    if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
      denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
    }
    var midShift = -(axisHeight - 0.5 * ruleWidth);
    frac = buildCommon.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: denomm,
        shift: denomShift
      }, {
        type: "elem",
        elem: rule,
        shift: midShift
      }, {
        type: "elem",
        elem: numerm,
        shift: -numShift
      }]
    }, options);
  }
  newOptions = options.havingStyle(style);
  frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
  frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier;
  var delimSize;
  if (style.size === Style$1.DISPLAY.size) {
    delimSize = options.fontMetrics().delim1;
  } else if (style.size === Style$1.SCRIPTSCRIPT.size) {
    delimSize = options.havingStyle(Style$1.SCRIPT).fontMetrics().delim2;
  } else {
    delimSize = options.fontMetrics().delim2;
  }
  var leftDelim;
  var rightDelim;
  if (group.leftDelim == null) {
    leftDelim = makeNullDelimiter(options, ["mopen"]);
  } else {
    leftDelim = delimiter.customSizedDelim(group.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
  }
  if (group.continued) {
    rightDelim = buildCommon.makeSpan([]);
  } else if (group.rightDelim == null) {
    rightDelim = makeNullDelimiter(options, ["mclose"]);
  } else {
    rightDelim = delimiter.customSizedDelim(group.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
  }
  return buildCommon.makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, buildCommon.makeSpan(["mfrac"], [frac]), rightDelim], options);
};
var mathmlBuilder$3 = (group, options) => {
  var node = new mathMLTree.MathNode("mfrac", [buildGroup2(group.numer, options), buildGroup2(group.denom, options)]);
  if (!group.hasBarLine) {
    node.setAttribute("linethickness", "0px");
  } else if (group.barSize) {
    var ruleWidth = calculateSize(group.barSize, options);
    node.setAttribute("linethickness", makeEm(ruleWidth));
  }
  var style = adjustStyle(group.size, options.style);
  if (style.size !== options.style.size) {
    node = new mathMLTree.MathNode("mstyle", [node]);
    var isDisplay = style.size === Style$1.DISPLAY.size ? "true" : "false";
    node.setAttribute("displaystyle", isDisplay);
    node.setAttribute("scriptlevel", "0");
  }
  if (group.leftDelim != null || group.rightDelim != null) {
    var withDelims = [];
    if (group.leftDelim != null) {
      var leftOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.leftDelim.replace("\\", ""))]);
      leftOp.setAttribute("fence", "true");
      withDelims.push(leftOp);
    }
    withDelims.push(node);
    if (group.rightDelim != null) {
      var rightOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.rightDelim.replace("\\", ""))]);
      rightOp.setAttribute("fence", "true");
      withDelims.push(rightOp);
    }
    return makeRow(withDelims);
  }
  return node;
};
defineFunction({
  type: "genfrac",
  names: ["\\dfrac", "\\frac", "\\tfrac", "\\dbinom", "\\binom", "\\tbinom", "\\\\atopfrac", "\\\\bracefrac", "\\\\brackfrac"],
  props: {
    numArgs: 2,
    allowedInArgument: true
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName
    } = _ref;
    var numer = args[0];
    var denom = args[1];
    var hasBarLine;
    var leftDelim = null;
    var rightDelim = null;
    var size = "auto";
    switch (funcName) {
      case "\\dfrac":
      case "\\frac":
      case "\\tfrac":
        hasBarLine = true;
        break;
      case "\\\\atopfrac":
        hasBarLine = false;
        break;
      case "\\dbinom":
      case "\\binom":
      case "\\tbinom":
        hasBarLine = false;
        leftDelim = "(";
        rightDelim = ")";
        break;
      case "\\\\bracefrac":
        hasBarLine = false;
        leftDelim = "\\{";
        rightDelim = "\\}";
        break;
      case "\\\\brackfrac":
        hasBarLine = false;
        leftDelim = "[";
        rightDelim = "]";
        break;
      default:
        throw new Error("Unrecognized genfrac command");
    }
    switch (funcName) {
      case "\\dfrac":
      case "\\dbinom":
        size = "display";
        break;
      case "\\tfrac":
      case "\\tbinom":
        size = "text";
        break;
    }
    return {
      type: "genfrac",
      mode: parser.mode,
      continued: false,
      numer,
      denom,
      hasBarLine,
      leftDelim,
      rightDelim,
      size,
      barSize: null
    };
  },
  htmlBuilder: htmlBuilder$4,
  mathmlBuilder: mathmlBuilder$3
});
defineFunction({
  type: "genfrac",
  names: ["\\cfrac"],
  props: {
    numArgs: 2
  },
  handler: (_ref2, args) => {
    var {
      parser,
      funcName
    } = _ref2;
    var numer = args[0];
    var denom = args[1];
    return {
      type: "genfrac",
      mode: parser.mode,
      continued: true,
      numer,
      denom,
      hasBarLine: true,
      leftDelim: null,
      rightDelim: null,
      size: "display",
      barSize: null
    };
  }
});
defineFunction({
  type: "infix",
  names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
  props: {
    numArgs: 0,
    infix: true
  },
  handler(_ref3) {
    var {
      parser,
      funcName,
      token
    } = _ref3;
    var replaceWith;
    switch (funcName) {
      case "\\over":
        replaceWith = "\\frac";
        break;
      case "\\choose":
        replaceWith = "\\binom";
        break;
      case "\\atop":
        replaceWith = "\\\\atopfrac";
        break;
      case "\\brace":
        replaceWith = "\\\\bracefrac";
        break;
      case "\\brack":
        replaceWith = "\\\\brackfrac";
        break;
      default:
        throw new Error("Unrecognized infix genfrac command");
    }
    return {
      type: "infix",
      mode: parser.mode,
      replaceWith,
      token
    };
  }
});
var stylArray = ["display", "text", "script", "scriptscript"];
var delimFromValue = function delimFromValue2(delimString) {
  var delim = null;
  if (delimString.length > 0) {
    delim = delimString;
    delim = delim === "." ? null : delim;
  }
  return delim;
};
defineFunction({
  type: "genfrac",
  names: ["\\genfrac"],
  props: {
    numArgs: 6,
    allowedInArgument: true,
    argTypes: ["math", "math", "size", "text", "math", "math"]
  },
  handler(_ref4, args) {
    var {
      parser
    } = _ref4;
    var numer = args[4];
    var denom = args[5];
    var leftNode = normalizeArgument(args[0]);
    var leftDelim = leftNode.type === "atom" && leftNode.family === "open" ? delimFromValue(leftNode.text) : null;
    var rightNode = normalizeArgument(args[1]);
    var rightDelim = rightNode.type === "atom" && rightNode.family === "close" ? delimFromValue(rightNode.text) : null;
    var barNode = assertNodeType(args[2], "size");
    var hasBarLine;
    var barSize = null;
    if (barNode.isBlank) {
      hasBarLine = true;
    } else {
      barSize = barNode.value;
      hasBarLine = barSize.number > 0;
    }
    var size = "auto";
    var styl = args[3];
    if (styl.type === "ordgroup") {
      if (styl.body.length > 0) {
        var textOrd = assertNodeType(styl.body[0], "textord");
        size = stylArray[Number(textOrd.text)];
      }
    } else {
      styl = assertNodeType(styl, "textord");
      size = stylArray[Number(styl.text)];
    }
    return {
      type: "genfrac",
      mode: parser.mode,
      numer,
      denom,
      continued: false,
      hasBarLine,
      barSize,
      leftDelim,
      rightDelim,
      size
    };
  },
  htmlBuilder: htmlBuilder$4,
  mathmlBuilder: mathmlBuilder$3
});
defineFunction({
  type: "infix",
  names: ["\\above"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    infix: true
  },
  handler(_ref5, args) {
    var {
      parser,
      funcName,
      token
    } = _ref5;
    return {
      type: "infix",
      mode: parser.mode,
      replaceWith: "\\\\abovefrac",
      size: assertNodeType(args[0], "size").value,
      token
    };
  }
});
defineFunction({
  type: "genfrac",
  names: ["\\\\abovefrac"],
  props: {
    numArgs: 3,
    argTypes: ["math", "size", "math"]
  },
  handler: (_ref6, args) => {
    var {
      parser,
      funcName
    } = _ref6;
    var numer = args[0];
    var barSize = assert(assertNodeType(args[1], "infix").size);
    var denom = args[2];
    var hasBarLine = barSize.number > 0;
    return {
      type: "genfrac",
      mode: parser.mode,
      numer,
      denom,
      continued: false,
      hasBarLine,
      barSize,
      leftDelim: null,
      rightDelim: null,
      size: "auto"
    };
  },
  htmlBuilder: htmlBuilder$4,
  mathmlBuilder: mathmlBuilder$3
});
var htmlBuilder$3 = (grp, options) => {
  var style = options.style;
  var supSubGroup;
  var group;
  if (grp.type === "supsub") {
    supSubGroup = grp.sup ? buildGroup$1(grp.sup, options.havingStyle(style.sup()), options) : buildGroup$1(grp.sub, options.havingStyle(style.sub()), options);
    group = assertNodeType(grp.base, "horizBrace");
  } else {
    group = assertNodeType(grp, "horizBrace");
  }
  var body = buildGroup$1(group.base, options.havingBaseStyle(Style$1.DISPLAY));
  var braceBody = stretchy.svgSpan(group, options);
  var vlist;
  if (group.isOver) {
    vlist = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: body
      }, {
        type: "kern",
        size: 0.1
      }, {
        type: "elem",
        elem: braceBody
      }]
    }, options);
    vlist.children[0].children[0].children[1].classes.push("svg-align");
  } else {
    vlist = buildCommon.makeVList({
      positionType: "bottom",
      positionData: body.depth + 0.1 + braceBody.height,
      children: [{
        type: "elem",
        elem: braceBody
      }, {
        type: "kern",
        size: 0.1
      }, {
        type: "elem",
        elem: body
      }]
    }, options);
    vlist.children[0].children[0].children[0].classes.push("svg-align");
  }
  if (supSubGroup) {
    var vSpan = buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
    if (group.isOver) {
      vlist = buildCommon.makeVList({
        positionType: "firstBaseline",
        children: [{
          type: "elem",
          elem: vSpan
        }, {
          type: "kern",
          size: 0.2
        }, {
          type: "elem",
          elem: supSubGroup
        }]
      }, options);
    } else {
      vlist = buildCommon.makeVList({
        positionType: "bottom",
        positionData: vSpan.depth + 0.2 + supSubGroup.height + supSubGroup.depth,
        children: [{
          type: "elem",
          elem: supSubGroup
        }, {
          type: "kern",
          size: 0.2
        }, {
          type: "elem",
          elem: vSpan
        }]
      }, options);
    }
  }
  return buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
};
var mathmlBuilder$2 = (group, options) => {
  var accentNode = stretchy.mathMLnode(group.label);
  return new mathMLTree.MathNode(group.isOver ? "mover" : "munder", [buildGroup2(group.base, options), accentNode]);
};
defineFunction({
  type: "horizBrace",
  names: ["\\overbrace", "\\underbrace"],
  props: {
    numArgs: 1
  },
  handler(_ref, args) {
    var {
      parser,
      funcName
    } = _ref;
    return {
      type: "horizBrace",
      mode: parser.mode,
      label: funcName,
      isOver: /^\\over/.test(funcName),
      base: args[0]
    };
  },
  htmlBuilder: htmlBuilder$3,
  mathmlBuilder: mathmlBuilder$2
});
defineFunction({
  type: "href",
  names: ["\\href"],
  props: {
    numArgs: 2,
    argTypes: ["url", "original"],
    allowedInText: true
  },
  handler: (_ref, args) => {
    var {
      parser
    } = _ref;
    var body = args[1];
    var href = assertNodeType(args[0], "url").url;
    if (!parser.settings.isTrusted({
      command: "\\href",
      url: href
    })) {
      return parser.formatUnsupportedCmd("\\href");
    }
    return {
      type: "href",
      mode: parser.mode,
      href,
      body: ordargument(body)
    };
  },
  htmlBuilder: (group, options) => {
    var elements = buildExpression$1(group.body, options, false);
    return buildCommon.makeAnchor(group.href, [], elements, options);
  },
  mathmlBuilder: (group, options) => {
    var math2 = buildExpressionRow(group.body, options);
    if (!(math2 instanceof MathNode)) {
      math2 = new MathNode("mrow", [math2]);
    }
    math2.setAttribute("href", group.href);
    return math2;
  }
});
defineFunction({
  type: "href",
  names: ["\\url"],
  props: {
    numArgs: 1,
    argTypes: ["url"],
    allowedInText: true
  },
  handler: (_ref2, args) => {
    var {
      parser
    } = _ref2;
    var href = assertNodeType(args[0], "url").url;
    if (!parser.settings.isTrusted({
      command: "\\url",
      url: href
    })) {
      return parser.formatUnsupportedCmd("\\url");
    }
    var chars = [];
    for (var i = 0; i < href.length; i++) {
      var c = href[i];
      if (c === "~") {
        c = "\\textasciitilde";
      }
      chars.push({
        type: "textord",
        mode: "text",
        text: c
      });
    }
    var body = {
      type: "text",
      mode: parser.mode,
      font: "\\texttt",
      body: chars
    };
    return {
      type: "href",
      mode: parser.mode,
      href,
      body: ordargument(body)
    };
  }
});
defineFunction({
  type: "hbox",
  names: ["\\hbox"],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInText: true,
    primitive: true
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    return {
      type: "hbox",
      mode: parser.mode,
      body: ordargument(args[0])
    };
  },
  htmlBuilder(group, options) {
    var elements = buildExpression$1(group.body, options, false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder(group, options) {
    return new mathMLTree.MathNode("mrow", buildExpression2(group.body, options));
  }
});
defineFunction({
  type: "html",
  names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
  props: {
    numArgs: 2,
    argTypes: ["raw", "original"],
    allowedInText: true
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName,
      token
    } = _ref;
    var value = assertNodeType(args[0], "raw").string;
    var body = args[1];
    if (parser.settings.strict) {
      parser.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
    }
    var trustContext;
    var attributes = {};
    switch (funcName) {
      case "\\htmlClass":
        attributes.class = value;
        trustContext = {
          command: "\\htmlClass",
          class: value
        };
        break;
      case "\\htmlId":
        attributes.id = value;
        trustContext = {
          command: "\\htmlId",
          id: value
        };
        break;
      case "\\htmlStyle":
        attributes.style = value;
        trustContext = {
          command: "\\htmlStyle",
          style: value
        };
        break;
      case "\\htmlData":
        {
          var data = value.split(",");
          for (var i = 0; i < data.length; i++) {
            var keyVal = data[i].split("=");
            if (keyVal.length !== 2) {
              throw new ParseError("Error parsing key-value for \\htmlData");
            }
            attributes["data-" + keyVal[0].trim()] = keyVal[1].trim();
          }
          trustContext = {
            command: "\\htmlData",
            attributes
          };
          break;
        }
      default:
        throw new Error("Unrecognized html command");
    }
    if (!parser.settings.isTrusted(trustContext)) {
      return parser.formatUnsupportedCmd(funcName);
    }
    return {
      type: "html",
      mode: parser.mode,
      attributes,
      body: ordargument(body)
    };
  },
  htmlBuilder: (group, options) => {
    var elements = buildExpression$1(group.body, options, false);
    var classes = ["enclosing"];
    if (group.attributes.class) {
      classes.push(...group.attributes.class.trim().split(/\s+/));
    }
    var span = buildCommon.makeSpan(classes, elements, options);
    for (var attr in group.attributes) {
      if (attr !== "class" && group.attributes.hasOwnProperty(attr)) {
        span.setAttribute(attr, group.attributes[attr]);
      }
    }
    return span;
  },
  mathmlBuilder: (group, options) => {
    return buildExpressionRow(group.body, options);
  }
});
defineFunction({
  type: "htmlmathml",
  names: ["\\html@mathml"],
  props: {
    numArgs: 2,
    allowedInText: true
  },
  handler: (_ref, args) => {
    var {
      parser
    } = _ref;
    return {
      type: "htmlmathml",
      mode: parser.mode,
      html: ordargument(args[0]),
      mathml: ordargument(args[1])
    };
  },
  htmlBuilder: (group, options) => {
    var elements = buildExpression$1(group.html, options, false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: (group, options) => {
    return buildExpressionRow(group.mathml, options);
  }
});
var sizeData = function sizeData2(str) {
  if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(str)) {
    return {
      number: +str,
      unit: "bp"
    };
  } else {
    var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(str);
    if (!match) {
      throw new ParseError("Invalid size: '" + str + "' in \\includegraphics");
    }
    var data = {
      number: +(match[1] + match[2]),
      unit: match[3]
    };
    if (!validUnit(data)) {
      throw new ParseError("Invalid unit: '" + data.unit + "' in \\includegraphics.");
    }
    return data;
  }
};
defineFunction({
  type: "includegraphics",
  names: ["\\includegraphics"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    argTypes: ["raw", "url"],
    allowedInText: false
  },
  handler: (_ref, args, optArgs) => {
    var {
      parser
    } = _ref;
    var width = {
      number: 0,
      unit: "em"
    };
    var height = {
      number: 0.9,
      unit: "em"
    };
    var totalheight = {
      number: 0,
      unit: "em"
    };
    var alt = "";
    if (optArgs[0]) {
      var attributeStr = assertNodeType(optArgs[0], "raw").string;
      var attributes = attributeStr.split(",");
      for (var i = 0; i < attributes.length; i++) {
        var keyVal = attributes[i].split("=");
        if (keyVal.length === 2) {
          var str = keyVal[1].trim();
          switch (keyVal[0].trim()) {
            case "alt":
              alt = str;
              break;
            case "width":
              width = sizeData(str);
              break;
            case "height":
              height = sizeData(str);
              break;
            case "totalheight":
              totalheight = sizeData(str);
              break;
            default:
              throw new ParseError("Invalid key: '" + keyVal[0] + "' in \\includegraphics.");
          }
        }
      }
    }
    var src = assertNodeType(args[0], "url").url;
    if (alt === "") {
      alt = src;
      alt = alt.replace(/^.*[\\/]/, "");
      alt = alt.substring(0, alt.lastIndexOf("."));
    }
    if (!parser.settings.isTrusted({
      command: "\\includegraphics",
      url: src
    })) {
      return parser.formatUnsupportedCmd("\\includegraphics");
    }
    return {
      type: "includegraphics",
      mode: parser.mode,
      alt,
      width,
      height,
      totalheight,
      src
    };
  },
  htmlBuilder: (group, options) => {
    var height = calculateSize(group.height, options);
    var depth = 0;
    if (group.totalheight.number > 0) {
      depth = calculateSize(group.totalheight, options) - height;
    }
    var width = 0;
    if (group.width.number > 0) {
      width = calculateSize(group.width, options);
    }
    var style = {
      height: makeEm(height + depth)
    };
    if (width > 0) {
      style.width = makeEm(width);
    }
    if (depth > 0) {
      style.verticalAlign = makeEm(-depth);
    }
    var node = new Img(group.src, group.alt, style);
    node.height = height;
    node.depth = depth;
    return node;
  },
  mathmlBuilder: (group, options) => {
    var node = new mathMLTree.MathNode("mglyph", []);
    node.setAttribute("alt", group.alt);
    var height = calculateSize(group.height, options);
    var depth = 0;
    if (group.totalheight.number > 0) {
      depth = calculateSize(group.totalheight, options) - height;
      node.setAttribute("valign", makeEm(-depth));
    }
    node.setAttribute("height", makeEm(height + depth));
    if (group.width.number > 0) {
      var width = calculateSize(group.width, options);
      node.setAttribute("width", makeEm(width));
    }
    node.setAttribute("src", group.src);
    return node;
  }
});
defineFunction({
  type: "kern",
  names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    primitive: true,
    allowedInText: true
  },
  handler(_ref, args) {
    var {
      parser,
      funcName
    } = _ref;
    var size = assertNodeType(args[0], "size");
    if (parser.settings.strict) {
      var mathFunction = funcName[1] === "m";
      var muUnit = size.value.unit === "mu";
      if (mathFunction) {
        if (!muUnit) {
          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " supports only mu units, " + ("not " + size.value.unit + " units"));
        }
        if (parser.mode !== "math") {
          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " works only in math mode");
        }
      } else {
        if (muUnit) {
          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " doesn't support mu units");
        }
      }
    }
    return {
      type: "kern",
      mode: parser.mode,
      dimension: size.value
    };
  },
  htmlBuilder(group, options) {
    return buildCommon.makeGlue(group.dimension, options);
  },
  mathmlBuilder(group, options) {
    var dimension = calculateSize(group.dimension, options);
    return new mathMLTree.SpaceNode(dimension);
  }
});
defineFunction({
  type: "lap",
  names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName
    } = _ref;
    var body = args[0];
    return {
      type: "lap",
      mode: parser.mode,
      alignment: funcName.slice(5),
      body
    };
  },
  htmlBuilder: (group, options) => {
    var inner2;
    if (group.alignment === "clap") {
      inner2 = buildCommon.makeSpan([], [buildGroup$1(group.body, options)]);
      inner2 = buildCommon.makeSpan(["inner"], [inner2], options);
    } else {
      inner2 = buildCommon.makeSpan(["inner"], [buildGroup$1(group.body, options)]);
    }
    var fix = buildCommon.makeSpan(["fix"], []);
    var node = buildCommon.makeSpan([group.alignment], [inner2, fix], options);
    var strut = buildCommon.makeSpan(["strut"]);
    strut.style.height = makeEm(node.height + node.depth);
    if (node.depth) {
      strut.style.verticalAlign = makeEm(-node.depth);
    }
    node.children.unshift(strut);
    node = buildCommon.makeSpan(["thinbox"], [node], options);
    return buildCommon.makeSpan(["mord", "vbox"], [node], options);
  },
  mathmlBuilder: (group, options) => {
    var node = new mathMLTree.MathNode("mpadded", [buildGroup2(group.body, options)]);
    if (group.alignment !== "rlap") {
      var offset = group.alignment === "llap" ? "-1" : "-0.5";
      node.setAttribute("lspace", offset + "width");
    }
    node.setAttribute("width", "0px");
    return node;
  }
});
defineFunction({
  type: "styling",
  names: ["\\(", "$"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: false
  },
  handler(_ref, args) {
    var {
      funcName,
      parser
    } = _ref;
    var outerMode = parser.mode;
    parser.switchMode("math");
    var close2 = funcName === "\\(" ? "\\)" : "$";
    var body = parser.parseExpression(false, close2);
    parser.expect(close2);
    parser.switchMode(outerMode);
    return {
      type: "styling",
      mode: parser.mode,
      style: "text",
      body
    };
  }
});
defineFunction({
  type: "text",
  names: ["\\)", "\\]"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: false
  },
  handler(context, args) {
    throw new ParseError("Mismatched " + context.funcName);
  }
});
var chooseMathStyle = (group, options) => {
  switch (options.style.size) {
    case Style$1.DISPLAY.size:
      return group.display;
    case Style$1.TEXT.size:
      return group.text;
    case Style$1.SCRIPT.size:
      return group.script;
    case Style$1.SCRIPTSCRIPT.size:
      return group.scriptscript;
    default:
      return group.text;
  }
};
defineFunction({
  type: "mathchoice",
  names: ["\\mathchoice"],
  props: {
    numArgs: 4,
    primitive: true
  },
  handler: (_ref, args) => {
    var {
      parser
    } = _ref;
    return {
      type: "mathchoice",
      mode: parser.mode,
      display: ordargument(args[0]),
      text: ordargument(args[1]),
      script: ordargument(args[2]),
      scriptscript: ordargument(args[3])
    };
  },
  htmlBuilder: (group, options) => {
    var body = chooseMathStyle(group, options);
    var elements = buildExpression$1(body, options, false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: (group, options) => {
    var body = chooseMathStyle(group, options);
    return buildExpressionRow(body, options);
  }
});
var assembleSupSub = (base, supGroup, subGroup, options, style, slant, baseShift) => {
  base = buildCommon.makeSpan([], [base]);
  var subIsSingleCharacter = subGroup && utils.isCharacterBox(subGroup);
  var sub2;
  var sup2;
  if (supGroup) {
    var elem = buildGroup$1(supGroup, options.havingStyle(style.sup()), options);
    sup2 = {
      elem,
      kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)
    };
  }
  if (subGroup) {
    var _elem = buildGroup$1(subGroup, options.havingStyle(style.sub()), options);
    sub2 = {
      elem: _elem,
      kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - _elem.height)
    };
  }
  var finalGroup;
  if (sup2 && sub2) {
    var bottom = options.fontMetrics().bigOpSpacing5 + sub2.elem.height + sub2.elem.depth + sub2.kern + base.depth + baseShift;
    finalGroup = buildCommon.makeVList({
      positionType: "bottom",
      positionData: bottom,
      children: [{
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: sub2.elem,
        marginLeft: makeEm(-slant)
      }, {
        type: "kern",
        size: sub2.kern
      }, {
        type: "elem",
        elem: base
      }, {
        type: "kern",
        size: sup2.kern
      }, {
        type: "elem",
        elem: sup2.elem,
        marginLeft: makeEm(slant)
      }, {
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }]
    }, options);
  } else if (sub2) {
    var top = base.height - baseShift;
    finalGroup = buildCommon.makeVList({
      positionType: "top",
      positionData: top,
      children: [{
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: sub2.elem,
        marginLeft: makeEm(-slant)
      }, {
        type: "kern",
        size: sub2.kern
      }, {
        type: "elem",
        elem: base
      }]
    }, options);
  } else if (sup2) {
    var _bottom = base.depth + baseShift;
    finalGroup = buildCommon.makeVList({
      positionType: "bottom",
      positionData: _bottom,
      children: [{
        type: "elem",
        elem: base
      }, {
        type: "kern",
        size: sup2.kern
      }, {
        type: "elem",
        elem: sup2.elem,
        marginLeft: makeEm(slant)
      }, {
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }]
    }, options);
  } else {
    return base;
  }
  var parts = [finalGroup];
  if (sub2 && slant !== 0 && !subIsSingleCharacter) {
    var spacer = buildCommon.makeSpan(["mspace"], [], options);
    spacer.style.marginRight = makeEm(slant);
    parts.unshift(spacer);
  }
  return buildCommon.makeSpan(["mop", "op-limits"], parts, options);
};
var noSuccessor = ["\\smallint"];
var htmlBuilder$2 = (grp, options) => {
  var supGroup;
  var subGroup;
  var hasLimits = false;
  var group;
  if (grp.type === "supsub") {
    supGroup = grp.sup;
    subGroup = grp.sub;
    group = assertNodeType(grp.base, "op");
    hasLimits = true;
  } else {
    group = assertNodeType(grp, "op");
  }
  var style = options.style;
  var large = false;
  if (style.size === Style$1.DISPLAY.size && group.symbol && !utils.contains(noSuccessor, group.name)) {
    large = true;
  }
  var base;
  if (group.symbol) {
    var fontName = large ? "Size2-Regular" : "Size1-Regular";
    var stash = "";
    if (group.name === "\\oiint" || group.name === "\\oiiint") {
      stash = group.name.slice(1);
      group.name = stash === "oiint" ? "\\iint" : "\\iiint";
    }
    base = buildCommon.makeSymbol(group.name, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);
    if (stash.length > 0) {
      var italic = base.italic;
      var oval = buildCommon.staticSvg(stash + "Size" + (large ? "2" : "1"), options);
      base = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: base,
          shift: 0
        }, {
          type: "elem",
          elem: oval,
          shift: large ? 0.08 : 0
        }]
      }, options);
      group.name = "\\" + stash;
      base.classes.unshift("mop");
      base.italic = italic;
    }
  } else if (group.body) {
    var inner2 = buildExpression$1(group.body, options, true);
    if (inner2.length === 1 && inner2[0] instanceof SymbolNode) {
      base = inner2[0];
      base.classes[0] = "mop";
    } else {
      base = buildCommon.makeSpan(["mop"], inner2, options);
    }
  } else {
    var output = [];
    for (var i = 1; i < group.name.length; i++) {
      output.push(buildCommon.mathsym(group.name[i], group.mode, options));
    }
    base = buildCommon.makeSpan(["mop"], output, options);
  }
  var baseShift = 0;
  var slant = 0;
  if ((base instanceof SymbolNode || group.name === "\\oiint" || group.name === "\\oiiint") && !group.suppressBaseShift) {
    baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight;
    slant = base.italic;
  }
  if (hasLimits) {
    return assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift);
  } else {
    if (baseShift) {
      base.style.position = "relative";
      base.style.top = makeEm(baseShift);
    }
    return base;
  }
};
var mathmlBuilder$1 = (group, options) => {
  var node;
  if (group.symbol) {
    node = new MathNode("mo", [makeText(group.name, group.mode)]);
    if (utils.contains(noSuccessor, group.name)) {
      node.setAttribute("largeop", "false");
    }
  } else if (group.body) {
    node = new MathNode("mo", buildExpression2(group.body, options));
  } else {
    node = new MathNode("mi", [new TextNode(group.name.slice(1))]);
    var operator = new MathNode("mo", [makeText("\u2061", "text")]);
    if (group.parentIsSupSub) {
      node = new MathNode("mrow", [node, operator]);
    } else {
      node = newDocumentFragment([node, operator]);
    }
  }
  return node;
};
var singleCharBigOps = {
  "\u220F": "\\prod",
  "\u2210": "\\coprod",
  "\u2211": "\\sum",
  "\u22C0": "\\bigwedge",
  "\u22C1": "\\bigvee",
  "\u22C2": "\\bigcap",
  "\u22C3": "\\bigcup",
  "\u2A00": "\\bigodot",
  "\u2A01": "\\bigoplus",
  "\u2A02": "\\bigotimes",
  "\u2A04": "\\biguplus",
  "\u2A06": "\\bigsqcup"
};
defineFunction({
  type: "op",
  names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "\u220F", "\u2210", "\u2211", "\u22C0", "\u22C1", "\u22C2", "\u22C3", "\u2A00", "\u2A01", "\u2A02", "\u2A04", "\u2A06"],
  props: {
    numArgs: 0
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName
    } = _ref;
    var fName = funcName;
    if (fName.length === 1) {
      fName = singleCharBigOps[fName];
    }
    return {
      type: "op",
      mode: parser.mode,
      limits: true,
      parentIsSupSub: false,
      symbol: true,
      name: fName
    };
  },
  htmlBuilder: htmlBuilder$2,
  mathmlBuilder: mathmlBuilder$1
});
defineFunction({
  type: "op",
  names: ["\\mathop"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: (_ref2, args) => {
    var {
      parser
    } = _ref2;
    var body = args[0];
    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: false,
      body: ordargument(body)
    };
  },
  htmlBuilder: htmlBuilder$2,
  mathmlBuilder: mathmlBuilder$1
});
var singleCharIntegrals = {
  "\u222B": "\\int",
  "\u222C": "\\iint",
  "\u222D": "\\iiint",
  "\u222E": "\\oint",
  "\u222F": "\\oiint",
  "\u2230": "\\oiiint"
};
defineFunction({
  type: "op",
  names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
  props: {
    numArgs: 0
  },
  handler(_ref3) {
    var {
      parser,
      funcName
    } = _ref3;
    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: false,
      name: funcName
    };
  },
  htmlBuilder: htmlBuilder$2,
  mathmlBuilder: mathmlBuilder$1
});
defineFunction({
  type: "op",
  names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
  props: {
    numArgs: 0
  },
  handler(_ref4) {
    var {
      parser,
      funcName
    } = _ref4;
    return {
      type: "op",
      mode: parser.mode,
      limits: true,
      parentIsSupSub: false,
      symbol: false,
      name: funcName
    };
  },
  htmlBuilder: htmlBuilder$2,
  mathmlBuilder: mathmlBuilder$1
});
defineFunction({
  type: "op",
  names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "\u222B", "\u222C", "\u222D", "\u222E", "\u222F", "\u2230"],
  props: {
    numArgs: 0
  },
  handler(_ref5) {
    var {
      parser,
      funcName
    } = _ref5;
    var fName = funcName;
    if (fName.length === 1) {
      fName = singleCharIntegrals[fName];
    }
    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: true,
      name: fName
    };
  },
  htmlBuilder: htmlBuilder$2,
  mathmlBuilder: mathmlBuilder$1
});
var htmlBuilder$1 = (grp, options) => {
  var supGroup;
  var subGroup;
  var hasLimits = false;
  var group;
  if (grp.type === "supsub") {
    supGroup = grp.sup;
    subGroup = grp.sub;
    group = assertNodeType(grp.base, "operatorname");
    hasLimits = true;
  } else {
    group = assertNodeType(grp, "operatorname");
  }
  var base;
  if (group.body.length > 0) {
    var body = group.body.map(child2 => {
      var childText = child2.text;
      if (typeof childText === "string") {
        return {
          type: "textord",
          mode: child2.mode,
          text: childText
        };
      } else {
        return child2;
      }
    });
    var expression = buildExpression$1(body, options.withFont("mathrm"), true);
    for (var i = 0; i < expression.length; i++) {
      var child = expression[i];
      if (child instanceof SymbolNode) {
        child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
      }
    }
    base = buildCommon.makeSpan(["mop"], expression, options);
  } else {
    base = buildCommon.makeSpan(["mop"], [], options);
  }
  if (hasLimits) {
    return assembleSupSub(base, supGroup, subGroup, options, options.style, 0, 0);
  } else {
    return base;
  }
};
var mathmlBuilder2 = (group, options) => {
  var expression = buildExpression2(group.body, options.withFont("mathrm"));
  var isAllString = true;
  for (var i = 0; i < expression.length; i++) {
    var node = expression[i];
    if (node instanceof mathMLTree.SpaceNode) ;else if (node instanceof mathMLTree.MathNode) {
      switch (node.type) {
        case "mi":
        case "mn":
        case "ms":
        case "mspace":
        case "mtext":
          break;
        case "mo":
          {
            var child = node.children[0];
            if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {
              child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
            } else {
              isAllString = false;
            }
            break;
          }
        default:
          isAllString = false;
      }
    } else {
      isAllString = false;
    }
  }
  if (isAllString) {
    var word = expression.map(node2 => node2.toText()).join("");
    expression = [new mathMLTree.TextNode(word)];
  }
  var identifier = new mathMLTree.MathNode("mi", expression);
  identifier.setAttribute("mathvariant", "normal");
  var operator = new mathMLTree.MathNode("mo", [makeText("\u2061", "text")]);
  if (group.parentIsSupSub) {
    return new mathMLTree.MathNode("mrow", [identifier, operator]);
  } else {
    return mathMLTree.newDocumentFragment([identifier, operator]);
  }
};
defineFunction({
  type: "operatorname",
  names: ["\\operatorname@", "\\operatornamewithlimits"],
  props: {
    numArgs: 1
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName
    } = _ref;
    var body = args[0];
    return {
      type: "operatorname",
      mode: parser.mode,
      body: ordargument(body),
      alwaysHandleSupSub: funcName === "\\operatornamewithlimits",
      limits: false,
      parentIsSupSub: false
    };
  },
  htmlBuilder: htmlBuilder$1,
  mathmlBuilder: mathmlBuilder2
});
defineMacro("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");
defineFunctionBuilders({
  type: "ordgroup",
  htmlBuilder(group, options) {
    if (group.semisimple) {
      return buildCommon.makeFragment(buildExpression$1(group.body, options, false));
    }
    return buildCommon.makeSpan(["mord"], buildExpression$1(group.body, options, true), options);
  },
  mathmlBuilder(group, options) {
    return buildExpressionRow(group.body, options, true);
  }
});
defineFunction({
  type: "overline",
  names: ["\\overline"],
  props: {
    numArgs: 1
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    var body = args[0];
    return {
      type: "overline",
      mode: parser.mode,
      body
    };
  },
  htmlBuilder(group, options) {
    var innerGroup = buildGroup$1(group.body, options.havingCrampedStyle());
    var line = buildCommon.makeLineSpan("overline-line", options);
    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
    var vlist = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: innerGroup
      }, {
        type: "kern",
        size: 3 * defaultRuleThickness
      }, {
        type: "elem",
        elem: line
      }, {
        type: "kern",
        size: defaultRuleThickness
      }]
    }, options);
    return buildCommon.makeSpan(["mord", "overline"], [vlist], options);
  },
  mathmlBuilder(group, options) {
    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203E")]);
    operator.setAttribute("stretchy", "true");
    var node = new mathMLTree.MathNode("mover", [buildGroup2(group.body, options), operator]);
    node.setAttribute("accent", "true");
    return node;
  }
});
defineFunction({
  type: "phantom",
  names: ["\\phantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: (_ref, args) => {
    var {
      parser
    } = _ref;
    var body = args[0];
    return {
      type: "phantom",
      mode: parser.mode,
      body: ordargument(body)
    };
  },
  htmlBuilder: (group, options) => {
    var elements = buildExpression$1(group.body, options.withPhantom(), false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: (group, options) => {
    var inner2 = buildExpression2(group.body, options);
    return new mathMLTree.MathNode("mphantom", inner2);
  }
});
defineFunction({
  type: "hphantom",
  names: ["\\hphantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: (_ref2, args) => {
    var {
      parser
    } = _ref2;
    var body = args[0];
    return {
      type: "hphantom",
      mode: parser.mode,
      body
    };
  },
  htmlBuilder: (group, options) => {
    var node = buildCommon.makeSpan([], [buildGroup$1(group.body, options.withPhantom())]);
    node.height = 0;
    node.depth = 0;
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        node.children[i].height = 0;
        node.children[i].depth = 0;
      }
    }
    node = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: node
      }]
    }, options);
    return buildCommon.makeSpan(["mord"], [node], options);
  },
  mathmlBuilder: (group, options) => {
    var inner2 = buildExpression2(ordargument(group.body), options);
    var phantom = new mathMLTree.MathNode("mphantom", inner2);
    var node = new mathMLTree.MathNode("mpadded", [phantom]);
    node.setAttribute("height", "0px");
    node.setAttribute("depth", "0px");
    return node;
  }
});
defineFunction({
  type: "vphantom",
  names: ["\\vphantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: (_ref3, args) => {
    var {
      parser
    } = _ref3;
    var body = args[0];
    return {
      type: "vphantom",
      mode: parser.mode,
      body
    };
  },
  htmlBuilder: (group, options) => {
    var inner2 = buildCommon.makeSpan(["inner"], [buildGroup$1(group.body, options.withPhantom())]);
    var fix = buildCommon.makeSpan(["fix"], []);
    return buildCommon.makeSpan(["mord", "rlap"], [inner2, fix], options);
  },
  mathmlBuilder: (group, options) => {
    var inner2 = buildExpression2(ordargument(group.body), options);
    var phantom = new mathMLTree.MathNode("mphantom", inner2);
    var node = new mathMLTree.MathNode("mpadded", [phantom]);
    node.setAttribute("width", "0px");
    return node;
  }
});
defineFunction({
  type: "raisebox",
  names: ["\\raisebox"],
  props: {
    numArgs: 2,
    argTypes: ["size", "hbox"],
    allowedInText: true
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    var amount = assertNodeType(args[0], "size").value;
    var body = args[1];
    return {
      type: "raisebox",
      mode: parser.mode,
      dy: amount,
      body
    };
  },
  htmlBuilder(group, options) {
    var body = buildGroup$1(group.body, options);
    var dy = calculateSize(group.dy, options);
    return buildCommon.makeVList({
      positionType: "shift",
      positionData: -dy,
      children: [{
        type: "elem",
        elem: body
      }]
    }, options);
  },
  mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mpadded", [buildGroup2(group.body, options)]);
    var dy = group.dy.number + group.dy.unit;
    node.setAttribute("voffset", dy);
    return node;
  }
});
defineFunction({
  type: "internal",
  names: ["\\relax"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler(_ref) {
    var {
      parser
    } = _ref;
    return {
      type: "internal",
      mode: parser.mode
    };
  }
});
defineFunction({
  type: "rule",
  names: ["\\rule"],
  props: {
    numArgs: 2,
    numOptionalArgs: 1,
    argTypes: ["size", "size", "size"]
  },
  handler(_ref, args, optArgs) {
    var {
      parser
    } = _ref;
    var shift = optArgs[0];
    var width = assertNodeType(args[0], "size");
    var height = assertNodeType(args[1], "size");
    return {
      type: "rule",
      mode: parser.mode,
      shift: shift && assertNodeType(shift, "size").value,
      width: width.value,
      height: height.value
    };
  },
  htmlBuilder(group, options) {
    var rule = buildCommon.makeSpan(["mord", "rule"], [], options);
    var width = calculateSize(group.width, options);
    var height = calculateSize(group.height, options);
    var shift = group.shift ? calculateSize(group.shift, options) : 0;
    rule.style.borderRightWidth = makeEm(width);
    rule.style.borderTopWidth = makeEm(height);
    rule.style.bottom = makeEm(shift);
    rule.width = width;
    rule.height = height + shift;
    rule.depth = -shift;
    rule.maxFontSize = height * 1.125 * options.sizeMultiplier;
    return rule;
  },
  mathmlBuilder(group, options) {
    var width = calculateSize(group.width, options);
    var height = calculateSize(group.height, options);
    var shift = group.shift ? calculateSize(group.shift, options) : 0;
    var color = options.color && options.getColor() || "black";
    var rule = new mathMLTree.MathNode("mspace");
    rule.setAttribute("mathbackground", color);
    rule.setAttribute("width", makeEm(width));
    rule.setAttribute("height", makeEm(height));
    var wrapper = new mathMLTree.MathNode("mpadded", [rule]);
    if (shift >= 0) {
      wrapper.setAttribute("height", makeEm(shift));
    } else {
      wrapper.setAttribute("height", makeEm(shift));
      wrapper.setAttribute("depth", makeEm(-shift));
    }
    wrapper.setAttribute("voffset", makeEm(shift));
    return wrapper;
  }
});
function sizingGroup(value, options, baseOptions) {
  var inner2 = buildExpression$1(value, options, false);
  var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
  for (var i = 0; i < inner2.length; i++) {
    var pos = inner2[i].classes.indexOf("sizing");
    if (pos < 0) {
      Array.prototype.push.apply(inner2[i].classes, options.sizingClasses(baseOptions));
    } else if (inner2[i].classes[pos + 1] === "reset-size" + options.size) {
      inner2[i].classes[pos + 1] = "reset-size" + baseOptions.size;
    }
    inner2[i].height *= multiplier;
    inner2[i].depth *= multiplier;
  }
  return buildCommon.makeFragment(inner2);
}
var sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];
var htmlBuilder2 = (group, options) => {
  var newOptions = options.havingSize(group.size);
  return sizingGroup(group.body, newOptions, options);
};
defineFunction({
  type: "sizing",
  names: sizeFuncs,
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: (_ref, args) => {
    var {
      breakOnTokenText,
      funcName,
      parser
    } = _ref;
    var body = parser.parseExpression(false, breakOnTokenText);
    return {
      type: "sizing",
      mode: parser.mode,
      size: sizeFuncs.indexOf(funcName) + 1,
      body
    };
  },
  htmlBuilder: htmlBuilder2,
  mathmlBuilder: (group, options) => {
    var newOptions = options.havingSize(group.size);
    var inner2 = buildExpression2(group.body, newOptions);
    var node = new mathMLTree.MathNode("mstyle", inner2);
    node.setAttribute("mathsize", makeEm(newOptions.sizeMultiplier));
    return node;
  }
});
defineFunction({
  type: "smash",
  names: ["\\smash"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    allowedInText: true
  },
  handler: (_ref, args, optArgs) => {
    var {
      parser
    } = _ref;
    var smashHeight = false;
    var smashDepth = false;
    var tbArg = optArgs[0] && assertNodeType(optArgs[0], "ordgroup");
    if (tbArg) {
      var letter = "";
      for (var i = 0; i < tbArg.body.length; ++i) {
        var node = tbArg.body[i];
        letter = node.text;
        if (letter === "t") {
          smashHeight = true;
        } else if (letter === "b") {
          smashDepth = true;
        } else {
          smashHeight = false;
          smashDepth = false;
          break;
        }
      }
    } else {
      smashHeight = true;
      smashDepth = true;
    }
    var body = args[0];
    return {
      type: "smash",
      mode: parser.mode,
      body,
      smashHeight,
      smashDepth
    };
  },
  htmlBuilder: (group, options) => {
    var node = buildCommon.makeSpan([], [buildGroup$1(group.body, options)]);
    if (!group.smashHeight && !group.smashDepth) {
      return node;
    }
    if (group.smashHeight) {
      node.height = 0;
      if (node.children) {
        for (var i = 0; i < node.children.length; i++) {
          node.children[i].height = 0;
        }
      }
    }
    if (group.smashDepth) {
      node.depth = 0;
      if (node.children) {
        for (var _i = 0; _i < node.children.length; _i++) {
          node.children[_i].depth = 0;
        }
      }
    }
    var smashedNode = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: node
      }]
    }, options);
    return buildCommon.makeSpan(["mord"], [smashedNode], options);
  },
  mathmlBuilder: (group, options) => {
    var node = new mathMLTree.MathNode("mpadded", [buildGroup2(group.body, options)]);
    if (group.smashHeight) {
      node.setAttribute("height", "0px");
    }
    if (group.smashDepth) {
      node.setAttribute("depth", "0px");
    }
    return node;
  }
});
defineFunction({
  type: "sqrt",
  names: ["\\sqrt"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler(_ref, args, optArgs) {
    var {
      parser
    } = _ref;
    var index = optArgs[0];
    var body = args[0];
    return {
      type: "sqrt",
      mode: parser.mode,
      body,
      index
    };
  },
  htmlBuilder(group, options) {
    var inner2 = buildGroup$1(group.body, options.havingCrampedStyle());
    if (inner2.height === 0) {
      inner2.height = options.fontMetrics().xHeight;
    }
    inner2 = buildCommon.wrapFragment(inner2, options);
    var metrics = options.fontMetrics();
    var theta = metrics.defaultRuleThickness;
    var phi = theta;
    if (options.style.id < Style$1.TEXT.id) {
      phi = options.fontMetrics().xHeight;
    }
    var lineClearance = theta + phi / 4;
    var minDelimiterHeight = inner2.height + inner2.depth + lineClearance + theta;
    var {
      span: img,
      ruleWidth,
      advanceWidth
    } = delimiter.sqrtImage(minDelimiterHeight, options);
    var delimDepth = img.height - ruleWidth;
    if (delimDepth > inner2.height + inner2.depth + lineClearance) {
      lineClearance = (lineClearance + delimDepth - inner2.height - inner2.depth) / 2;
    }
    var imgShift = img.height - inner2.height - lineClearance - ruleWidth;
    inner2.style.paddingLeft = makeEm(advanceWidth);
    var body = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: inner2,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: -(inner2.height + imgShift)
      }, {
        type: "elem",
        elem: img
      }, {
        type: "kern",
        size: ruleWidth
      }]
    }, options);
    if (!group.index) {
      return buildCommon.makeSpan(["mord", "sqrt"], [body], options);
    } else {
      var newOptions = options.havingStyle(Style$1.SCRIPTSCRIPT);
      var rootm = buildGroup$1(group.index, newOptions, options);
      var toShift = 0.6 * (body.height - body.depth);
      var rootVList = buildCommon.makeVList({
        positionType: "shift",
        positionData: -toShift,
        children: [{
          type: "elem",
          elem: rootm
        }]
      }, options);
      var rootVListWrap = buildCommon.makeSpan(["root"], [rootVList]);
      return buildCommon.makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
    }
  },
  mathmlBuilder(group, options) {
    var {
      body,
      index
    } = group;
    return index ? new mathMLTree.MathNode("mroot", [buildGroup2(body, options), buildGroup2(index, options)]) : new mathMLTree.MathNode("msqrt", [buildGroup2(body, options)]);
  }
});
var styleMap = {
  "display": Style$1.DISPLAY,
  "text": Style$1.TEXT,
  "script": Style$1.SCRIPT,
  "scriptscript": Style$1.SCRIPTSCRIPT
};
defineFunction({
  type: "styling",
  names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler(_ref, args) {
    var {
      breakOnTokenText,
      funcName,
      parser
    } = _ref;
    var body = parser.parseExpression(true, breakOnTokenText);
    var style = funcName.slice(1, funcName.length - 5);
    return {
      type: "styling",
      mode: parser.mode,
      style,
      body
    };
  },
  htmlBuilder(group, options) {
    var newStyle = styleMap[group.style];
    var newOptions = options.havingStyle(newStyle).withFont("");
    return sizingGroup(group.body, newOptions, options);
  },
  mathmlBuilder(group, options) {
    var newStyle = styleMap[group.style];
    var newOptions = options.havingStyle(newStyle);
    var inner2 = buildExpression2(group.body, newOptions);
    var node = new mathMLTree.MathNode("mstyle", inner2);
    var styleAttributes = {
      "display": ["0", "true"],
      "text": ["0", "false"],
      "script": ["1", "false"],
      "scriptscript": ["2", "false"]
    };
    var attr = styleAttributes[group.style];
    node.setAttribute("scriptlevel", attr[0]);
    node.setAttribute("displaystyle", attr[1]);
    return node;
  }
});
var htmlBuilderDelegate = function htmlBuilderDelegate2(group, options) {
  var base = group.base;
  if (!base) {
    return null;
  } else if (base.type === "op") {
    var delegate = base.limits && (options.style.size === Style$1.DISPLAY.size || base.alwaysHandleSupSub);
    return delegate ? htmlBuilder$2 : null;
  } else if (base.type === "operatorname") {
    var _delegate = base.alwaysHandleSupSub && (options.style.size === Style$1.DISPLAY.size || base.limits);
    return _delegate ? htmlBuilder$1 : null;
  } else if (base.type === "accent") {
    return utils.isCharacterBox(base.base) ? htmlBuilder$a : null;
  } else if (base.type === "horizBrace") {
    var isSup = !group.sub;
    return isSup === base.isOver ? htmlBuilder$3 : null;
  } else {
    return null;
  }
};
defineFunctionBuilders({
  type: "supsub",
  htmlBuilder(group, options) {
    var builderDelegate = htmlBuilderDelegate(group, options);
    if (builderDelegate) {
      return builderDelegate(group, options);
    }
    var {
      base: valueBase,
      sup: valueSup,
      sub: valueSub
    } = group;
    var base = buildGroup$1(valueBase, options);
    var supm;
    var subm;
    var metrics = options.fontMetrics();
    var supShift = 0;
    var subShift = 0;
    var isCharacterBox3 = valueBase && utils.isCharacterBox(valueBase);
    if (valueSup) {
      var newOptions = options.havingStyle(options.style.sup());
      supm = buildGroup$1(valueSup, newOptions, options);
      if (!isCharacterBox3) {
        supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
      }
    }
    if (valueSub) {
      var _newOptions = options.havingStyle(options.style.sub());
      subm = buildGroup$1(valueSub, _newOptions, options);
      if (!isCharacterBox3) {
        subShift = base.depth + _newOptions.fontMetrics().subDrop * _newOptions.sizeMultiplier / options.sizeMultiplier;
      }
    }
    var minSupShift;
    if (options.style === Style$1.DISPLAY) {
      minSupShift = metrics.sup1;
    } else if (options.style.cramped) {
      minSupShift = metrics.sup3;
    } else {
      minSupShift = metrics.sup2;
    }
    var multiplier = options.sizeMultiplier;
    var marginRight = makeEm(0.5 / metrics.ptPerEm / multiplier);
    var marginLeft = null;
    if (subm) {
      var isOiint = group.base && group.base.type === "op" && group.base.name && (group.base.name === "\\oiint" || group.base.name === "\\oiiint");
      if (base instanceof SymbolNode || isOiint) {
        marginLeft = makeEm(-base.italic);
      }
    }
    var supsub;
    if (supm && subm) {
      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
      subShift = Math.max(subShift, metrics.sub2);
      var ruleWidth = metrics.defaultRuleThickness;
      var maxWidth = 4 * ruleWidth;
      if (supShift - supm.depth - (subm.height - subShift) < maxWidth) {
        subShift = maxWidth - (supShift - supm.depth) + subm.height;
        var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);
        if (psi > 0) {
          supShift += psi;
          subShift -= psi;
        }
      }
      var vlistElem = [{
        type: "elem",
        elem: subm,
        shift: subShift,
        marginRight,
        marginLeft
      }, {
        type: "elem",
        elem: supm,
        shift: -supShift,
        marginRight
      }];
      supsub = buildCommon.makeVList({
        positionType: "individualShift",
        children: vlistElem
      }, options);
    } else if (subm) {
      subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);
      var _vlistElem = [{
        type: "elem",
        elem: subm,
        marginLeft,
        marginRight
      }];
      supsub = buildCommon.makeVList({
        positionType: "shift",
        positionData: subShift,
        children: _vlistElem
      }, options);
    } else if (supm) {
      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
      supsub = buildCommon.makeVList({
        positionType: "shift",
        positionData: -supShift,
        children: [{
          type: "elem",
          elem: supm,
          marginRight
        }]
      }, options);
    } else {
      throw new Error("supsub must have either sup or sub.");
    }
    var mclass = getTypeOfDomTree(base, "right") || "mord";
    return buildCommon.makeSpan([mclass], [base, buildCommon.makeSpan(["msupsub"], [supsub])], options);
  },
  mathmlBuilder(group, options) {
    var isBrace = false;
    var isOver;
    var isSup;
    if (group.base && group.base.type === "horizBrace") {
      isSup = !!group.sup;
      if (isSup === group.base.isOver) {
        isBrace = true;
        isOver = group.base.isOver;
      }
    }
    if (group.base && (group.base.type === "op" || group.base.type === "operatorname")) {
      group.base.parentIsSupSub = true;
    }
    var children = [buildGroup2(group.base, options)];
    if (group.sub) {
      children.push(buildGroup2(group.sub, options));
    }
    if (group.sup) {
      children.push(buildGroup2(group.sup, options));
    }
    var nodeType;
    if (isBrace) {
      nodeType = isOver ? "mover" : "munder";
    } else if (!group.sub) {
      var base = group.base;
      if (base && base.type === "op" && base.limits && (options.style === Style$1.DISPLAY || base.alwaysHandleSupSub)) {
        nodeType = "mover";
      } else if (base && base.type === "operatorname" && base.alwaysHandleSupSub && (base.limits || options.style === Style$1.DISPLAY)) {
        nodeType = "mover";
      } else {
        nodeType = "msup";
      }
    } else if (!group.sup) {
      var _base = group.base;
      if (_base && _base.type === "op" && _base.limits && (options.style === Style$1.DISPLAY || _base.alwaysHandleSupSub)) {
        nodeType = "munder";
      } else if (_base && _base.type === "operatorname" && _base.alwaysHandleSupSub && (_base.limits || options.style === Style$1.DISPLAY)) {
        nodeType = "munder";
      } else {
        nodeType = "msub";
      }
    } else {
      var _base2 = group.base;
      if (_base2 && _base2.type === "op" && _base2.limits && options.style === Style$1.DISPLAY) {
        nodeType = "munderover";
      } else if (_base2 && _base2.type === "operatorname" && _base2.alwaysHandleSupSub && (options.style === Style$1.DISPLAY || _base2.limits)) {
        nodeType = "munderover";
      } else {
        nodeType = "msubsup";
      }
    }
    return new mathMLTree.MathNode(nodeType, children);
  }
});
defineFunctionBuilders({
  type: "atom",
  htmlBuilder(group, options) {
    return buildCommon.mathsym(group.text, group.mode, options, ["m" + group.family]);
  },
  mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mo", [makeText(group.text, group.mode)]);
    if (group.family === "bin") {
      var variant = getVariant(group, options);
      if (variant === "bold-italic") {
        node.setAttribute("mathvariant", variant);
      }
    } else if (group.family === "punct") {
      node.setAttribute("separator", "true");
    } else if (group.family === "open" || group.family === "close") {
      node.setAttribute("stretchy", "false");
    }
    return node;
  }
});
var defaultVariant = {
  "mi": "italic",
  "mn": "normal",
  "mtext": "normal"
};
defineFunctionBuilders({
  type: "mathord",
  htmlBuilder(group, options) {
    return buildCommon.makeOrd(group, options, "mathord");
  },
  mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mi", [makeText(group.text, group.mode, options)]);
    var variant = getVariant(group, options) || "italic";
    if (variant !== defaultVariant[node.type]) {
      node.setAttribute("mathvariant", variant);
    }
    return node;
  }
});
defineFunctionBuilders({
  type: "textord",
  htmlBuilder(group, options) {
    return buildCommon.makeOrd(group, options, "textord");
  },
  mathmlBuilder(group, options) {
    var text2 = makeText(group.text, group.mode, options);
    var variant = getVariant(group, options) || "normal";
    var node;
    if (group.mode === "text") {
      node = new mathMLTree.MathNode("mtext", [text2]);
    } else if (/[0-9]/.test(group.text)) {
      node = new mathMLTree.MathNode("mn", [text2]);
    } else if (group.text === "\\prime") {
      node = new mathMLTree.MathNode("mo", [text2]);
    } else {
      node = new mathMLTree.MathNode("mi", [text2]);
    }
    if (variant !== defaultVariant[node.type]) {
      node.setAttribute("mathvariant", variant);
    }
    return node;
  }
});
var cssSpace = {
  "\\nobreak": "nobreak",
  "\\allowbreak": "allowbreak"
};
var regularSpace = {
  " ": {},
  "\\ ": {},
  "~": {
    className: "nobreak"
  },
  "\\space": {},
  "\\nobreakspace": {
    className: "nobreak"
  }
};
defineFunctionBuilders({
  type: "spacing",
  htmlBuilder(group, options) {
    if (regularSpace.hasOwnProperty(group.text)) {
      var className = regularSpace[group.text].className || "";
      if (group.mode === "text") {
        var ord = buildCommon.makeOrd(group, options, "textord");
        ord.classes.push(className);
        return ord;
      } else {
        return buildCommon.makeSpan(["mspace", className], [buildCommon.mathsym(group.text, group.mode, options)], options);
      }
    } else if (cssSpace.hasOwnProperty(group.text)) {
      return buildCommon.makeSpan(["mspace", cssSpace[group.text]], [], options);
    } else {
      throw new ParseError('Unknown type of space "' + group.text + '"');
    }
  },
  mathmlBuilder(group, options) {
    var node;
    if (regularSpace.hasOwnProperty(group.text)) {
      node = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode("\xA0")]);
    } else if (cssSpace.hasOwnProperty(group.text)) {
      return new mathMLTree.MathNode("mspace");
    } else {
      throw new ParseError('Unknown type of space "' + group.text + '"');
    }
    return node;
  }
});
var pad = () => {
  var padNode = new mathMLTree.MathNode("mtd", []);
  padNode.setAttribute("width", "50%");
  return padNode;
};
defineFunctionBuilders({
  type: "tag",
  mathmlBuilder(group, options) {
    var table = new mathMLTree.MathNode("mtable", [new mathMLTree.MathNode("mtr", [pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.body, options)]), pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.tag, options)])])]);
    table.setAttribute("width", "100%");
    return table;
  }
});
var textFontFamilies = {
  "\\text": void 0,
  "\\textrm": "textrm",
  "\\textsf": "textsf",
  "\\texttt": "texttt",
  "\\textnormal": "textrm"
};
var textFontWeights = {
  "\\textbf": "textbf",
  "\\textmd": "textmd"
};
var textFontShapes = {
  "\\textit": "textit",
  "\\textup": "textup"
};
var optionsWithFont = (group, options) => {
  var font = group.font;
  if (!font) {
    return options;
  } else if (textFontFamilies[font]) {
    return options.withTextFontFamily(textFontFamilies[font]);
  } else if (textFontWeights[font]) {
    return options.withTextFontWeight(textFontWeights[font]);
  } else if (font === "\\emph") {
    return options.fontShape === "textit" ? options.withTextFontShape("textup") : options.withTextFontShape("textit");
  }
  return options.withTextFontShape(textFontShapes[font]);
};
defineFunction({
  type: "text",
  names: ["\\text", "\\textrm", "\\textsf", "\\texttt", "\\textnormal", "\\textbf", "\\textmd", "\\textit", "\\textup", "\\emph"],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInArgument: true,
    allowedInText: true
  },
  handler(_ref, args) {
    var {
      parser,
      funcName
    } = _ref;
    var body = args[0];
    return {
      type: "text",
      mode: parser.mode,
      body: ordargument(body),
      font: funcName
    };
  },
  htmlBuilder(group, options) {
    var newOptions = optionsWithFont(group, options);
    var inner2 = buildExpression$1(group.body, newOptions, true);
    return buildCommon.makeSpan(["mord", "text"], inner2, newOptions);
  },
  mathmlBuilder(group, options) {
    var newOptions = optionsWithFont(group, options);
    return buildExpressionRow(group.body, newOptions);
  }
});
defineFunction({
  type: "underline",
  names: ["\\underline"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    return {
      type: "underline",
      mode: parser.mode,
      body: args[0]
    };
  },
  htmlBuilder(group, options) {
    var innerGroup = buildGroup$1(group.body, options);
    var line = buildCommon.makeLineSpan("underline-line", options);
    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
    var vlist = buildCommon.makeVList({
      positionType: "top",
      positionData: innerGroup.height,
      children: [{
        type: "kern",
        size: defaultRuleThickness
      }, {
        type: "elem",
        elem: line
      }, {
        type: "kern",
        size: 3 * defaultRuleThickness
      }, {
        type: "elem",
        elem: innerGroup
      }]
    }, options);
    return buildCommon.makeSpan(["mord", "underline"], [vlist], options);
  },
  mathmlBuilder(group, options) {
    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203E")]);
    operator.setAttribute("stretchy", "true");
    var node = new mathMLTree.MathNode("munder", [buildGroup2(group.body, options), operator]);
    node.setAttribute("accentunder", "true");
    return node;
  }
});
defineFunction({
  type: "vcenter",
  names: ["\\vcenter"],
  props: {
    numArgs: 1,
    argTypes: ["original"],
    allowedInText: false
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    return {
      type: "vcenter",
      mode: parser.mode,
      body: args[0]
    };
  },
  htmlBuilder(group, options) {
    var body = buildGroup$1(group.body, options);
    var axisHeight = options.fontMetrics().axisHeight;
    var dy = 0.5 * (body.height - axisHeight - (body.depth + axisHeight));
    return buildCommon.makeVList({
      positionType: "shift",
      positionData: dy,
      children: [{
        type: "elem",
        elem: body
      }]
    }, options);
  },
  mathmlBuilder(group, options) {
    return new mathMLTree.MathNode("mpadded", [buildGroup2(group.body, options)], ["vcenter"]);
  }
});
defineFunction({
  type: "verb",
  names: ["\\verb"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler(context, args, optArgs) {
    throw new ParseError("\\verb ended by end of line instead of matching delimiter");
  },
  htmlBuilder(group, options) {
    var text2 = makeVerb(group);
    var body = [];
    var newOptions = options.havingStyle(options.style.text());
    for (var i = 0; i < text2.length; i++) {
      var c = text2[i];
      if (c === "~") {
        c = "\\textasciitilde";
      }
      body.push(buildCommon.makeSymbol(c, "Typewriter-Regular", group.mode, newOptions, ["mord", "texttt"]));
    }
    return buildCommon.makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), buildCommon.tryCombineChars(body), newOptions);
  },
  mathmlBuilder(group, options) {
    var text2 = new mathMLTree.TextNode(makeVerb(group));
    var node = new mathMLTree.MathNode("mtext", [text2]);
    node.setAttribute("mathvariant", "monospace");
    return node;
  }
});
var makeVerb = group => group.body.replace(/ /g, group.star ? "\u2423" : "\xA0");
var functions = _functions;
var spaceRegexString = "[ \r\n	]";
var controlWordRegexString = "\\\\[a-zA-Z@]+";
var controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
var controlWordWhitespaceRegexString = "(" + controlWordRegexString + ")" + spaceRegexString + "*";
var controlSpaceRegexString = "\\\\(\n|[ \r	]+\n?)[ \r	]*";
var combiningDiacriticalMarkString = "[\u0300-\u036F]";
var combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + "+$");
var tokenRegexString = "(" + spaceRegexString + "+)|" + (controlSpaceRegexString + "|") + "([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + (combiningDiacriticalMarkString + "*") + "|[\uD800-\uDBFF][\uDC00-\uDFFF]" + (combiningDiacriticalMarkString + "*") + "|\\\\verb\\*([^]).*?\\4|\\\\verb([^*a-zA-Z]).*?\\5" + ("|" + controlWordWhitespaceRegexString) + ("|" + controlSymbolRegexString + ")");
var Lexer = class {
  constructor(input, settings) {
    this.input = void 0;
    this.settings = void 0;
    this.tokenRegex = void 0;
    this.catcodes = void 0;
    this.input = input;
    this.settings = settings;
    this.tokenRegex = new RegExp(tokenRegexString, "g");
    this.catcodes = {
      "%": 14,
      "~": 13
    };
  }
  setCatcode(char, code) {
    this.catcodes[char] = code;
  }
  lex() {
    var input = this.input;
    var pos = this.tokenRegex.lastIndex;
    if (pos === input.length) {
      return new Token("EOF", new SourceLocation(this, pos, pos));
    }
    var match = this.tokenRegex.exec(input);
    if (match === null || match.index !== pos) {
      throw new ParseError("Unexpected character: '" + input[pos] + "'", new Token(input[pos], new SourceLocation(this, pos, pos + 1)));
    }
    var text2 = match[6] || match[3] || (match[2] ? "\\ " : " ");
    if (this.catcodes[text2] === 14) {
      var nlIndex = input.indexOf("\n", this.tokenRegex.lastIndex);
      if (nlIndex === -1) {
        this.tokenRegex.lastIndex = input.length;
        this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would fail because of commenting the end of math mode (e.g. $)");
      } else {
        this.tokenRegex.lastIndex = nlIndex + 1;
      }
      return this.lex();
    }
    return new Token(text2, new SourceLocation(this, pos, this.tokenRegex.lastIndex));
  }
};
var Namespace = class {
  constructor(builtins, globalMacros) {
    if (builtins === void 0) {
      builtins = {};
    }
    if (globalMacros === void 0) {
      globalMacros = {};
    }
    this.current = void 0;
    this.builtins = void 0;
    this.undefStack = void 0;
    this.current = globalMacros;
    this.builtins = builtins;
    this.undefStack = [];
  }
  beginGroup() {
    this.undefStack.push({});
  }
  endGroup() {
    if (this.undefStack.length === 0) {
      throw new ParseError("Unbalanced namespace destruction: attempt to pop global namespace; please report this as a bug");
    }
    var undefs = this.undefStack.pop();
    for (var undef in undefs) {
      if (undefs.hasOwnProperty(undef)) {
        if (undefs[undef] == null) {
          delete this.current[undef];
        } else {
          this.current[undef] = undefs[undef];
        }
      }
    }
  }
  endGroups() {
    while (this.undefStack.length > 0) {
      this.endGroup();
    }
  }
  has(name) {
    return this.current.hasOwnProperty(name) || this.builtins.hasOwnProperty(name);
  }
  get(name) {
    if (this.current.hasOwnProperty(name)) {
      return this.current[name];
    } else {
      return this.builtins[name];
    }
  }
  set(name, value, global) {
    if (global === void 0) {
      global = false;
    }
    if (global) {
      for (var i = 0; i < this.undefStack.length; i++) {
        delete this.undefStack[i][name];
      }
      if (this.undefStack.length > 0) {
        this.undefStack[this.undefStack.length - 1][name] = value;
      }
    } else {
      var top = this.undefStack[this.undefStack.length - 1];
      if (top && !top.hasOwnProperty(name)) {
        top[name] = this.current[name];
      }
    }
    if (value == null) {
      delete this.current[name];
    } else {
      this.current[name] = value;
    }
  }
};
var macros = _macros;
defineMacro("\\noexpand", function (context) {
  var t = context.popToken();
  if (context.isExpandable(t.text)) {
    t.noexpand = true;
    t.treatAsRelax = true;
  }
  return {
    tokens: [t],
    numArgs: 0
  };
});
defineMacro("\\expandafter", function (context) {
  var t = context.popToken();
  context.expandOnce(true);
  return {
    tokens: [t],
    numArgs: 0
  };
});
defineMacro("\\@firstoftwo", function (context) {
  var args = context.consumeArgs(2);
  return {
    tokens: args[0],
    numArgs: 0
  };
});
defineMacro("\\@secondoftwo", function (context) {
  var args = context.consumeArgs(2);
  return {
    tokens: args[1],
    numArgs: 0
  };
});
defineMacro("\\@ifnextchar", function (context) {
  var args = context.consumeArgs(3);
  context.consumeSpaces();
  var nextToken = context.future();
  if (args[0].length === 1 && args[0][0].text === nextToken.text) {
    return {
      tokens: args[1],
      numArgs: 0
    };
  } else {
    return {
      tokens: args[2],
      numArgs: 0
    };
  }
});
defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}");
defineMacro("\\TextOrMath", function (context) {
  var args = context.consumeArgs(2);
  if (context.mode === "text") {
    return {
      tokens: args[0],
      numArgs: 0
    };
  } else {
    return {
      tokens: args[1],
      numArgs: 0
    };
  }
});
var digitToNumber = {
  "0": 0,
  "1": 1,
  "2": 2,
  "3": 3,
  "4": 4,
  "5": 5,
  "6": 6,
  "7": 7,
  "8": 8,
  "9": 9,
  "a": 10,
  "A": 10,
  "b": 11,
  "B": 11,
  "c": 12,
  "C": 12,
  "d": 13,
  "D": 13,
  "e": 14,
  "E": 14,
  "f": 15,
  "F": 15
};
defineMacro("\\char", function (context) {
  var token = context.popToken();
  var base;
  var number = "";
  if (token.text === "'") {
    base = 8;
    token = context.popToken();
  } else if (token.text === '"') {
    base = 16;
    token = context.popToken();
  } else if (token.text === "`") {
    token = context.popToken();
    if (token.text[0] === "\\") {
      number = token.text.charCodeAt(1);
    } else if (token.text === "EOF") {
      throw new ParseError("\\char` missing argument");
    } else {
      number = token.text.charCodeAt(0);
    }
  } else {
    base = 10;
  }
  if (base) {
    number = digitToNumber[token.text];
    if (number == null || number >= base) {
      throw new ParseError("Invalid base-" + base + " digit " + token.text);
    }
    var digit;
    while ((digit = digitToNumber[context.future().text]) != null && digit < base) {
      number *= base;
      number += digit;
      context.popToken();
    }
  }
  return "\\@char{" + number + "}";
});
var newcommand = (context, existsOK, nonexistsOK) => {
  var arg = context.consumeArg().tokens;
  if (arg.length !== 1) {
    throw new ParseError("\\newcommand's first argument must be a macro name");
  }
  var name = arg[0].text;
  var exists = context.isDefined(name);
  if (exists && !existsOK) {
    throw new ParseError("\\newcommand{" + name + "} attempting to redefine " + (name + "; use \\renewcommand"));
  }
  if (!exists && !nonexistsOK) {
    throw new ParseError("\\renewcommand{" + name + "} when command " + name + " does not yet exist; use \\newcommand");
  }
  var numArgs = 0;
  arg = context.consumeArg().tokens;
  if (arg.length === 1 && arg[0].text === "[") {
    var argText = "";
    var token = context.expandNextToken();
    while (token.text !== "]" && token.text !== "EOF") {
      argText += token.text;
      token = context.expandNextToken();
    }
    if (!argText.match(/^\s*[0-9]+\s*$/)) {
      throw new ParseError("Invalid number of arguments: " + argText);
    }
    numArgs = parseInt(argText);
    arg = context.consumeArg().tokens;
  }
  context.macros.set(name, {
    tokens: arg,
    numArgs
  });
  return "";
};
defineMacro("\\newcommand", context => newcommand(context, false, true));
defineMacro("\\renewcommand", context => newcommand(context, true, false));
defineMacro("\\providecommand", context => newcommand(context, true, true));
defineMacro("\\message", context => {
  var arg = context.consumeArgs(1)[0];
  console.log(arg.reverse().map(token => token.text).join(""));
  return "";
});
defineMacro("\\errmessage", context => {
  var arg = context.consumeArgs(1)[0];
  console.error(arg.reverse().map(token => token.text).join(""));
  return "";
});
defineMacro("\\show", context => {
  var tok = context.popToken();
  var name = tok.text;
  console.log(tok, context.macros.get(name), functions[name], symbols.math[name], symbols.text[name]);
  return "";
});
defineMacro("\\bgroup", "{");
defineMacro("\\egroup", "}");
defineMacro("~", "\\nobreakspace");
defineMacro("\\lq", "`");
defineMacro("\\rq", "'");
defineMacro("\\aa", "\\r a");
defineMacro("\\AA", "\\r A");
defineMacro("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`\xA9}");
defineMacro("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
defineMacro("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`\xAE}");
defineMacro("\u212C", "\\mathscr{B}");
defineMacro("\u2130", "\\mathscr{E}");
defineMacro("\u2131", "\\mathscr{F}");
defineMacro("\u210B", "\\mathscr{H}");
defineMacro("\u2110", "\\mathscr{I}");
defineMacro("\u2112", "\\mathscr{L}");
defineMacro("\u2133", "\\mathscr{M}");
defineMacro("\u211B", "\\mathscr{R}");
defineMacro("\u212D", "\\mathfrak{C}");
defineMacro("\u210C", "\\mathfrak{H}");
defineMacro("\u2128", "\\mathfrak{Z}");
defineMacro("\\Bbbk", "\\Bbb{k}");
defineMacro("\xB7", "\\cdotp");
defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
defineMacro("\\clap", "\\mathclap{\\textrm{#1}}");
defineMacro("\\mathstrut", "\\vphantom{(}");
defineMacro("\\underbar", "\\underline{\\text{#1}}");
defineMacro("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}');
defineMacro("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`\u2260}}");
defineMacro("\\ne", "\\neq");
defineMacro("\u2260", "\\neq");
defineMacro("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}{\\mathrel{\\char`\u2209}}");
defineMacro("\u2209", "\\notin");
defineMacro("\u2258", "\\html@mathml{\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}}{\\mathrel{\\char`\u2258}}");
defineMacro("\u2259", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`\u2258}}");
defineMacro("\u225A", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`\u225A}}");
defineMacro("\u225B", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}{\\mathrel{\\char`\u225B}}");
defineMacro("\u225D", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}{\\mathrel{\\char`\u225D}}");
defineMacro("\u225E", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}{\\mathrel{\\char`\u225E}}");
defineMacro("\u225F", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`\u225F}}");
defineMacro("\u27C2", "\\perp");
defineMacro("\u203C", "\\mathclose{!\\mkern-0.8mu!}");
defineMacro("\u220C", "\\notni");
defineMacro("\u231C", "\\ulcorner");
defineMacro("\u231D", "\\urcorner");
defineMacro("\u231E", "\\llcorner");
defineMacro("\u231F", "\\lrcorner");
defineMacro("\xA9", "\\copyright");
defineMacro("\xAE", "\\textregistered");
defineMacro("\uFE0F", "\\textregistered");
defineMacro("\\ulcorner", '\\html@mathml{\\@ulcorner}{\\mathop{\\char"231c}}');
defineMacro("\\urcorner", '\\html@mathml{\\@urcorner}{\\mathop{\\char"231d}}');
defineMacro("\\llcorner", '\\html@mathml{\\@llcorner}{\\mathop{\\char"231e}}');
defineMacro("\\lrcorner", '\\html@mathml{\\@lrcorner}{\\mathop{\\char"231f}}');
defineMacro("\\vdots", "\\mathord{\\varvdots\\rule{0pt}{15pt}}");
defineMacro("\u22EE", "\\vdots");
defineMacro("\\varGamma", "\\mathit{\\Gamma}");
defineMacro("\\varDelta", "\\mathit{\\Delta}");
defineMacro("\\varTheta", "\\mathit{\\Theta}");
defineMacro("\\varLambda", "\\mathit{\\Lambda}");
defineMacro("\\varXi", "\\mathit{\\Xi}");
defineMacro("\\varPi", "\\mathit{\\Pi}");
defineMacro("\\varSigma", "\\mathit{\\Sigma}");
defineMacro("\\varUpsilon", "\\mathit{\\Upsilon}");
defineMacro("\\varPhi", "\\mathit{\\Phi}");
defineMacro("\\varPsi", "\\mathit{\\Psi}");
defineMacro("\\varOmega", "\\mathit{\\Omega}");
defineMacro("\\substack", "\\begin{subarray}{c}#1\\end{subarray}");
defineMacro("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu\\relax");
defineMacro("\\boxed", "\\fbox{$\\displaystyle{#1}$}");
defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;");
var dotsByToken = {
  ",": "\\dotsc",
  "\\not": "\\dotsb",
  "+": "\\dotsb",
  "=": "\\dotsb",
  "<": "\\dotsb",
  ">": "\\dotsb",
  "-": "\\dotsb",
  "*": "\\dotsb",
  ":": "\\dotsb",
  "\\DOTSB": "\\dotsb",
  "\\coprod": "\\dotsb",
  "\\bigvee": "\\dotsb",
  "\\bigwedge": "\\dotsb",
  "\\biguplus": "\\dotsb",
  "\\bigcap": "\\dotsb",
  "\\bigcup": "\\dotsb",
  "\\prod": "\\dotsb",
  "\\sum": "\\dotsb",
  "\\bigotimes": "\\dotsb",
  "\\bigoplus": "\\dotsb",
  "\\bigodot": "\\dotsb",
  "\\bigsqcup": "\\dotsb",
  "\\And": "\\dotsb",
  "\\longrightarrow": "\\dotsb",
  "\\Longrightarrow": "\\dotsb",
  "\\longleftarrow": "\\dotsb",
  "\\Longleftarrow": "\\dotsb",
  "\\longleftrightarrow": "\\dotsb",
  "\\Longleftrightarrow": "\\dotsb",
  "\\mapsto": "\\dotsb",
  "\\longmapsto": "\\dotsb",
  "\\hookrightarrow": "\\dotsb",
  "\\doteq": "\\dotsb",
  "\\mathbin": "\\dotsb",
  "\\mathrel": "\\dotsb",
  "\\relbar": "\\dotsb",
  "\\Relbar": "\\dotsb",
  "\\xrightarrow": "\\dotsb",
  "\\xleftarrow": "\\dotsb",
  "\\DOTSI": "\\dotsi",
  "\\int": "\\dotsi",
  "\\oint": "\\dotsi",
  "\\iint": "\\dotsi",
  "\\iiint": "\\dotsi",
  "\\iiiint": "\\dotsi",
  "\\idotsint": "\\dotsi",
  "\\DOTSX": "\\dotsx"
};
defineMacro("\\dots", function (context) {
  var thedots = "\\dotso";
  var next = context.expandAfterFuture().text;
  if (next in dotsByToken) {
    thedots = dotsByToken[next];
  } else if (next.slice(0, 4) === "\\not") {
    thedots = "\\dotsb";
  } else if (next in symbols.math) {
    if (utils.contains(["bin", "rel"], symbols.math[next].group)) {
      thedots = "\\dotsb";
    }
  }
  return thedots;
});
var spaceAfterDots = {
  ")": true,
  "]": true,
  "\\rbrack": true,
  "\\}": true,
  "\\rbrace": true,
  "\\rangle": true,
  "\\rceil": true,
  "\\rfloor": true,
  "\\rgroup": true,
  "\\rmoustache": true,
  "\\right": true,
  "\\bigr": true,
  "\\biggr": true,
  "\\Bigr": true,
  "\\Biggr": true,
  "$": true,
  ";": true,
  ".": true,
  ",": true
};
defineMacro("\\dotso", function (context) {
  var next = context.future().text;
  if (next in spaceAfterDots) {
    return "\\ldots\\,";
  } else {
    return "\\ldots";
  }
});
defineMacro("\\dotsc", function (context) {
  var next = context.future().text;
  if (next in spaceAfterDots && next !== ",") {
    return "\\ldots\\,";
  } else {
    return "\\ldots";
  }
});
defineMacro("\\cdots", function (context) {
  var next = context.future().text;
  if (next in spaceAfterDots) {
    return "\\@cdots\\,";
  } else {
    return "\\@cdots";
  }
});
defineMacro("\\dotsb", "\\cdots");
defineMacro("\\dotsm", "\\cdots");
defineMacro("\\dotsi", "\\!\\cdots");
defineMacro("\\dotsx", "\\ldots\\,");
defineMacro("\\DOTSI", "\\relax");
defineMacro("\\DOTSB", "\\relax");
defineMacro("\\DOTSX", "\\relax");
defineMacro("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax");
defineMacro("\\,", "\\tmspace+{3mu}{.1667em}");
defineMacro("\\thinspace", "\\,");
defineMacro("\\>", "\\mskip{4mu}");
defineMacro("\\:", "\\tmspace+{4mu}{.2222em}");
defineMacro("\\medspace", "\\:");
defineMacro("\\;", "\\tmspace+{5mu}{.2777em}");
defineMacro("\\thickspace", "\\;");
defineMacro("\\!", "\\tmspace-{3mu}{.1667em}");
defineMacro("\\negthinspace", "\\!");
defineMacro("\\negmedspace", "\\tmspace-{4mu}{.2222em}");
defineMacro("\\negthickspace", "\\tmspace-{5mu}{.277em}");
defineMacro("\\enspace", "\\kern.5em ");
defineMacro("\\enskip", "\\hskip.5em\\relax");
defineMacro("\\quad", "\\hskip1em\\relax");
defineMacro("\\qquad", "\\hskip2em\\relax");
defineMacro("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
defineMacro("\\tag@paren", "\\tag@literal{({#1})}");
defineMacro("\\tag@literal", context => {
  if (context.macros.get("\\df@tag")) {
    throw new ParseError("Multiple \\tag");
  }
  return "\\gdef\\df@tag{\\text{#1}}";
});
defineMacro("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}\\mathbin{\\rm mod}\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
defineMacro("\\pod", "\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
defineMacro("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
defineMacro("\\mod", "\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}{\\rm mod}\\,\\,#1");
defineMacro("\\newline", "\\\\\\relax");
defineMacro("\\TeX", "\\textrm{\\html@mathml{T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX}{TeX}}");
var latexRaiseA = makeEm(fontMetricsData["Main-Regular"]["T".charCodeAt(0)][1] - 0.7 * fontMetricsData["Main-Regular"]["A".charCodeAt(0)][1]);
defineMacro("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}");
defineMacro("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}");
defineMacro("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
defineMacro("\\@hspace", "\\hskip #1\\relax");
defineMacro("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax");
defineMacro("\\ordinarycolon", ":");
defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}");
defineMacro("\\dblcolon", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}{\\mathop{\\char"2237}}');
defineMacro("\\coloneqq", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2254}}');
defineMacro("\\Coloneqq", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2237\\char"3d}}');
defineMacro("\\coloneq", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"3a\\char"2212}}');
defineMacro("\\Coloneq", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"2237\\char"2212}}');
defineMacro("\\eqqcolon", '\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2255}}');
defineMacro("\\Eqqcolon", '\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"3d\\char"2237}}');
defineMacro("\\eqcolon", '\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2239}}');
defineMacro("\\Eqcolon", '\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"2212\\char"2237}}');
defineMacro("\\colonapprox", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"3a\\char"2248}}');
defineMacro("\\Colonapprox", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"2237\\char"2248}}');
defineMacro("\\colonsim", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"3a\\char"223c}}');
defineMacro("\\Colonsim", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"2237\\char"223c}}');
defineMacro("\u2237", "\\dblcolon");
defineMacro("\u2239", "\\eqcolon");
defineMacro("\u2254", "\\coloneqq");
defineMacro("\u2255", "\\eqqcolon");
defineMacro("\u2A74", "\\Coloneqq");
defineMacro("\\ratio", "\\vcentcolon");
defineMacro("\\coloncolon", "\\dblcolon");
defineMacro("\\colonequals", "\\coloneqq");
defineMacro("\\coloncolonequals", "\\Coloneqq");
defineMacro("\\equalscolon", "\\eqqcolon");
defineMacro("\\equalscoloncolon", "\\Eqqcolon");
defineMacro("\\colonminus", "\\coloneq");
defineMacro("\\coloncolonminus", "\\Coloneq");
defineMacro("\\minuscolon", "\\eqcolon");
defineMacro("\\minuscoloncolon", "\\Eqcolon");
defineMacro("\\coloncolonapprox", "\\Colonapprox");
defineMacro("\\coloncolonsim", "\\Colonsim");
defineMacro("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
defineMacro("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
defineMacro("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
defineMacro("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}");
defineMacro("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`\u220C}}");
defineMacro("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
defineMacro("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}");
defineMacro("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
defineMacro("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
defineMacro("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
defineMacro("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
defineMacro("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
defineMacro("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}");
defineMacro("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{\u2269}");
defineMacro("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{\u2268}");
defineMacro("\\ngeqq", "\\html@mathml{\\@ngeqq}{\u2271}");
defineMacro("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{\u2271}");
defineMacro("\\nleqq", "\\html@mathml{\\@nleqq}{\u2270}");
defineMacro("\\nleqslant", "\\html@mathml{\\@nleqslant}{\u2270}");
defineMacro("\\nshortmid", "\\html@mathml{\\@nshortmid}{\u2224}");
defineMacro("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{\u2226}");
defineMacro("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{\u2288}");
defineMacro("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{\u2289}");
defineMacro("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{\u228A}");
defineMacro("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{\u2ACB}");
defineMacro("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{\u228B}");
defineMacro("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{\u2ACC}");
defineMacro("\\imath", "\\html@mathml{\\@imath}{\u0131}");
defineMacro("\\jmath", "\\html@mathml{\\@jmath}{\u0237}");
defineMacro("\\llbracket", "\\html@mathml{\\mathopen{[\\mkern-3.2mu[}}{\\mathopen{\\char`\u27E6}}");
defineMacro("\\rrbracket", "\\html@mathml{\\mathclose{]\\mkern-3.2mu]}}{\\mathclose{\\char`\u27E7}}");
defineMacro("\u27E6", "\\llbracket");
defineMacro("\u27E7", "\\rrbracket");
defineMacro("\\lBrace", "\\html@mathml{\\mathopen{\\{\\mkern-3.2mu[}}{\\mathopen{\\char`\u2983}}");
defineMacro("\\rBrace", "\\html@mathml{\\mathclose{]\\mkern-3.2mu\\}}}{\\mathclose{\\char`\u2984}}");
defineMacro("\u2983", "\\lBrace");
defineMacro("\u2984", "\\rBrace");
defineMacro("\\minuso", "\\mathbin{\\html@mathml{{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}{\\char`\u29B5}}");
defineMacro("\u29B5", "\\minuso");
defineMacro("\\darr", "\\downarrow");
defineMacro("\\dArr", "\\Downarrow");
defineMacro("\\Darr", "\\Downarrow");
defineMacro("\\lang", "\\langle");
defineMacro("\\rang", "\\rangle");
defineMacro("\\uarr", "\\uparrow");
defineMacro("\\uArr", "\\Uparrow");
defineMacro("\\Uarr", "\\Uparrow");
defineMacro("\\N", "\\mathbb{N}");
defineMacro("\\R", "\\mathbb{R}");
defineMacro("\\Z", "\\mathbb{Z}");
defineMacro("\\alef", "\\aleph");
defineMacro("\\alefsym", "\\aleph");
defineMacro("\\Alpha", "\\mathrm{A}");
defineMacro("\\Beta", "\\mathrm{B}");
defineMacro("\\bull", "\\bullet");
defineMacro("\\Chi", "\\mathrm{X}");
defineMacro("\\clubs", "\\clubsuit");
defineMacro("\\cnums", "\\mathbb{C}");
defineMacro("\\Complex", "\\mathbb{C}");
defineMacro("\\Dagger", "\\ddagger");
defineMacro("\\diamonds", "\\diamondsuit");
defineMacro("\\empty", "\\emptyset");
defineMacro("\\Epsilon", "\\mathrm{E}");
defineMacro("\\Eta", "\\mathrm{H}");
defineMacro("\\exist", "\\exists");
defineMacro("\\harr", "\\leftrightarrow");
defineMacro("\\hArr", "\\Leftrightarrow");
defineMacro("\\Harr", "\\Leftrightarrow");
defineMacro("\\hearts", "\\heartsuit");
defineMacro("\\image", "\\Im");
defineMacro("\\infin", "\\infty");
defineMacro("\\Iota", "\\mathrm{I}");
defineMacro("\\isin", "\\in");
defineMacro("\\Kappa", "\\mathrm{K}");
defineMacro("\\larr", "\\leftarrow");
defineMacro("\\lArr", "\\Leftarrow");
defineMacro("\\Larr", "\\Leftarrow");
defineMacro("\\lrarr", "\\leftrightarrow");
defineMacro("\\lrArr", "\\Leftrightarrow");
defineMacro("\\Lrarr", "\\Leftrightarrow");
defineMacro("\\Mu", "\\mathrm{M}");
defineMacro("\\natnums", "\\mathbb{N}");
defineMacro("\\Nu", "\\mathrm{N}");
defineMacro("\\Omicron", "\\mathrm{O}");
defineMacro("\\plusmn", "\\pm");
defineMacro("\\rarr", "\\rightarrow");
defineMacro("\\rArr", "\\Rightarrow");
defineMacro("\\Rarr", "\\Rightarrow");
defineMacro("\\real", "\\Re");
defineMacro("\\reals", "\\mathbb{R}");
defineMacro("\\Reals", "\\mathbb{R}");
defineMacro("\\Rho", "\\mathrm{P}");
defineMacro("\\sdot", "\\cdot");
defineMacro("\\sect", "\\S");
defineMacro("\\spades", "\\spadesuit");
defineMacro("\\sub", "\\subset");
defineMacro("\\sube", "\\subseteq");
defineMacro("\\supe", "\\supseteq");
defineMacro("\\Tau", "\\mathrm{T}");
defineMacro("\\thetasym", "\\vartheta");
defineMacro("\\weierp", "\\wp");
defineMacro("\\Zeta", "\\mathrm{Z}");
defineMacro("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
defineMacro("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
defineMacro("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits");
defineMacro("\\bra", "\\mathinner{\\langle{#1}|}");
defineMacro("\\ket", "\\mathinner{|{#1}\\rangle}");
defineMacro("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
defineMacro("\\Bra", "\\left\\langle#1\\right|");
defineMacro("\\Ket", "\\left|#1\\right\\rangle");
var braketHelper = one => context => {
  var left = context.consumeArg().tokens;
  var middle = context.consumeArg().tokens;
  var middleDouble = context.consumeArg().tokens;
  var right = context.consumeArg().tokens;
  var oldMiddle = context.macros.get("|");
  var oldMiddleDouble = context.macros.get("\\|");
  context.macros.beginGroup();
  var midMacro = double => context2 => {
    if (one) {
      context2.macros.set("|", oldMiddle);
      if (middleDouble.length) {
        context2.macros.set("\\|", oldMiddleDouble);
      }
    }
    var doubled = double;
    if (!double && middleDouble.length) {
      var nextToken = context2.future();
      if (nextToken.text === "|") {
        context2.popToken();
        doubled = true;
      }
    }
    return {
      tokens: doubled ? middleDouble : middle,
      numArgs: 0
    };
  };
  context.macros.set("|", midMacro(false));
  if (middleDouble.length) {
    context.macros.set("\\|", midMacro(true));
  }
  var arg = context.consumeArg().tokens;
  var expanded = context.expandTokens([...right, ...arg, ...left]);
  context.macros.endGroup();
  return {
    tokens: expanded.reverse(),
    numArgs: 0
  };
};
defineMacro("\\bra@ket", braketHelper(false));
defineMacro("\\bra@set", braketHelper(true));
defineMacro("\\Braket", "\\bra@ket{\\left\\langle}{\\,\\middle\\vert\\,}{\\,\\middle\\vert\\,}{\\right\\rangle}");
defineMacro("\\Set", "\\bra@set{\\left\\{\\:}{\\;\\middle\\vert\\;}{\\;\\middle\\Vert\\;}{\\:\\right\\}}");
defineMacro("\\set", "\\bra@set{\\{\\,}{\\mid}{}{\\,\\}}");
defineMacro("\\angln", "{\\angl n}");
defineMacro("\\blue", "\\textcolor{##6495ed}{#1}");
defineMacro("\\orange", "\\textcolor{##ffa500}{#1}");
defineMacro("\\pink", "\\textcolor{##ff00af}{#1}");
defineMacro("\\red", "\\textcolor{##df0030}{#1}");
defineMacro("\\green", "\\textcolor{##28ae7b}{#1}");
defineMacro("\\gray", "\\textcolor{gray}{#1}");
defineMacro("\\purple", "\\textcolor{##9d38bd}{#1}");
defineMacro("\\blueA", "\\textcolor{##ccfaff}{#1}");
defineMacro("\\blueB", "\\textcolor{##80f6ff}{#1}");
defineMacro("\\blueC", "\\textcolor{##63d9ea}{#1}");
defineMacro("\\blueD", "\\textcolor{##11accd}{#1}");
defineMacro("\\blueE", "\\textcolor{##0c7f99}{#1}");
defineMacro("\\tealA", "\\textcolor{##94fff5}{#1}");
defineMacro("\\tealB", "\\textcolor{##26edd5}{#1}");
defineMacro("\\tealC", "\\textcolor{##01d1c1}{#1}");
defineMacro("\\tealD", "\\textcolor{##01a995}{#1}");
defineMacro("\\tealE", "\\textcolor{##208170}{#1}");
defineMacro("\\greenA", "\\textcolor{##b6ffb0}{#1}");
defineMacro("\\greenB", "\\textcolor{##8af281}{#1}");
defineMacro("\\greenC", "\\textcolor{##74cf70}{#1}");
defineMacro("\\greenD", "\\textcolor{##1fab54}{#1}");
defineMacro("\\greenE", "\\textcolor{##0d923f}{#1}");
defineMacro("\\goldA", "\\textcolor{##ffd0a9}{#1}");
defineMacro("\\goldB", "\\textcolor{##ffbb71}{#1}");
defineMacro("\\goldC", "\\textcolor{##ff9c39}{#1}");
defineMacro("\\goldD", "\\textcolor{##e07d10}{#1}");
defineMacro("\\goldE", "\\textcolor{##a75a05}{#1}");
defineMacro("\\redA", "\\textcolor{##fca9a9}{#1}");
defineMacro("\\redB", "\\textcolor{##ff8482}{#1}");
defineMacro("\\redC", "\\textcolor{##f9685d}{#1}");
defineMacro("\\redD", "\\textcolor{##e84d39}{#1}");
defineMacro("\\redE", "\\textcolor{##bc2612}{#1}");
defineMacro("\\maroonA", "\\textcolor{##ffbde0}{#1}");
defineMacro("\\maroonB", "\\textcolor{##ff92c6}{#1}");
defineMacro("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
defineMacro("\\maroonD", "\\textcolor{##ca337c}{#1}");
defineMacro("\\maroonE", "\\textcolor{##9e034e}{#1}");
defineMacro("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
defineMacro("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
defineMacro("\\purpleC", "\\textcolor{##aa87ff}{#1}");
defineMacro("\\purpleD", "\\textcolor{##7854ab}{#1}");
defineMacro("\\purpleE", "\\textcolor{##543b78}{#1}");
defineMacro("\\mintA", "\\textcolor{##f5f9e8}{#1}");
defineMacro("\\mintB", "\\textcolor{##edf2df}{#1}");
defineMacro("\\mintC", "\\textcolor{##e0e5cc}{#1}");
defineMacro("\\grayA", "\\textcolor{##f6f7f7}{#1}");
defineMacro("\\grayB", "\\textcolor{##f0f1f2}{#1}");
defineMacro("\\grayC", "\\textcolor{##e3e5e6}{#1}");
defineMacro("\\grayD", "\\textcolor{##d6d8da}{#1}");
defineMacro("\\grayE", "\\textcolor{##babec2}{#1}");
defineMacro("\\grayF", "\\textcolor{##888d93}{#1}");
defineMacro("\\grayG", "\\textcolor{##626569}{#1}");
defineMacro("\\grayH", "\\textcolor{##3b3e40}{#1}");
defineMacro("\\grayI", "\\textcolor{##21242c}{#1}");
defineMacro("\\kaBlue", "\\textcolor{##314453}{#1}");
defineMacro("\\kaGreen", "\\textcolor{##71B307}{#1}");
var implicitCommands = {
  "^": true,
  "_": true,
  "\\limits": true,
  "\\nolimits": true
};
var MacroExpander = class {
  constructor(input, settings, mode) {
    this.settings = void 0;
    this.expansionCount = void 0;
    this.lexer = void 0;
    this.macros = void 0;
    this.stack = void 0;
    this.mode = void 0;
    this.settings = settings;
    this.expansionCount = 0;
    this.feed(input);
    this.macros = new Namespace(macros, settings.macros);
    this.mode = mode;
    this.stack = [];
  }
  feed(input) {
    this.lexer = new Lexer(input, this.settings);
  }
  switchMode(newMode) {
    this.mode = newMode;
  }
  beginGroup() {
    this.macros.beginGroup();
  }
  endGroup() {
    this.macros.endGroup();
  }
  endGroups() {
    this.macros.endGroups();
  }
  future() {
    if (this.stack.length === 0) {
      this.pushToken(this.lexer.lex());
    }
    return this.stack[this.stack.length - 1];
  }
  popToken() {
    this.future();
    return this.stack.pop();
  }
  pushToken(token) {
    this.stack.push(token);
  }
  pushTokens(tokens) {
    this.stack.push(...tokens);
  }
  scanArgument(isOptional) {
    var start;
    var end;
    var tokens;
    if (isOptional) {
      this.consumeSpaces();
      if (this.future().text !== "[") {
        return null;
      }
      start = this.popToken();
      ({
        tokens,
        end
      } = this.consumeArg(["]"]));
    } else {
      ({
        tokens,
        start,
        end
      } = this.consumeArg());
    }
    this.pushToken(new Token("EOF", end.loc));
    this.pushTokens(tokens);
    return start.range(end, "");
  }
  consumeSpaces() {
    for (;;) {
      var token = this.future();
      if (token.text === " ") {
        this.stack.pop();
      } else {
        break;
      }
    }
  }
  consumeArg(delims) {
    var tokens = [];
    var isDelimited = delims && delims.length > 0;
    if (!isDelimited) {
      this.consumeSpaces();
    }
    var start = this.future();
    var tok;
    var depth = 0;
    var match = 0;
    do {
      tok = this.popToken();
      tokens.push(tok);
      if (tok.text === "{") {
        ++depth;
      } else if (tok.text === "}") {
        --depth;
        if (depth === -1) {
          throw new ParseError("Extra }", tok);
        }
      } else if (tok.text === "EOF") {
        throw new ParseError("Unexpected end of input in a macro argument, expected '" + (delims && isDelimited ? delims[match] : "}") + "'", tok);
      }
      if (delims && isDelimited) {
        if ((depth === 0 || depth === 1 && delims[match] === "{") && tok.text === delims[match]) {
          ++match;
          if (match === delims.length) {
            tokens.splice(-match, match);
            break;
          }
        } else {
          match = 0;
        }
      }
    } while (depth !== 0 || isDelimited);
    if (start.text === "{" && tokens[tokens.length - 1].text === "}") {
      tokens.pop();
      tokens.shift();
    }
    tokens.reverse();
    return {
      tokens,
      start,
      end: tok
    };
  }
  consumeArgs(numArgs, delimiters2) {
    if (delimiters2) {
      if (delimiters2.length !== numArgs + 1) {
        throw new ParseError("The length of delimiters doesn't match the number of args!");
      }
      var delims = delimiters2[0];
      for (var i = 0; i < delims.length; i++) {
        var tok = this.popToken();
        if (delims[i] !== tok.text) {
          throw new ParseError("Use of the macro doesn't match its definition", tok);
        }
      }
    }
    var args = [];
    for (var _i = 0; _i < numArgs; _i++) {
      args.push(this.consumeArg(delimiters2 && delimiters2[_i + 1]).tokens);
    }
    return args;
  }
  countExpansion(amount) {
    this.expansionCount += amount;
    if (this.expansionCount > this.settings.maxExpand) {
      throw new ParseError("Too many expansions: infinite loop or need to increase maxExpand setting");
    }
  }
  expandOnce(expandableOnly) {
    var topToken = this.popToken();
    var name = topToken.text;
    var expansion = !topToken.noexpand ? this._getExpansion(name) : null;
    if (expansion == null || expandableOnly && expansion.unexpandable) {
      if (expandableOnly && expansion == null && name[0] === "\\" && !this.isDefined(name)) {
        throw new ParseError("Undefined control sequence: " + name);
      }
      this.pushToken(topToken);
      return false;
    }
    this.countExpansion(1);
    var tokens = expansion.tokens;
    var args = this.consumeArgs(expansion.numArgs, expansion.delimiters);
    if (expansion.numArgs) {
      tokens = tokens.slice();
      for (var i = tokens.length - 1; i >= 0; --i) {
        var tok = tokens[i];
        if (tok.text === "#") {
          if (i === 0) {
            throw new ParseError("Incomplete placeholder at end of macro body", tok);
          }
          tok = tokens[--i];
          if (tok.text === "#") {
            tokens.splice(i + 1, 1);
          } else if (/^[1-9]$/.test(tok.text)) {
            tokens.splice(i, 2, ...args[+tok.text - 1]);
          } else {
            throw new ParseError("Not a valid argument number", tok);
          }
        }
      }
    }
    this.pushTokens(tokens);
    return tokens.length;
  }
  expandAfterFuture() {
    this.expandOnce();
    return this.future();
  }
  expandNextToken() {
    for (;;) {
      if (this.expandOnce() === false) {
        var token = this.stack.pop();
        if (token.treatAsRelax) {
          token.text = "\\relax";
        }
        return token;
      }
    }
    throw new Error();
  }
  expandMacro(name) {
    return this.macros.has(name) ? this.expandTokens([new Token(name)]) : void 0;
  }
  expandTokens(tokens) {
    var output = [];
    var oldStackLength = this.stack.length;
    this.pushTokens(tokens);
    while (this.stack.length > oldStackLength) {
      if (this.expandOnce(true) === false) {
        var token = this.stack.pop();
        if (token.treatAsRelax) {
          token.noexpand = false;
          token.treatAsRelax = false;
        }
        output.push(token);
      }
    }
    this.countExpansion(output.length);
    return output;
  }
  expandMacroAsText(name) {
    var tokens = this.expandMacro(name);
    if (tokens) {
      return tokens.map(token => token.text).join("");
    } else {
      return tokens;
    }
  }
  _getExpansion(name) {
    var definition = this.macros.get(name);
    if (definition == null) {
      return definition;
    }
    if (name.length === 1) {
      var catcode = this.lexer.catcodes[name];
      if (catcode != null && catcode !== 13) {
        return;
      }
    }
    var expansion = typeof definition === "function" ? definition(this) : definition;
    if (typeof expansion === "string") {
      var numArgs = 0;
      if (expansion.indexOf("#") !== -1) {
        var stripped = expansion.replace(/##/g, "");
        while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
          ++numArgs;
        }
      }
      var bodyLexer = new Lexer(expansion, this.settings);
      var tokens = [];
      var tok = bodyLexer.lex();
      while (tok.text !== "EOF") {
        tokens.push(tok);
        tok = bodyLexer.lex();
      }
      tokens.reverse();
      var expanded = {
        tokens,
        numArgs
      };
      return expanded;
    }
    return expansion;
  }
  isDefined(name) {
    return this.macros.has(name) || functions.hasOwnProperty(name) || symbols.math.hasOwnProperty(name) || symbols.text.hasOwnProperty(name) || implicitCommands.hasOwnProperty(name);
  }
  isExpandable(name) {
    var macro = this.macros.get(name);
    return macro != null ? typeof macro === "string" || typeof macro === "function" || !macro.unexpandable : functions.hasOwnProperty(name) && !functions[name].primitive;
  }
};
var unicodeSubRegEx = /^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/;
var uSubsAndSups = Object.freeze({
  "\u208A": "+",
  "\u208B": "-",
  "\u208C": "=",
  "\u208D": "(",
  "\u208E": ")",
  "\u2080": "0",
  "\u2081": "1",
  "\u2082": "2",
  "\u2083": "3",
  "\u2084": "4",
  "\u2085": "5",
  "\u2086": "6",
  "\u2087": "7",
  "\u2088": "8",
  "\u2089": "9",
  "\u2090": "a",
  "\u2091": "e",
  "\u2095": "h",
  "\u1D62": "i",
  "\u2C7C": "j",
  "\u2096": "k",
  "\u2097": "l",
  "\u2098": "m",
  "\u2099": "n",
  "\u2092": "o",
  "\u209A": "p",
  "\u1D63": "r",
  "\u209B": "s",
  "\u209C": "t",
  "\u1D64": "u",
  "\u1D65": "v",
  "\u2093": "x",
  "\u1D66": "\u03B2",
  "\u1D67": "\u03B3",
  "\u1D68": "\u03C1",
  "\u1D69": "\u03D5",
  "\u1D6A": "\u03C7",
  "\u207A": "+",
  "\u207B": "-",
  "\u207C": "=",
  "\u207D": "(",
  "\u207E": ")",
  "\u2070": "0",
  "\xB9": "1",
  "\xB2": "2",
  "\xB3": "3",
  "\u2074": "4",
  "\u2075": "5",
  "\u2076": "6",
  "\u2077": "7",
  "\u2078": "8",
  "\u2079": "9",
  "\u1D2C": "A",
  "\u1D2E": "B",
  "\u1D30": "D",
  "\u1D31": "E",
  "\u1D33": "G",
  "\u1D34": "H",
  "\u1D35": "I",
  "\u1D36": "J",
  "\u1D37": "K",
  "\u1D38": "L",
  "\u1D39": "M",
  "\u1D3A": "N",
  "\u1D3C": "O",
  "\u1D3E": "P",
  "\u1D3F": "R",
  "\u1D40": "T",
  "\u1D41": "U",
  "\u2C7D": "V",
  "\u1D42": "W",
  "\u1D43": "a",
  "\u1D47": "b",
  "\u1D9C": "c",
  "\u1D48": "d",
  "\u1D49": "e",
  "\u1DA0": "f",
  "\u1D4D": "g",
  "\u02B0": "h",
  "\u2071": "i",
  "\u02B2": "j",
  "\u1D4F": "k",
  "\u02E1": "l",
  "\u1D50": "m",
  "\u207F": "n",
  "\u1D52": "o",
  "\u1D56": "p",
  "\u02B3": "r",
  "\u02E2": "s",
  "\u1D57": "t",
  "\u1D58": "u",
  "\u1D5B": "v",
  "\u02B7": "w",
  "\u02E3": "x",
  "\u02B8": "y",
  "\u1DBB": "z",
  "\u1D5D": "\u03B2",
  "\u1D5E": "\u03B3",
  "\u1D5F": "\u03B4",
  "\u1D60": "\u03D5",
  "\u1D61": "\u03C7",
  "\u1DBF": "\u03B8"
});
var unicodeAccents = {
  "\u0301": {
    "text": "\\'",
    "math": "\\acute"
  },
  "\u0300": {
    "text": "\\`",
    "math": "\\grave"
  },
  "\u0308": {
    "text": '\\"',
    "math": "\\ddot"
  },
  "\u0303": {
    "text": "\\~",
    "math": "\\tilde"
  },
  "\u0304": {
    "text": "\\=",
    "math": "\\bar"
  },
  "\u0306": {
    "text": "\\u",
    "math": "\\breve"
  },
  "\u030C": {
    "text": "\\v",
    "math": "\\check"
  },
  "\u0302": {
    "text": "\\^",
    "math": "\\hat"
  },
  "\u0307": {
    "text": "\\.",
    "math": "\\dot"
  },
  "\u030A": {
    "text": "\\r",
    "math": "\\mathring"
  },
  "\u030B": {
    "text": "\\H"
  },
  "\u0327": {
    "text": "\\c"
  }
};
var unicodeSymbols = {
  "\xE1": "a\u0301",
  "\xE0": "a\u0300",
  "\xE4": "a\u0308",
  "\u01DF": "a\u0308\u0304",
  "\xE3": "a\u0303",
  "\u0101": "a\u0304",
  "\u0103": "a\u0306",
  "\u1EAF": "a\u0306\u0301",
  "\u1EB1": "a\u0306\u0300",
  "\u1EB5": "a\u0306\u0303",
  "\u01CE": "a\u030C",
  "\xE2": "a\u0302",
  "\u1EA5": "a\u0302\u0301",
  "\u1EA7": "a\u0302\u0300",
  "\u1EAB": "a\u0302\u0303",
  "\u0227": "a\u0307",
  "\u01E1": "a\u0307\u0304",
  "\xE5": "a\u030A",
  "\u01FB": "a\u030A\u0301",
  "\u1E03": "b\u0307",
  "\u0107": "c\u0301",
  "\u1E09": "c\u0327\u0301",
  "\u010D": "c\u030C",
  "\u0109": "c\u0302",
  "\u010B": "c\u0307",
  "\xE7": "c\u0327",
  "\u010F": "d\u030C",
  "\u1E0B": "d\u0307",
  "\u1E11": "d\u0327",
  "\xE9": "e\u0301",
  "\xE8": "e\u0300",
  "\xEB": "e\u0308",
  "\u1EBD": "e\u0303",
  "\u0113": "e\u0304",
  "\u1E17": "e\u0304\u0301",
  "\u1E15": "e\u0304\u0300",
  "\u0115": "e\u0306",
  "\u1E1D": "e\u0327\u0306",
  "\u011B": "e\u030C",
  "\xEA": "e\u0302",
  "\u1EBF": "e\u0302\u0301",
  "\u1EC1": "e\u0302\u0300",
  "\u1EC5": "e\u0302\u0303",
  "\u0117": "e\u0307",
  "\u0229": "e\u0327",
  "\u1E1F": "f\u0307",
  "\u01F5": "g\u0301",
  "\u1E21": "g\u0304",
  "\u011F": "g\u0306",
  "\u01E7": "g\u030C",
  "\u011D": "g\u0302",
  "\u0121": "g\u0307",
  "\u0123": "g\u0327",
  "\u1E27": "h\u0308",
  "\u021F": "h\u030C",
  "\u0125": "h\u0302",
  "\u1E23": "h\u0307",
  "\u1E29": "h\u0327",
  "\xED": "i\u0301",
  "\xEC": "i\u0300",
  "\xEF": "i\u0308",
  "\u1E2F": "i\u0308\u0301",
  "\u0129": "i\u0303",
  "\u012B": "i\u0304",
  "\u012D": "i\u0306",
  "\u01D0": "i\u030C",
  "\xEE": "i\u0302",
  "\u01F0": "j\u030C",
  "\u0135": "j\u0302",
  "\u1E31": "k\u0301",
  "\u01E9": "k\u030C",
  "\u0137": "k\u0327",
  "\u013A": "l\u0301",
  "\u013E": "l\u030C",
  "\u013C": "l\u0327",
  "\u1E3F": "m\u0301",
  "\u1E41": "m\u0307",
  "\u0144": "n\u0301",
  "\u01F9": "n\u0300",
  "\xF1": "n\u0303",
  "\u0148": "n\u030C",
  "\u1E45": "n\u0307",
  "\u0146": "n\u0327",
  "\xF3": "o\u0301",
  "\xF2": "o\u0300",
  "\xF6": "o\u0308",
  "\u022B": "o\u0308\u0304",
  "\xF5": "o\u0303",
  "\u1E4D": "o\u0303\u0301",
  "\u1E4F": "o\u0303\u0308",
  "\u022D": "o\u0303\u0304",
  "\u014D": "o\u0304",
  "\u1E53": "o\u0304\u0301",
  "\u1E51": "o\u0304\u0300",
  "\u014F": "o\u0306",
  "\u01D2": "o\u030C",
  "\xF4": "o\u0302",
  "\u1ED1": "o\u0302\u0301",
  "\u1ED3": "o\u0302\u0300",
  "\u1ED7": "o\u0302\u0303",
  "\u022F": "o\u0307",
  "\u0231": "o\u0307\u0304",
  "\u0151": "o\u030B",
  "\u1E55": "p\u0301",
  "\u1E57": "p\u0307",
  "\u0155": "r\u0301",
  "\u0159": "r\u030C",
  "\u1E59": "r\u0307",
  "\u0157": "r\u0327",
  "\u015B": "s\u0301",
  "\u1E65": "s\u0301\u0307",
  "\u0161": "s\u030C",
  "\u1E67": "s\u030C\u0307",
  "\u015D": "s\u0302",
  "\u1E61": "s\u0307",
  "\u015F": "s\u0327",
  "\u1E97": "t\u0308",
  "\u0165": "t\u030C",
  "\u1E6B": "t\u0307",
  "\u0163": "t\u0327",
  "\xFA": "u\u0301",
  "\xF9": "u\u0300",
  "\xFC": "u\u0308",
  "\u01D8": "u\u0308\u0301",
  "\u01DC": "u\u0308\u0300",
  "\u01D6": "u\u0308\u0304",
  "\u01DA": "u\u0308\u030C",
  "\u0169": "u\u0303",
  "\u1E79": "u\u0303\u0301",
  "\u016B": "u\u0304",
  "\u1E7B": "u\u0304\u0308",
  "\u016D": "u\u0306",
  "\u01D4": "u\u030C",
  "\xFB": "u\u0302",
  "\u016F": "u\u030A",
  "\u0171": "u\u030B",
  "\u1E7D": "v\u0303",
  "\u1E83": "w\u0301",
  "\u1E81": "w\u0300",
  "\u1E85": "w\u0308",
  "\u0175": "w\u0302",
  "\u1E87": "w\u0307",
  "\u1E98": "w\u030A",
  "\u1E8D": "x\u0308",
  "\u1E8B": "x\u0307",
  "\xFD": "y\u0301",
  "\u1EF3": "y\u0300",
  "\xFF": "y\u0308",
  "\u1EF9": "y\u0303",
  "\u0233": "y\u0304",
  "\u0177": "y\u0302",
  "\u1E8F": "y\u0307",
  "\u1E99": "y\u030A",
  "\u017A": "z\u0301",
  "\u017E": "z\u030C",
  "\u1E91": "z\u0302",
  "\u017C": "z\u0307",
  "\xC1": "A\u0301",
  "\xC0": "A\u0300",
  "\xC4": "A\u0308",
  "\u01DE": "A\u0308\u0304",
  "\xC3": "A\u0303",
  "\u0100": "A\u0304",
  "\u0102": "A\u0306",
  "\u1EAE": "A\u0306\u0301",
  "\u1EB0": "A\u0306\u0300",
  "\u1EB4": "A\u0306\u0303",
  "\u01CD": "A\u030C",
  "\xC2": "A\u0302",
  "\u1EA4": "A\u0302\u0301",
  "\u1EA6": "A\u0302\u0300",
  "\u1EAA": "A\u0302\u0303",
  "\u0226": "A\u0307",
  "\u01E0": "A\u0307\u0304",
  "\xC5": "A\u030A",
  "\u01FA": "A\u030A\u0301",
  "\u1E02": "B\u0307",
  "\u0106": "C\u0301",
  "\u1E08": "C\u0327\u0301",
  "\u010C": "C\u030C",
  "\u0108": "C\u0302",
  "\u010A": "C\u0307",
  "\xC7": "C\u0327",
  "\u010E": "D\u030C",
  "\u1E0A": "D\u0307",
  "\u1E10": "D\u0327",
  "\xC9": "E\u0301",
  "\xC8": "E\u0300",
  "\xCB": "E\u0308",
  "\u1EBC": "E\u0303",
  "\u0112": "E\u0304",
  "\u1E16": "E\u0304\u0301",
  "\u1E14": "E\u0304\u0300",
  "\u0114": "E\u0306",
  "\u1E1C": "E\u0327\u0306",
  "\u011A": "E\u030C",
  "\xCA": "E\u0302",
  "\u1EBE": "E\u0302\u0301",
  "\u1EC0": "E\u0302\u0300",
  "\u1EC4": "E\u0302\u0303",
  "\u0116": "E\u0307",
  "\u0228": "E\u0327",
  "\u1E1E": "F\u0307",
  "\u01F4": "G\u0301",
  "\u1E20": "G\u0304",
  "\u011E": "G\u0306",
  "\u01E6": "G\u030C",
  "\u011C": "G\u0302",
  "\u0120": "G\u0307",
  "\u0122": "G\u0327",
  "\u1E26": "H\u0308",
  "\u021E": "H\u030C",
  "\u0124": "H\u0302",
  "\u1E22": "H\u0307",
  "\u1E28": "H\u0327",
  "\xCD": "I\u0301",
  "\xCC": "I\u0300",
  "\xCF": "I\u0308",
  "\u1E2E": "I\u0308\u0301",
  "\u0128": "I\u0303",
  "\u012A": "I\u0304",
  "\u012C": "I\u0306",
  "\u01CF": "I\u030C",
  "\xCE": "I\u0302",
  "\u0130": "I\u0307",
  "\u0134": "J\u0302",
  "\u1E30": "K\u0301",
  "\u01E8": "K\u030C",
  "\u0136": "K\u0327",
  "\u0139": "L\u0301",
  "\u013D": "L\u030C",
  "\u013B": "L\u0327",
  "\u1E3E": "M\u0301",
  "\u1E40": "M\u0307",
  "\u0143": "N\u0301",
  "\u01F8": "N\u0300",
  "\xD1": "N\u0303",
  "\u0147": "N\u030C",
  "\u1E44": "N\u0307",
  "\u0145": "N\u0327",
  "\xD3": "O\u0301",
  "\xD2": "O\u0300",
  "\xD6": "O\u0308",
  "\u022A": "O\u0308\u0304",
  "\xD5": "O\u0303",
  "\u1E4C": "O\u0303\u0301",
  "\u1E4E": "O\u0303\u0308",
  "\u022C": "O\u0303\u0304",
  "\u014C": "O\u0304",
  "\u1E52": "O\u0304\u0301",
  "\u1E50": "O\u0304\u0300",
  "\u014E": "O\u0306",
  "\u01D1": "O\u030C",
  "\xD4": "O\u0302",
  "\u1ED0": "O\u0302\u0301",
  "\u1ED2": "O\u0302\u0300",
  "\u1ED6": "O\u0302\u0303",
  "\u022E": "O\u0307",
  "\u0230": "O\u0307\u0304",
  "\u0150": "O\u030B",
  "\u1E54": "P\u0301",
  "\u1E56": "P\u0307",
  "\u0154": "R\u0301",
  "\u0158": "R\u030C",
  "\u1E58": "R\u0307",
  "\u0156": "R\u0327",
  "\u015A": "S\u0301",
  "\u1E64": "S\u0301\u0307",
  "\u0160": "S\u030C",
  "\u1E66": "S\u030C\u0307",
  "\u015C": "S\u0302",
  "\u1E60": "S\u0307",
  "\u015E": "S\u0327",
  "\u0164": "T\u030C",
  "\u1E6A": "T\u0307",
  "\u0162": "T\u0327",
  "\xDA": "U\u0301",
  "\xD9": "U\u0300",
  "\xDC": "U\u0308",
  "\u01D7": "U\u0308\u0301",
  "\u01DB": "U\u0308\u0300",
  "\u01D5": "U\u0308\u0304",
  "\u01D9": "U\u0308\u030C",
  "\u0168": "U\u0303",
  "\u1E78": "U\u0303\u0301",
  "\u016A": "U\u0304",
  "\u1E7A": "U\u0304\u0308",
  "\u016C": "U\u0306",
  "\u01D3": "U\u030C",
  "\xDB": "U\u0302",
  "\u016E": "U\u030A",
  "\u0170": "U\u030B",
  "\u1E7C": "V\u0303",
  "\u1E82": "W\u0301",
  "\u1E80": "W\u0300",
  "\u1E84": "W\u0308",
  "\u0174": "W\u0302",
  "\u1E86": "W\u0307",
  "\u1E8C": "X\u0308",
  "\u1E8A": "X\u0307",
  "\xDD": "Y\u0301",
  "\u1EF2": "Y\u0300",
  "\u0178": "Y\u0308",
  "\u1EF8": "Y\u0303",
  "\u0232": "Y\u0304",
  "\u0176": "Y\u0302",
  "\u1E8E": "Y\u0307",
  "\u0179": "Z\u0301",
  "\u017D": "Z\u030C",
  "\u1E90": "Z\u0302",
  "\u017B": "Z\u0307",
  "\u03AC": "\u03B1\u0301",
  "\u1F70": "\u03B1\u0300",
  "\u1FB1": "\u03B1\u0304",
  "\u1FB0": "\u03B1\u0306",
  "\u03AD": "\u03B5\u0301",
  "\u1F72": "\u03B5\u0300",
  "\u03AE": "\u03B7\u0301",
  "\u1F74": "\u03B7\u0300",
  "\u03AF": "\u03B9\u0301",
  "\u1F76": "\u03B9\u0300",
  "\u03CA": "\u03B9\u0308",
  "\u0390": "\u03B9\u0308\u0301",
  "\u1FD2": "\u03B9\u0308\u0300",
  "\u1FD1": "\u03B9\u0304",
  "\u1FD0": "\u03B9\u0306",
  "\u03CC": "\u03BF\u0301",
  "\u1F78": "\u03BF\u0300",
  "\u03CD": "\u03C5\u0301",
  "\u1F7A": "\u03C5\u0300",
  "\u03CB": "\u03C5\u0308",
  "\u03B0": "\u03C5\u0308\u0301",
  "\u1FE2": "\u03C5\u0308\u0300",
  "\u1FE1": "\u03C5\u0304",
  "\u1FE0": "\u03C5\u0306",
  "\u03CE": "\u03C9\u0301",
  "\u1F7C": "\u03C9\u0300",
  "\u038E": "\u03A5\u0301",
  "\u1FEA": "\u03A5\u0300",
  "\u03AB": "\u03A5\u0308",
  "\u1FE9": "\u03A5\u0304",
  "\u1FE8": "\u03A5\u0306",
  "\u038F": "\u03A9\u0301",
  "\u1FFA": "\u03A9\u0300"
};
var Parser = class {
  constructor(input, settings) {
    this.mode = void 0;
    this.gullet = void 0;
    this.settings = void 0;
    this.leftrightDepth = void 0;
    this.nextToken = void 0;
    this.mode = "math";
    this.gullet = new MacroExpander(input, settings, this.mode);
    this.settings = settings;
    this.leftrightDepth = 0;
  }
  expect(text2, consume) {
    if (consume === void 0) {
      consume = true;
    }
    if (this.fetch().text !== text2) {
      throw new ParseError("Expected '" + text2 + "', got '" + this.fetch().text + "'", this.fetch());
    }
    if (consume) {
      this.consume();
    }
  }
  consume() {
    this.nextToken = null;
  }
  fetch() {
    if (this.nextToken == null) {
      this.nextToken = this.gullet.expandNextToken();
    }
    return this.nextToken;
  }
  switchMode(newMode) {
    this.mode = newMode;
    this.gullet.switchMode(newMode);
  }
  parse() {
    if (!this.settings.globalGroup) {
      this.gullet.beginGroup();
    }
    if (this.settings.colorIsTextColor) {
      this.gullet.macros.set("\\color", "\\textcolor");
    }
    try {
      var parse = this.parseExpression(false);
      this.expect("EOF");
      if (!this.settings.globalGroup) {
        this.gullet.endGroup();
      }
      return parse;
    } finally {
      this.gullet.endGroups();
    }
  }
  subparse(tokens) {
    var oldToken = this.nextToken;
    this.consume();
    this.gullet.pushToken(new Token("}"));
    this.gullet.pushTokens(tokens);
    var parse = this.parseExpression(false);
    this.expect("}");
    this.nextToken = oldToken;
    return parse;
  }
  parseExpression(breakOnInfix, breakOnTokenText) {
    var body = [];
    while (true) {
      if (this.mode === "math") {
        this.consumeSpaces();
      }
      var lex = this.fetch();
      if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
        break;
      }
      if (breakOnTokenText && lex.text === breakOnTokenText) {
        break;
      }
      if (breakOnInfix && functions[lex.text] && functions[lex.text].infix) {
        break;
      }
      var atom = this.parseAtom(breakOnTokenText);
      if (!atom) {
        break;
      } else if (atom.type === "internal") {
        continue;
      }
      body.push(atom);
    }
    if (this.mode === "text") {
      this.formLigatures(body);
    }
    return this.handleInfixNodes(body);
  }
  handleInfixNodes(body) {
    var overIndex = -1;
    var funcName;
    for (var i = 0; i < body.length; i++) {
      if (body[i].type === "infix") {
        if (overIndex !== -1) {
          throw new ParseError("only one infix operator per group", body[i].token);
        }
        overIndex = i;
        funcName = body[i].replaceWith;
      }
    }
    if (overIndex !== -1 && funcName) {
      var numerNode;
      var denomNode;
      var numerBody = body.slice(0, overIndex);
      var denomBody = body.slice(overIndex + 1);
      if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
        numerNode = numerBody[0];
      } else {
        numerNode = {
          type: "ordgroup",
          mode: this.mode,
          body: numerBody
        };
      }
      if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
        denomNode = denomBody[0];
      } else {
        denomNode = {
          type: "ordgroup",
          mode: this.mode,
          body: denomBody
        };
      }
      var node;
      if (funcName === "\\\\abovefrac") {
        node = this.callFunction(funcName, [numerNode, body[overIndex], denomNode], []);
      } else {
        node = this.callFunction(funcName, [numerNode, denomNode], []);
      }
      return [node];
    } else {
      return body;
    }
  }
  handleSupSubscript(name) {
    var symbolToken = this.fetch();
    var symbol = symbolToken.text;
    this.consume();
    this.consumeSpaces();
    var group = this.parseGroup(name);
    if (!group) {
      throw new ParseError("Expected group after '" + symbol + "'", symbolToken);
    }
    return group;
  }
  formatUnsupportedCmd(text2) {
    var textordArray = [];
    for (var i = 0; i < text2.length; i++) {
      textordArray.push({
        type: "textord",
        mode: "text",
        text: text2[i]
      });
    }
    var textNode = {
      type: "text",
      mode: this.mode,
      body: textordArray
    };
    var colorNode = {
      type: "color",
      mode: this.mode,
      color: this.settings.errorColor,
      body: [textNode]
    };
    return colorNode;
  }
  parseAtom(breakOnTokenText) {
    var base = this.parseGroup("atom", breakOnTokenText);
    if (this.mode === "text") {
      return base;
    }
    var superscript;
    var subscript;
    while (true) {
      this.consumeSpaces();
      var lex = this.fetch();
      if (lex.text === "\\limits" || lex.text === "\\nolimits") {
        if (base && base.type === "op") {
          var limits = lex.text === "\\limits";
          base.limits = limits;
          base.alwaysHandleSupSub = true;
        } else if (base && base.type === "operatorname") {
          if (base.alwaysHandleSupSub) {
            base.limits = lex.text === "\\limits";
          }
        } else {
          throw new ParseError("Limit controls must follow a math operator", lex);
        }
        this.consume();
      } else if (lex.text === "^") {
        if (superscript) {
          throw new ParseError("Double superscript", lex);
        }
        superscript = this.handleSupSubscript("superscript");
      } else if (lex.text === "_") {
        if (subscript) {
          throw new ParseError("Double subscript", lex);
        }
        subscript = this.handleSupSubscript("subscript");
      } else if (lex.text === "'") {
        if (superscript) {
          throw new ParseError("Double superscript", lex);
        }
        var prime = {
          type: "textord",
          mode: this.mode,
          text: "\\prime"
        };
        var primes = [prime];
        this.consume();
        while (this.fetch().text === "'") {
          primes.push(prime);
          this.consume();
        }
        if (this.fetch().text === "^") {
          primes.push(this.handleSupSubscript("superscript"));
        }
        superscript = {
          type: "ordgroup",
          mode: this.mode,
          body: primes
        };
      } else if (uSubsAndSups[lex.text]) {
        var isSub = unicodeSubRegEx.test(lex.text);
        var subsupTokens = [];
        subsupTokens.push(new Token(uSubsAndSups[lex.text]));
        this.consume();
        while (true) {
          var token = this.fetch().text;
          if (!uSubsAndSups[token]) {
            break;
          }
          if (unicodeSubRegEx.test(token) !== isSub) {
            break;
          }
          subsupTokens.unshift(new Token(uSubsAndSups[token]));
          this.consume();
        }
        var body = this.subparse(subsupTokens);
        if (isSub) {
          subscript = {
            type: "ordgroup",
            mode: "math",
            body
          };
        } else {
          superscript = {
            type: "ordgroup",
            mode: "math",
            body
          };
        }
      } else {
        break;
      }
    }
    if (superscript || subscript) {
      return {
        type: "supsub",
        mode: this.mode,
        base,
        sup: superscript,
        sub: subscript
      };
    } else {
      return base;
    }
  }
  parseFunction(breakOnTokenText, name) {
    var token = this.fetch();
    var func = token.text;
    var funcData = functions[func];
    if (!funcData) {
      return null;
    }
    this.consume();
    if (name && name !== "atom" && !funcData.allowedInArgument) {
      throw new ParseError("Got function '" + func + "' with no arguments" + (name ? " as " + name : ""), token);
    } else if (this.mode === "text" && !funcData.allowedInText) {
      throw new ParseError("Can't use function '" + func + "' in text mode", token);
    } else if (this.mode === "math" && funcData.allowedInMath === false) {
      throw new ParseError("Can't use function '" + func + "' in math mode", token);
    }
    var {
      args,
      optArgs
    } = this.parseArguments(func, funcData);
    return this.callFunction(func, args, optArgs, token, breakOnTokenText);
  }
  callFunction(name, args, optArgs, token, breakOnTokenText) {
    var context = {
      funcName: name,
      parser: this,
      token,
      breakOnTokenText
    };
    var func = functions[name];
    if (func && func.handler) {
      return func.handler(context, args, optArgs);
    } else {
      throw new ParseError("No function handler for " + name);
    }
  }
  parseArguments(func, funcData) {
    var totalArgs = funcData.numArgs + funcData.numOptionalArgs;
    if (totalArgs === 0) {
      return {
        args: [],
        optArgs: []
      };
    }
    var args = [];
    var optArgs = [];
    for (var i = 0; i < totalArgs; i++) {
      var argType = funcData.argTypes && funcData.argTypes[i];
      var isOptional = i < funcData.numOptionalArgs;
      if (funcData.primitive && argType == null || funcData.type === "sqrt" && i === 1 && optArgs[0] == null) {
        argType = "primitive";
      }
      var arg = this.parseGroupOfType("argument to '" + func + "'", argType, isOptional);
      if (isOptional) {
        optArgs.push(arg);
      } else if (arg != null) {
        args.push(arg);
      } else {
        throw new ParseError("Null argument, please report this as a bug");
      }
    }
    return {
      args,
      optArgs
    };
  }
  parseGroupOfType(name, type, optional) {
    switch (type) {
      case "color":
        return this.parseColorGroup(optional);
      case "size":
        return this.parseSizeGroup(optional);
      case "url":
        return this.parseUrlGroup(optional);
      case "math":
      case "text":
        return this.parseArgumentGroup(optional, type);
      case "hbox":
        {
          var group = this.parseArgumentGroup(optional, "text");
          return group != null ? {
            type: "styling",
            mode: group.mode,
            body: [group],
            style: "text"
          } : null;
        }
      case "raw":
        {
          var token = this.parseStringGroup("raw", optional);
          return token != null ? {
            type: "raw",
            mode: "text",
            string: token.text
          } : null;
        }
      case "primitive":
        {
          if (optional) {
            throw new ParseError("A primitive argument cannot be optional");
          }
          var _group = this.parseGroup(name);
          if (_group == null) {
            throw new ParseError("Expected group as " + name, this.fetch());
          }
          return _group;
        }
      case "original":
      case null:
      case void 0:
        return this.parseArgumentGroup(optional);
      default:
        throw new ParseError("Unknown group type as " + name, this.fetch());
    }
  }
  consumeSpaces() {
    while (this.fetch().text === " ") {
      this.consume();
    }
  }
  parseStringGroup(modeName, optional) {
    var argToken = this.gullet.scanArgument(optional);
    if (argToken == null) {
      return null;
    }
    var str = "";
    var nextToken;
    while ((nextToken = this.fetch()).text !== "EOF") {
      str += nextToken.text;
      this.consume();
    }
    this.consume();
    argToken.text = str;
    return argToken;
  }
  parseRegexGroup(regex, modeName) {
    var firstToken = this.fetch();
    var lastToken = firstToken;
    var str = "";
    var nextToken;
    while ((nextToken = this.fetch()).text !== "EOF" && regex.test(str + nextToken.text)) {
      lastToken = nextToken;
      str += lastToken.text;
      this.consume();
    }
    if (str === "") {
      throw new ParseError("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
    }
    return firstToken.range(lastToken, str);
  }
  parseColorGroup(optional) {
    var res = this.parseStringGroup("color", optional);
    if (res == null) {
      return null;
    }
    var match = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);
    if (!match) {
      throw new ParseError("Invalid color: '" + res.text + "'", res);
    }
    var color = match[0];
    if (/^[0-9a-f]{6}$/i.test(color)) {
      color = "#" + color;
    }
    return {
      type: "color-token",
      mode: this.mode,
      color
    };
  }
  parseSizeGroup(optional) {
    var res;
    var isBlank = false;
    this.gullet.consumeSpaces();
    if (!optional && this.gullet.future().text !== "{") {
      res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
    } else {
      res = this.parseStringGroup("size", optional);
    }
    if (!res) {
      return null;
    }
    if (!optional && res.text.length === 0) {
      res.text = "0pt";
      isBlank = true;
    }
    var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);
    if (!match) {
      throw new ParseError("Invalid size: '" + res.text + "'", res);
    }
    var data = {
      number: +(match[1] + match[2]),
      unit: match[3]
    };
    if (!validUnit(data)) {
      throw new ParseError("Invalid unit: '" + data.unit + "'", res);
    }
    return {
      type: "size",
      mode: this.mode,
      value: data,
      isBlank
    };
  }
  parseUrlGroup(optional) {
    this.gullet.lexer.setCatcode("%", 13);
    this.gullet.lexer.setCatcode("~", 12);
    var res = this.parseStringGroup("url", optional);
    this.gullet.lexer.setCatcode("%", 14);
    this.gullet.lexer.setCatcode("~", 13);
    if (res == null) {
      return null;
    }
    var url = res.text.replace(/\\([#$%&~_^{}])/g, "$1");
    return {
      type: "url",
      mode: this.mode,
      url
    };
  }
  parseArgumentGroup(optional, mode) {
    var argToken = this.gullet.scanArgument(optional);
    if (argToken == null) {
      return null;
    }
    var outerMode = this.mode;
    if (mode) {
      this.switchMode(mode);
    }
    this.gullet.beginGroup();
    var expression = this.parseExpression(false, "EOF");
    this.expect("EOF");
    this.gullet.endGroup();
    var result = {
      type: "ordgroup",
      mode: this.mode,
      loc: argToken.loc,
      body: expression
    };
    if (mode) {
      this.switchMode(outerMode);
    }
    return result;
  }
  parseGroup(name, breakOnTokenText) {
    var firstToken = this.fetch();
    var text2 = firstToken.text;
    var result;
    if (text2 === "{" || text2 === "\\begingroup") {
      this.consume();
      var groupEnd = text2 === "{" ? "}" : "\\endgroup";
      this.gullet.beginGroup();
      var expression = this.parseExpression(false, groupEnd);
      var lastToken = this.fetch();
      this.expect(groupEnd);
      this.gullet.endGroup();
      result = {
        type: "ordgroup",
        mode: this.mode,
        loc: SourceLocation.range(firstToken, lastToken),
        body: expression,
        semisimple: text2 === "\\begingroup" || void 0
      };
    } else {
      result = this.parseFunction(breakOnTokenText, name) || this.parseSymbol();
      if (result == null && text2[0] === "\\" && !implicitCommands.hasOwnProperty(text2)) {
        if (this.settings.throwOnError) {
          throw new ParseError("Undefined control sequence: " + text2, firstToken);
        }
        result = this.formatUnsupportedCmd(text2);
        this.consume();
      }
    }
    return result;
  }
  formLigatures(group) {
    var n = group.length - 1;
    for (var i = 0; i < n; ++i) {
      var a = group[i];
      var v = a.text;
      if (v === "-" && group[i + 1].text === "-") {
        if (i + 1 < n && group[i + 2].text === "-") {
          group.splice(i, 3, {
            type: "textord",
            mode: "text",
            loc: SourceLocation.range(a, group[i + 2]),
            text: "---"
          });
          n -= 2;
        } else {
          group.splice(i, 2, {
            type: "textord",
            mode: "text",
            loc: SourceLocation.range(a, group[i + 1]),
            text: "--"
          });
          n -= 1;
        }
      }
      if ((v === "'" || v === "`") && group[i + 1].text === v) {
        group.splice(i, 2, {
          type: "textord",
          mode: "text",
          loc: SourceLocation.range(a, group[i + 1]),
          text: v + v
        });
        n -= 1;
      }
    }
  }
  parseSymbol() {
    var nucleus = this.fetch();
    var text2 = nucleus.text;
    if (/^\\verb[^a-zA-Z]/.test(text2)) {
      this.consume();
      var arg = text2.slice(5);
      var star = arg.charAt(0) === "*";
      if (star) {
        arg = arg.slice(1);
      }
      if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
        throw new ParseError("\\verb assertion failed --\n                    please report what input caused this bug");
      }
      arg = arg.slice(1, -1);
      return {
        type: "verb",
        mode: "text",
        body: arg,
        star
      };
    }
    if (unicodeSymbols.hasOwnProperty(text2[0]) && !symbols[this.mode][text2[0]]) {
      if (this.settings.strict && this.mode === "math") {
        this.settings.reportNonstrict("unicodeTextInMathMode", 'Accented Unicode text character "' + text2[0] + '" used in math mode', nucleus);
      }
      text2 = unicodeSymbols[text2[0]] + text2.slice(1);
    }
    var match = combiningDiacriticalMarksEndRegex.exec(text2);
    if (match) {
      text2 = text2.substring(0, match.index);
      if (text2 === "i") {
        text2 = "\u0131";
      } else if (text2 === "j") {
        text2 = "\u0237";
      }
    }
    var symbol;
    if (symbols[this.mode][text2]) {
      if (this.settings.strict && this.mode === "math" && extraLatin.indexOf(text2) >= 0) {
        this.settings.reportNonstrict("unicodeTextInMathMode", 'Latin-1/Unicode text character "' + text2[0] + '" used in math mode', nucleus);
      }
      var group = symbols[this.mode][text2].group;
      var loc = SourceLocation.range(nucleus);
      var s;
      if (ATOMS.hasOwnProperty(group)) {
        var family = group;
        s = {
          type: "atom",
          mode: this.mode,
          family,
          loc,
          text: text2
        };
      } else {
        s = {
          type: group,
          mode: this.mode,
          loc,
          text: text2
        };
      }
      symbol = s;
    } else if (text2.charCodeAt(0) >= 128) {
      if (this.settings.strict) {
        if (!supportedCodepoint(text2.charCodeAt(0))) {
          this.settings.reportNonstrict("unknownSymbol", 'Unrecognized Unicode character "' + text2[0] + '"' + (" (" + text2.charCodeAt(0) + ")"), nucleus);
        } else if (this.mode === "math") {
          this.settings.reportNonstrict("unicodeTextInMathMode", 'Unicode text character "' + text2[0] + '" used in math mode', nucleus);
        }
      }
      symbol = {
        type: "textord",
        mode: "text",
        loc: SourceLocation.range(nucleus),
        text: text2
      };
    } else {
      return null;
    }
    this.consume();
    if (match) {
      for (var i = 0; i < match[0].length; i++) {
        var accent2 = match[0][i];
        if (!unicodeAccents[accent2]) {
          throw new ParseError("Unknown accent ' " + accent2 + "'", nucleus);
        }
        var command = unicodeAccents[accent2][this.mode] || unicodeAccents[accent2].text;
        if (!command) {
          throw new ParseError("Accent " + accent2 + " unsupported in " + this.mode + " mode", nucleus);
        }
        symbol = {
          type: "accent",
          mode: this.mode,
          loc: SourceLocation.range(nucleus),
          label: command,
          isStretchy: false,
          isShifty: true,
          base: symbol
        };
      }
    }
    return symbol;
  }
};
Parser.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];
var parseTree = function parseTree2(toParse, settings) {
  if (!(typeof toParse === "string" || toParse instanceof String)) {
    throw new TypeError("KaTeX can only parse string typed expression");
  }
  var parser = new Parser(toParse, settings);
  delete parser.gullet.macros.current["\\df@tag"];
  var tree = parser.parse();
  delete parser.gullet.macros.current["\\current@color"];
  delete parser.gullet.macros.current["\\color"];
  if (parser.gullet.macros.get("\\df@tag")) {
    if (!settings.displayMode) {
      throw new ParseError("\\tag works only in display equations");
    }
    tree = [{
      type: "tag",
      mode: "text",
      body: tree,
      tag: parser.subparse([new Token("\\df@tag")])
    }];
  }
  return tree;
};
var render = function render2(expression, baseNode, options) {
  baseNode.textContent = "";
  var node = renderToDomTree(expression, options).toNode();
  baseNode.appendChild(node);
};
if (typeof document !== "undefined") {
  if (document.compatMode !== "CSS1Compat") {
    typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your website has a suitable doctype.");
    render = function render3() {
      throw new ParseError("KaTeX doesn't work in quirks mode.");
    };
  }
}
var renderToString = function renderToString2(expression, options) {
  var markup = renderToDomTree(expression, options).toMarkup();
  return markup;
};
var generateParseTree = function generateParseTree2(expression, options) {
  var settings = new Settings(options);
  return parseTree(expression, settings);
};
var renderError = function renderError2(error, expression, options) {
  if (options.throwOnError || !(error instanceof ParseError)) {
    throw error;
  }
  var node = buildCommon.makeSpan(["katex-error"], [new SymbolNode(expression)]);
  node.setAttribute("title", error.toString());
  node.setAttribute("style", "color:" + options.errorColor);
  return node;
};
var renderToDomTree = function renderToDomTree2(expression, options) {
  var settings = new Settings(options);
  try {
    var tree = parseTree(expression, settings);
    return buildTree(tree, expression, settings);
  } catch (error) {
    return renderError(error, expression, settings);
  }
};
var renderToHTMLTree = function renderToHTMLTree2(expression, options) {
  var settings = new Settings(options);
  try {
    var tree = parseTree(expression, settings);
    return buildHTMLTree(tree, expression, settings);
  } catch (error) {
    return renderError(error, expression, settings);
  }
};
var katex = {
  version: "0.16.11",
  render,
  renderToString,
  ParseError,
  SETTINGS_SCHEMA,
  __parse: generateParseTree,
  __renderToDomTree: renderToDomTree,
  __renderToHTMLTree: renderToHTMLTree,
  __setFontMetrics: setFontMetrics,
  __defineSymbol: defineSymbol,
  __defineFunction: defineFunction,
  __defineMacro: defineMacro,
  __domTree: {
    Span,
    Anchor,
    SymbolNode,
    SvgNode,
    PathNode,
    LineNode
  }
};
var ch;
var i;
var _ch;
var _i;
var _ch2;
var _i2;
var _ch3;
var _i3;
var _ch4;
var _i4;
var _ch5;
var _i5;

// .beyond/uimport/katex.0.16.11.js
var katex_0_16_11_default = katex;
};

code(module, require);
_exports(module.exports);
}}});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy5iZXlvbmQvdWltcG9ydC9rYXRleC4wLjE2LjExLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2thdGV4L2Rpc3Qva2F0ZXgubWpzIl0sIm5hbWVzIjpbImthdGV4XzBfMTZfMTFfZXhwb3J0cyIsIl9fZXhwb3J0IiwiZGVmYXVsdCIsImthdGV4XzBfMTZfMTFfZGVmYXVsdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3RvQ29tbW9uSlMiLCJTb3VyY2VMb2NhdGlvbiIsImNvbnN0cnVjdG9yIiwibGV4ZXIiLCJzdGFydCIsImVuZCIsInJhbmdlIiwiZmlyc3QiLCJzZWNvbmQiLCJsb2MiLCJUb2tlbiIsInRleHQyIiwidGV4dCIsIm5vZXhwYW5kIiwidHJlYXRBc1JlbGF4IiwiZW5kVG9rZW4iLCJQYXJzZUVycm9yIiwibWVzc2FnZSIsInRva2VuIiwibmFtZSIsInBvc2l0aW9uIiwibGVuZ3RoIiwicmF3TWVzc2FnZSIsImVycm9yIiwiaW5wdXQiLCJ1bmRlcmxpbmVkIiwic2xpY2UiLCJyZXBsYWNlIiwibGVmdCIsInJpZ2h0Iiwic2VsZiIsIkVycm9yIiwiX19wcm90b19fIiwicHJvdG90eXBlIiwiY29udGFpbnMiLCJjb250YWluczIiLCJsaXN0IiwiZWxlbSIsImluZGV4T2YiLCJkZWZsdCIsImRlZmx0MiIsInNldHRpbmciLCJkZWZhdWx0SWZVbmRlZmluZWQiLCJ1cHBlcmNhc2UiLCJoeXBoZW5hdGUiLCJoeXBoZW5hdGUyIiwic3RyIiwidG9Mb3dlckNhc2UiLCJFU0NBUEVfTE9PS1VQIiwiRVNDQVBFX1JFR0VYIiwiZXNjYXBlIiwiU3RyaW5nIiwibWF0Y2giLCJnZXRCYXNlRWxlbSIsImdldEJhc2VFbGVtMiIsImdyb3VwIiwidHlwZSIsImJvZHkiLCJpc0NoYXJhY3RlckJveCIsImlzQ2hhcmFjdGVyQm94MiIsImJhc2VFbGVtIiwiYXNzZXJ0IiwiYXNzZXJ0MiIsInZhbHVlIiwicHJvdG9jb2xGcm9tVXJsIiwicHJvdG9jb2xGcm9tVXJsMiIsInVybCIsInByb3RvY29sIiwiZXhlYyIsInRlc3QiLCJ1dGlscyIsIlNFVFRJTkdTX1NDSEVNQSIsImRpc3BsYXlNb2RlIiwiZGVzY3JpcHRpb24iLCJjbGkiLCJvdXRwdXQiLCJlbnVtIiwibGVxbm8iLCJmbGVxbiIsInRocm93T25FcnJvciIsImNsaURlc2NyaXB0aW9uIiwiZXJyb3JDb2xvciIsImNsaVByb2Nlc3NvciIsImNvbG9yIiwibWFjcm9zIiwiY2xpRGVmYXVsdCIsImRlZiIsImRlZnMiLCJwdXNoIiwibWluUnVsZVRoaWNrbmVzcyIsInByb2Nlc3NvciIsInQiLCJNYXRoIiwibWF4IiwicGFyc2VGbG9hdCIsImNvbG9ySXNUZXh0Q29sb3IiLCJzdHJpY3QiLCJ0cnVzdCIsIm1heFNpemUiLCJJbmZpbml0eSIsInMiLCJwYXJzZUludCIsIm1heEV4cGFuZCIsIm4iLCJnbG9iYWxHcm91cCIsImdldERlZmF1bHRWYWx1ZSIsInNjaGVtYSIsImRlZmF1bHRUeXBlIiwiQXJyYXkiLCJpc0FycmF5IiwiU2V0dGluZ3MiLCJvcHRpb25zIiwicHJvcCIsImhhc093blByb3BlcnR5IiwicmVwb3J0Tm9uc3RyaWN0IiwiZXJyb3JDb2RlIiwiZXJyb3JNc2ciLCJjb25zb2xlIiwid2FybiIsInVzZVN0cmljdEJlaGF2aW9yIiwiaXNUcnVzdGVkIiwiY29udGV4dCIsIkJvb2xlYW4iLCJTdHlsZSIsImlkIiwic2l6ZSIsImNyYW1wZWQiLCJzdXAiLCJzdHlsZXMiLCJzdWIiLCJmcmFjTnVtIiwiZnJhY0RlbiIsImNyYW1wIiwidGV4dCQxIiwiaXNUaWdodCIsIkQiLCJEYyIsIlQiLCJUYyIsIlMiLCJTYyIsIlNTIiwiU1NjIiwiU3R5bGUkMSIsIkRJU1BMQVkiLCJURVhUIiwiU0NSSVBUIiwiU0NSSVBUU0NSSVBUIiwic2NyaXB0RGF0YSIsImJsb2NrcyIsInNjcmlwdEZyb21Db2RlcG9pbnQiLCJjb2RlcG9pbnQiLCJpIiwic2NyaXB0IiwiX2kiLCJibG9jayIsImFsbEJsb2NrcyIsImZvckVhY2giLCJiIiwic3VwcG9ydGVkQ29kZXBvaW50IiwiaExpbmVQYWQiLCJzcXJ0TWFpbiIsInNxcnRNYWluMiIsImV4dHJhVmluY3VsdW0iLCJoTGluZVBhZDIiLCJzcXJ0U2l6ZTEiLCJzcXJ0U2l6ZTEyIiwic3FydFNpemUyIiwic3FydFNpemUyMiIsInNxcnRTaXplMyIsInNxcnRTaXplMzIiLCJzcXJ0U2l6ZTQiLCJzcXJ0U2l6ZTQyIiwicGhhc2VQYXRoIiwicGhhc2VQYXRoMiIsInkiLCJ4Iiwic3FydFRhbGwiLCJzcXJ0VGFsbDIiLCJ2aWV3Qm94SGVpZ2h0IiwidmVydFNlZ21lbnQiLCJzcXJ0UGF0aCIsInNxcnRQYXRoMiIsInBhdGgyIiwiaW5uZXJQYXRoIiwiaW5uZXJQYXRoMiIsImhlaWdodCIsInBhdGgiLCJkb3VibGVsZWZ0YXJyb3ciLCJkb3VibGVyaWdodGFycm93IiwibGVmdGFycm93IiwibGVmdGJyYWNlIiwibGVmdGJyYWNldW5kZXIiLCJsZWZ0Z3JvdXAiLCJsZWZ0Z3JvdXB1bmRlciIsImxlZnRoYXJwb29uIiwibGVmdGhhcnBvb25wbHVzIiwibGVmdGhhcnBvb25kb3duIiwibGVmdGhhcnBvb25kb3ducGx1cyIsImxlZnRob29rIiwibGVmdGxpbmVzZWdtZW50IiwibGVmdG1hcHN0byIsImxlZnRUb0Zyb20iLCJsb25nZXF1YWwiLCJtaWRicmFjZSIsIm1pZGJyYWNldW5kZXIiLCJvaWludFNpemUxIiwib2lpbnRTaXplMiIsIm9paWludFNpemUxIiwib2lpaW50U2l6ZTIiLCJyaWdodGFycm93IiwicmlnaHRicmFjZSIsInJpZ2h0YnJhY2V1bmRlciIsInJpZ2h0Z3JvdXAiLCJyaWdodGdyb3VwdW5kZXIiLCJyaWdodGhhcnBvb24iLCJyaWdodGhhcnBvb25wbHVzIiwicmlnaHRoYXJwb29uZG93biIsInJpZ2h0aGFycG9vbmRvd25wbHVzIiwicmlnaHRob29rIiwicmlnaHRsaW5lc2VnbWVudCIsInJpZ2h0VG9Gcm9tIiwidHdvaGVhZGxlZnRhcnJvdyIsInR3b2hlYWRyaWdodGFycm93IiwidGlsZGUxIiwidGlsZGUyIiwidGlsZGUzIiwidGlsZGU0IiwidmVjIiwid2lkZWhhdDEiLCJ3aWRlaGF0MiIsIndpZGVoYXQzIiwid2lkZWhhdDQiLCJ3aWRlY2hlY2sxIiwid2lkZWNoZWNrMiIsIndpZGVjaGVjazMiLCJ3aWRlY2hlY2s0IiwiYmFyYWJvdmVsZWZ0YXJyb3ciLCJyaWdodGFycm93YWJvdmViYXIiLCJiYXJhYm92ZXNob3J0bGVmdGhhcnBvb24iLCJyaWdodGhhcnBvb25hYm92ZXNob3J0YmFyIiwic2hvcnRiYXJhYm92ZWxlZnRoYXJwb29uIiwic2hvcnRyaWdodGhhcnBvb25hYm92ZWJhciIsInRhbGxEZWxpbSIsInRhbGxEZWxpbTIiLCJsYWJlbCIsIm1pZEhlaWdodCIsIkRvY3VtZW50RnJhZ21lbnQiLCJjaGlsZHJlbiIsImNsYXNzZXMiLCJkZXB0aCIsIm1heEZvbnRTaXplIiwic3R5bGUiLCJoYXNDbGFzcyIsImNsYXNzTmFtZSIsInRvTm9kZSIsImZyYWciLCJkb2N1bWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJhcHBlbmRDaGlsZCIsInRvTWFya3VwIiwibWFya3VwIiwidG9UZXh0IiwiY2hpbGQiLCJtYXAiLCJqb2luIiwiZm9udE1ldHJpY3NEYXRhIiwic2lnbWFzQW5kWGlzIiwic2xhbnQiLCJzcGFjZSIsInN0cmV0Y2giLCJzaHJpbmsiLCJ4SGVpZ2h0IiwicXVhZCIsImV4dHJhU3BhY2UiLCJudW0xIiwibnVtMiIsIm51bTMiLCJkZW5vbTEiLCJkZW5vbTIiLCJzdXAxIiwic3VwMiIsInN1cDMiLCJzdWIxIiwic3ViMiIsInN1cERyb3AiLCJzdWJEcm9wIiwiZGVsaW0xIiwiZGVsaW0yIiwiYXhpc0hlaWdodCIsImRlZmF1bHRSdWxlVGhpY2tuZXNzIiwiYmlnT3BTcGFjaW5nMSIsImJpZ09wU3BhY2luZzIiLCJiaWdPcFNwYWNpbmczIiwiYmlnT3BTcGFjaW5nNCIsImJpZ09wU3BhY2luZzUiLCJzcXJ0UnVsZVRoaWNrbmVzcyIsInB0UGVyRW0iLCJkb3VibGVSdWxlU2VwIiwiYXJyYXlSdWxlV2lkdGgiLCJmYm94c2VwIiwiZmJveHJ1bGUiLCJleHRyYUNoYXJhY3Rlck1hcCIsInNldEZvbnRNZXRyaWNzIiwiZm9udE5hbWUiLCJtZXRyaWNzIiwiZ2V0Q2hhcmFjdGVyTWV0cmljcyIsImNoYXJhY3RlciIsImZvbnQiLCJtb2RlIiwiY2giLCJjaGFyQ29kZUF0IiwiaXRhbGljIiwic2tldyIsIndpZHRoIiwiZm9udE1ldHJpY3NCeVNpemVJbmRleCIsImdldEdsb2JhbE1ldHJpY3MiLCJzaXplSW5kZXgiLCJjc3NFbVBlck11Iiwia2V5Iiwic2l6ZVN0eWxlTWFwIiwic2l6ZU11bHRpcGxpZXJzIiwic2l6ZUF0U3R5bGUiLCJzaXplQXRTdHlsZTIiLCJPcHRpb25zIiwiZGF0YSIsInRleHRTaXplIiwicGhhbnRvbSIsImZvbnRGYW1pbHkiLCJmb250V2VpZ2h0IiwiZm9udFNoYXBlIiwic2l6ZU11bHRpcGxpZXIiLCJfZm9udE1ldHJpY3MiLCJCQVNFU0laRSIsImV4dGVuZCIsImV4dGVuc2lvbiIsImhhdmluZ1N0eWxlIiwiaGF2aW5nQ3JhbXBlZFN0eWxlIiwiaGF2aW5nU2l6ZSIsImhhdmluZ0Jhc2VTdHlsZSIsIndhbnRTaXplIiwiaGF2aW5nQmFzZVNpemluZyIsIndpdGhDb2xvciIsIndpdGhQaGFudG9tIiwid2l0aEZvbnQiLCJ3aXRoVGV4dEZvbnRGYW1pbHkiLCJ3aXRoVGV4dEZvbnRXZWlnaHQiLCJ3aXRoVGV4dEZvbnRTaGFwZSIsInNpemluZ0NsYXNzZXMiLCJvbGRPcHRpb25zIiwiYmFzZVNpemluZ0NsYXNzZXMiLCJmb250TWV0cmljcyIsImdldENvbG9yIiwicHRQZXJVbml0IiwicmVsYXRpdmVVbml0IiwidmFsaWRVbml0IiwidmFsaWRVbml0MiIsInVuaXQiLCJjYWxjdWxhdGVTaXplIiwiY2FsY3VsYXRlU2l6ZTIiLCJzaXplVmFsdWUiLCJzY2FsZSIsInVuaXRPcHRpb25zIiwibWluIiwibnVtYmVyIiwibWFrZUVtIiwibWFrZUVtMiIsInRvRml4ZWQiLCJjcmVhdGVDbGFzcyIsImNyZWF0ZUNsYXNzMiIsImZpbHRlciIsImNscyIsImluaXROb2RlIiwiaW5pdE5vZGUyIiwiYXR0cmlidXRlcyIsInRvTm9kZTIiLCJ0YWdOYW1lIiwibm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyIiwic2V0QXR0cmlidXRlIiwidG9NYXJrdXAyIiwic3R5bGVzMiIsIlNwYW4iLCJjYWxsIiwiYXR0cmlidXRlIiwiQW5jaG9yIiwiaHJlZiIsIkltZyIsInNyYyIsImFsdCIsImlDb21iaW5hdGlvbnMiLCJTeW1ib2xOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJzcGFuIiwibWFyZ2luUmlnaHQiLCJuZWVkc1NwYW4iLCJlc2NhcGVkIiwiU3ZnTm9kZSIsInN2Z05TIiwiY3JlYXRlRWxlbWVudE5TIiwiT2JqZWN0IiwiUGF0aE5vZGUiLCJwYXRoTmFtZSIsImFsdGVybmF0ZSIsIkxpbmVOb2RlIiwiYXNzZXJ0U3ltYm9sRG9tTm9kZSIsImFzc2VydFNwYW4iLCJBVE9NUyIsIk5PTl9BVE9NUyIsInN5bWJvbHMiLCJkZWZpbmVTeW1ib2wiLCJhY2NlcHRVbmljb2RlQ2hhciIsIm1hdGgiLCJtYWluIiwiYW1zIiwiYWNjZW50IiwiYmluIiwiY2xvc2UiLCJpbm5lciIsIm1hdGhvcmQiLCJvcCIsIm9wZW4iLCJwdW5jdCIsInJlbCIsInNwYWNpbmciLCJ0ZXh0b3JkIiwibGlnYXR1cmVzIiwibWF0aFRleHRTeW1ib2xzIiwiY2hhckF0IiwidGV4dFN5bWJvbHMiLCJfY2giLCJsZXR0ZXJzIiwiX2kyIiwiX2NoMiIsIndpZGVDaGFyIiwiX2kzIiwiX2NoMyIsImZyb21DaGFyQ29kZSIsIl9pNCIsIl9jaDQiLCJ0b1N0cmluZyIsImV4dHJhTGF0aW4iLCJfaTUiLCJfY2g1Iiwid2lkZUxhdGluTGV0dGVyRGF0YSIsIndpZGVOdW1lcmFsRGF0YSIsIndpZGVDaGFyYWN0ZXJGb250Iiwid2lkZUNoYXJhY3RlckZvbnQyIiwid2lkZUNoYXIyIiwiSCIsIkwiLCJjb2RlUG9pbnQiLCJqIiwiZmxvb3IiLCJsb29rdXBTeW1ib2wiLCJsb29rdXBTeW1ib2wyIiwibWFrZVN5bWJvbCIsIm1ha2VTeW1ib2wyIiwibG9va3VwIiwic3ltYm9sTm9kZSIsIm1hdGhzeW0iLCJtYXRoc3ltMiIsImNvbmNhdCIsImJvbGRzeW1ib2wiLCJib2xkc3ltYm9sMiIsImZvbnRDbGFzcyIsIm1ha2VPcmQiLCJtYWtlT3JkMiIsImlzRm9udCIsImZvbnRPckZhbWlseSIsIndpZGVGb250TmFtZSIsIndpZGVGb250Q2xhc3MiLCJmb250Q2xhc3NlcyIsImZvbnREYXRhIiwiZm9udE1hcCIsInJldHJpZXZlVGV4dEZvbnROYW1lIiwicGFydHMiLCJtYWtlRnJhZ21lbnQiLCJfZm9udE5hbWUiLCJfZm9udE5hbWUyIiwiX2ZvbnROYW1lMyIsImNhbkNvbWJpbmUiLCJwcmV2IiwibmV4dCIsIl9zdHlsZSIsInRyeUNvbWJpbmVDaGFycyIsImNoYXJzIiwic3BsaWNlIiwic2l6ZUVsZW1lbnRGcm9tQ2hpbGRyZW4iLCJzaXplRWxlbWVudEZyb21DaGlsZHJlbjIiLCJtYWtlU3BhbiQyIiwibWFrZVNwYW4iLCJtYWtlU3ZnU3BhbiIsIm1ha2VMaW5lU3BhbiIsIm1ha2VMaW5lU3BhbjIiLCJ0aGlja25lc3MiLCJsaW5lIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJtYWtlQW5jaG9yIiwibWFrZUFuY2hvcjIiLCJhbmNob3IiLCJtYWtlRnJhZ21lbnQyIiwiZnJhZ21lbnQiLCJ3cmFwRnJhZ21lbnQiLCJ3cmFwRnJhZ21lbnQyIiwiZ2V0Vkxpc3RDaGlsZHJlbkFuZERlcHRoIiwiZ2V0Vkxpc3RDaGlsZHJlbkFuZERlcHRoMiIsInBhcmFtcyIsInBvc2l0aW9uVHlwZSIsIm9sZENoaWxkcmVuIiwiX2RlcHRoIiwic2hpZnQiLCJjdXJyUG9zIiwiZGlmZiIsImJvdHRvbSIsInBvc2l0aW9uRGF0YSIsImZpcnN0Q2hpbGQiLCJtYWtlVkxpc3QiLCJtYWtlVkxpc3QyIiwicHN0cnV0U2l6ZSIsInBzdHJ1dCIsInJlYWxDaGlsZHJlbiIsIm1pblBvcyIsIm1heFBvcyIsIl9jaGlsZCIsIl9lbGVtIiwid3JhcHBlckNsYXNzZXMiLCJ3cmFwcGVyU3R5bGUiLCJjaGlsZFdyYXAiLCJ0b3AiLCJtYXJnaW5MZWZ0Iiwidmxpc3QiLCJyb3dzIiwiZW1wdHlTcGFuIiwiZGVwdGhTdHJ1dCIsInRvcFN0cnV0IiwidnRhYmxlIiwibWFrZUdsdWUiLCJtZWFzdXJlbWVudCIsInJ1bGUiLCJyZXRyaWV2ZVRleHRGb250TmFtZTIiLCJiYXNlRm9udE5hbWUiLCJmb250U3R5bGVzTmFtZSIsInZhcmlhbnQiLCJzdmdEYXRhIiwic3RhdGljU3ZnIiwic3RhdGljU3ZnMiIsInN2Z05vZGUiLCJidWlsZENvbW1vbiIsInRoaW5zcGFjZSIsIm1lZGl1bXNwYWNlIiwidGhpY2tzcGFjZSIsInNwYWNpbmdzIiwibW9yZCIsIm1vcCIsIm1iaW4iLCJtcmVsIiwibWlubmVyIiwibW9wZW4iLCJtY2xvc2UiLCJtcHVuY3QiLCJ0aWdodFNwYWNpbmdzIiwiX2Z1bmN0aW9ucyIsIl9odG1sR3JvdXBCdWlsZGVycyIsIl9tYXRobWxHcm91cEJ1aWxkZXJzIiwiZGVmaW5lRnVuY3Rpb24iLCJfcmVmIiwibmFtZXMiLCJwcm9wcyIsImhhbmRsZXIiLCJodG1sQnVpbGRlciIsImh0bWxCdWlsZGVyMyIsIm1hdGhtbEJ1aWxkZXIiLCJtYXRobWxCdWlsZGVyMyIsIm51bUFyZ3MiLCJhcmdUeXBlcyIsImFsbG93ZWRJbkFyZ3VtZW50IiwiYWxsb3dlZEluVGV4dCIsImFsbG93ZWRJbk1hdGgiLCJudW1PcHRpb25hbEFyZ3MiLCJpbmZpeCIsInByaW1pdGl2ZSIsImRlZmluZUZ1bmN0aW9uQnVpbGRlcnMiLCJfcmVmMiIsIm5vcm1hbGl6ZUFyZ3VtZW50Iiwibm9ybWFsaXplQXJndW1lbnQyIiwiYXJnIiwib3JkYXJndW1lbnQiLCJvcmRhcmd1bWVudDIiLCJtYWtlU3BhbiQxIiwiYmluTGVmdENhbmNlbGxlciIsImJpblJpZ2h0Q2FuY2VsbGVyIiwic3R5bGVNYXAkMSIsIkRvbUVudW0iLCJidWlsZEV4cHJlc3Npb24kMSIsImJ1aWxkRXhwcmVzc2lvbiIsImV4cHJlc3Npb24iLCJpc1JlYWxHcm91cCIsInN1cnJvdW5kaW5nIiwiZ3JvdXBzIiwiYnVpbGRHcm91cCQxIiwiZ2x1ZU9wdGlvbnMiLCJkdW1teVByZXYiLCJkdW1teU5leHQiLCJpc1Jvb3QiLCJ0cmF2ZXJzZU5vblNwYWNlTm9kZXMiLCJub2RlMiIsInByZXZUeXBlIiwiZ2V0VHlwZU9mRG9tVHJlZSIsInRyYXZlcnNlTm9uU3BhY2VOb2RlczIiLCJub2RlcyIsImNhbGxiYWNrIiwicGFydGlhbEdyb3VwIiwiY2hlY2tQYXJ0aWFsR3JvdXAiLCJub25zcGFjZSIsInJlc3VsdCIsImluc2VydEFmdGVyIiwidW5zaGlmdCIsImluZGV4IiwicG9wIiwiY2hlY2tQYXJ0aWFsR3JvdXAyIiwiZ2V0T3V0ZXJtb3N0Tm9kZSIsImdldE91dGVybW9zdE5vZGUyIiwic2lkZSIsImdldFR5cGVPZkRvbVRyZWUyIiwibWFrZU51bGxEZWxpbWl0ZXIiLCJtYWtlTnVsbERlbGltaXRlcjIiLCJtb3JlQ2xhc3NlcyIsImJ1aWxkR3JvdXAiLCJiYXNlT3B0aW9ucyIsImdyb3VwTm9kZSIsIm11bHRpcGxpZXIiLCJidWlsZEhUTUxVbmJyZWFrYWJsZSIsInN0cnV0IiwidmVydGljYWxBbGlnbiIsImJ1aWxkSFRNTCIsInRyZWUiLCJ0YWciLCJlcW5OdW0iLCJub2JyZWFrIiwidGFnQ2hpbGQiLCJodG1sTm9kZSIsIm5ld0RvY3VtZW50RnJhZ21lbnQiLCJNYXRoTm9kZSIsImdldEF0dHJpYnV0ZSIsIlRleHROb2RlIiwiU3BhY2VOb2RlIiwibWF0aE1MVHJlZSIsIm1ha2VUZXh0IiwibWFrZVRleHQyIiwibWFrZVJvdyIsIm1ha2VSb3cyIiwiZ2V0VmFyaWFudCIsImdldFZhcmlhbnQyIiwiYnVpbGRFeHByZXNzaW9uMiIsImJ1aWxkRXhwcmVzc2lvbjMiLCJpc09yZGdyb3VwIiwiYnVpbGRHcm91cDIiLCJsYXN0R3JvdXAiLCJfZ3JvdXAiLCJsYXN0Q2hpbGQiLCJidWlsZEV4cHJlc3Npb25Sb3ciLCJidWlsZEV4cHJlc3Npb25Sb3cyIiwiYnVpbGRHcm91cDMiLCJidWlsZE1hdGhNTCIsInRleEV4cHJlc3Npb24iLCJpc0Rpc3BsYXlNb2RlIiwiZm9yTWF0aG1sT25seSIsIndyYXBwZXIiLCJhbm5vdGF0aW9uIiwic2VtYW50aWNzIiwibWF0aDIiLCJ3cmFwcGVyQ2xhc3MiLCJvcHRpb25zRnJvbVNldHRpbmdzIiwib3B0aW9uc0Zyb21TZXR0aW5nczIiLCJzZXR0aW5ncyIsImRpc3BsYXlXcmFwIiwiZGlzcGxheVdyYXAyIiwiYnVpbGRUcmVlIiwiYnVpbGRUcmVlMiIsImthdGV4Tm9kZSIsIm1hdGhNTE5vZGUiLCJfaHRtbE5vZGUiLCJidWlsZEhUTUxUcmVlIiwiYnVpbGRIVE1MVHJlZTIiLCJzdHJldGNoeUNvZGVQb2ludCIsIndpZGVoYXQiLCJ3aWRlY2hlY2siLCJ3aWRldGlsZGUiLCJ1dGlsZGUiLCJvdmVybGVmdGFycm93IiwidW5kZXJsZWZ0YXJyb3ciLCJ4bGVmdGFycm93Iiwib3ZlcnJpZ2h0YXJyb3ciLCJ1bmRlcnJpZ2h0YXJyb3ciLCJ4cmlnaHRhcnJvdyIsInVuZGVyYnJhY2UiLCJvdmVyYnJhY2UiLCJvdmVyZ3JvdXAiLCJ1bmRlcmdyb3VwIiwib3ZlcmxlZnRyaWdodGFycm93IiwidW5kZXJsZWZ0cmlnaHRhcnJvdyIsInhsZWZ0cmlnaHRhcnJvdyIsIk92ZXJyaWdodGFycm93IiwieFJpZ2h0YXJyb3ciLCJvdmVybGVmdGhhcnBvb24iLCJ4bGVmdGhhcnBvb251cCIsIm92ZXJyaWdodGhhcnBvb24iLCJ4cmlnaHRoYXJwb29udXAiLCJ4TGVmdGFycm93IiwieExlZnRyaWdodGFycm93IiwieGhvb2tsZWZ0YXJyb3ciLCJ4aG9va3JpZ2h0YXJyb3ciLCJ4bWFwc3RvIiwieHJpZ2h0aGFycG9vbmRvd24iLCJ4bGVmdGhhcnBvb25kb3duIiwieHJpZ2h0bGVmdGhhcnBvb25zIiwieGxlZnRyaWdodGhhcnBvb25zIiwieHR3b2hlYWRsZWZ0YXJyb3ciLCJ4dHdvaGVhZHJpZ2h0YXJyb3ciLCJ4bG9uZ2VxdWFsIiwieHRvZnJvbSIsInhyaWdodGxlZnRhcnJvd3MiLCJ4cmlnaHRlcXVpbGlicml1bSIsInhsZWZ0ZXF1aWxpYnJpdW0iLCJtYXRoTUxub2RlIiwibWF0aE1Mbm9kZTIiLCJrYXRleEltYWdlc0RhdGEiLCJvdmVybGluZXNlZ21lbnQiLCJ1bmRlcmxpbmVzZWdtZW50IiwiZ3JvdXBMZW5ndGgiLCJncm91cExlbmd0aDIiLCJzdmdTcGFuIiwic3ZnU3BhbjIiLCJidWlsZFN2Z1NwYW5fIiwidmlld0JveFdpZHRoIiwiZ3JwIiwibnVtQ2hhcnMiLCJiYXNlIiwiX2hlaWdodCIsImltZ0luZGV4IiwibWluV2lkdGgiLCJzcGFucyIsInBhdGhzIiwiX21pbldpZHRoIiwiX3ZpZXdCb3hIZWlnaHQiLCJfaGVpZ2h0MiIsIm51bVN2Z0NoaWxkcmVuIiwid2lkdGhDbGFzc2VzIiwiYWxpZ25zIiwiYWxpZ24xIiwiX3BhdGgiLCJfc3ZnTm9kZSIsIl9zcGFuIiwiZW5jbG9zZVNwYW4iLCJlbmNsb3NlU3BhbjIiLCJpbm5lcjIiLCJ0b3BQYWQiLCJib3R0b21QYWQiLCJpbWciLCJ0b3RhbEhlaWdodCIsImJvcmRlckNvbG9yIiwibGluZXMiLCJzdHJldGNoeSIsImFzc2VydE5vZGVUeXBlIiwiYXNzZXJ0U3ltYm9sTm9kZVR5cGUiLCJ0eXBlZE5vZGUiLCJjaGVja1N5bWJvbE5vZGVUeXBlIiwiaHRtbEJ1aWxkZXIkYSIsInN1cFN1Ykdyb3VwIiwibXVzdFNoaWZ0IiwiaXNTaGlmdHkiLCJiYXNlQ2hhciIsImJhc2VHcm91cCIsImFjY2VudEJlbG93IiwiY2xlYXJhbmNlIiwiYWNjZW50Qm9keSIsImlzU3RyZXRjaHkiLCJhY2NlbnQyIiwiYWNjZW50RnVsbCIsImFjY2VudFdyYXAiLCJtYXRobWxCdWlsZGVyJDkiLCJhY2NlbnROb2RlIiwiTk9OX1NUUkVUQ0hZX0FDQ0VOVF9SRUdFWCIsIlJlZ0V4cCIsImFyZ3MiLCJmdW5jTmFtZSIsInBhcnNlciIsImlubmVyR3JvdXAiLCJrZXJuIiwicGFkZGVkTm9kZSIsIm9wdEFyZ3MiLCJiZWxvdyIsIm5ld09wdGlvbnMiLCJ1cHBlckdyb3VwIiwiYXJyb3dQcmVmaXgiLCJsb3dlckdyb3VwIiwiYXJyb3dCb2R5IiwiYXJyb3dTaGlmdCIsInVwcGVyU2hpZnQiLCJsb3dlclNoaWZ0IiwiYXJyb3dOb2RlIiwidXBwZXJOb2RlIiwibG93ZXJOb2RlIiwiX2xvd2VyTm9kZSIsIm1ha2VTcGFuMiIsImh0bWxCdWlsZGVyJDkiLCJlbGVtZW50cyIsIm1jbGFzcyIsIm1hdGhtbEJ1aWxkZXIkOCIsImxzcGFjZSIsInJzcGFjZSIsImJpbnJlbENsYXNzIiwiYXRvbSIsImZhbWlseSIsIl9yZWYzIiwiYmFzZUFyZyIsInNoaWZ0ZWRBcmciLCJiYXNlT3AiLCJsaW1pdHMiLCJhbHdheXNIYW5kbGVTdXBTdWIiLCJwYXJlbnRJc1N1cFN1YiIsInN5bWJvbCIsInN1cHByZXNzQmFzZVNoaWZ0Iiwic3Vwc3ViIiwidGV4dFNoYWRvdyIsImNkQXJyb3dGdW5jdGlvbk5hbWUiLCJuZXdDZWxsIiwiaXNTdGFydE9mQXJyb3ciLCJpc0xhYmVsRW5kIiwiZW5kQ2hhciIsImNkQXJyb3ciLCJhcnJvd0NoYXIiLCJsYWJlbHMiLCJjYWxsRnVuY3Rpb24iLCJsZWZ0TGFiZWwiLCJiYXJlQXJyb3ciLCJzaXplZEFycm93IiwicmlnaHRMYWJlbCIsImFycm93R3JvdXAiLCJhcnJvdyIsInBhcnNlQ0QiLCJwYXJzZWRSb3dzIiwiZ3VsbGV0IiwiYmVnaW5Hcm91cCIsInNldCIsInBhcnNlRXhwcmVzc2lvbiIsImVuZEdyb3VwIiwiZmV0Y2giLCJjb25zdW1lIiwibmV4dFRva2VuIiwicm93Iiwicm93Tm9kZXMiLCJjZWxsIiwibGFiZWxOdW0iLCJpbkxhYmVsIiwiayIsIndyYXBwZWRBcnJvdyIsImNvbHMiLCJmaWxsIiwiYWxpZ24iLCJwcmVnYXAiLCJwb3N0Z2FwIiwiYXJyYXlzdHJldGNoIiwiYWRkSm90Iiwicm93R2FwcyIsImNvbFNlcGFyYXRpb25UeXBlIiwiaExpbmVzQmVmb3JlUm93IiwicGFyZW50IiwiY29kZSIsImlzTmFOIiwiaHRtbEJ1aWxkZXIkOCIsIm1hdGhtbEJ1aWxkZXIkNyIsImJyZWFrT25Ub2tlblRleHQiLCJmdXR1cmUiLCJwYXJzZVNpemVHcm91cCIsIm5ld0xpbmUiLCJtYXJnaW5Ub3AiLCJnbG9iYWxNYXAiLCJjaGVja0NvbnRyb2xTZXF1ZW5jZSIsInRvayIsImdldFJIUyIsInBvcFRva2VuIiwibGV0Q29tbWFuZCIsImdsb2JhbCIsIm1hY3JvIiwiZ2V0IiwidG9rZW5zIiwidW5leHBhbmRhYmxlIiwiaXNFeHBhbmRhYmxlIiwiY29uc3VtZVNwYWNlcyIsInBhcnNlRnVuY3Rpb24iLCJpbnNlcnQiLCJkZWxpbWl0ZXJzMiIsImNvbnN1bWVBcmciLCJleHBhbmRUb2tlbnMiLCJyZXZlcnNlIiwiZGVsaW1pdGVycyIsIl9yZWY0IiwibWlkZGxlIiwicHVzaFRva2VuIiwiZ2V0TWV0cmljcyIsImdldE1ldHJpY3MyIiwic3R5bGVXcmFwIiwic3R5bGVXcmFwMiIsImRlbGltIiwidG9TdHlsZSIsImRlbGltU2l6ZU11bHRpcGxpZXIiLCJjZW50ZXJTcGFuIiwiY2VudGVyU3BhbjIiLCJtYWtlU21hbGxEZWxpbSIsIm1ha2VTbWFsbERlbGltMiIsImNlbnRlciIsIm1hdGhybVNpemUiLCJtYXRocm1TaXplMiIsIm1ha2VMYXJnZURlbGltIiwibWFrZUxhcmdlRGVsaW0yIiwibWFrZUdseXBoU3BhbiIsIm1ha2VHbHlwaFNwYW4yIiwic2l6ZUNsYXNzIiwiY29ybmVyIiwibWFrZUlubmVyIiwibWFrZUlubmVyMiIsInJvdW5kIiwibGFwSW5FbXMiLCJsYXAiLCJ2ZXJ0cyIsImRvdWJsZVZlcnRzIiwibWFrZVN0YWNrZWREZWxpbSIsIm1ha2VTdGFja2VkRGVsaW0yIiwiaGVpZ2h0VG90YWwiLCJyZXBlYXQiLCJzdmdMYWJlbCIsInRvcE1ldHJpY3MiLCJ0b3BIZWlnaHRUb3RhbCIsInJlcGVhdE1ldHJpY3MiLCJyZXBlYXRIZWlnaHRUb3RhbCIsImJvdHRvbU1ldHJpY3MiLCJib3R0b21IZWlnaHRUb3RhbCIsIm1pZGRsZUhlaWdodFRvdGFsIiwibWlkZGxlRmFjdG9yIiwibWlkZGxlTWV0cmljcyIsIm1pbkhlaWdodCIsInJlcGVhdENvdW50IiwiY2VpbCIsInJlYWxIZWlnaHRUb3RhbCIsInN0YWNrIiwicGF0aFN0ciIsInN2ZyIsImlubmVySGVpZ2h0IiwiX2lubmVySGVpZ2h0IiwidmJQYWQiLCJlbVBhZCIsInNxcnRTdmciLCJzcXJ0U3ZnMiIsInNxcnROYW1lIiwicGF0aE5vZGUiLCJtYWtlU3FydEltYWdlIiwibWFrZVNxcnRJbWFnZTIiLCJ0cmF2ZXJzZVNlcXVlbmNlIiwic3RhY2tMYXJnZURlbGltaXRlclNlcXVlbmNlIiwic3BhbkhlaWdodCIsInRleEhlaWdodCIsImFkdmFuY2VXaWR0aCIsInNpemVUb01heEhlaWdodCIsInJ1bGVXaWR0aCIsInN0YWNrTGFyZ2VEZWxpbWl0ZXJzIiwic3RhY2tBbHdheXNEZWxpbWl0ZXJzIiwic3RhY2tOZXZlckRlbGltaXRlcnMiLCJtYWtlU2l6ZWREZWxpbSIsIm1ha2VTaXplZERlbGltMiIsInN0YWNrTmV2ZXJEZWxpbWl0ZXJTZXF1ZW5jZSIsInN0YWNrQWx3YXlzRGVsaW1pdGVyU2VxdWVuY2UiLCJkZWxpbVR5cGVUb0ZvbnQiLCJkZWxpbVR5cGVUb0ZvbnQyIiwidHJhdmVyc2VTZXF1ZW5jZTIiLCJzZXF1ZW5jZSIsImhlaWdodERlcHRoIiwibWFrZUN1c3RvbVNpemVkRGVsaW0iLCJtYWtlQ3VzdG9tU2l6ZWREZWxpbTIiLCJkZWxpbVR5cGUiLCJtYWtlTGVmdFJpZ2h0RGVsaW0iLCJtYWtlTGVmdFJpZ2h0RGVsaW0yIiwiZGVsaW1pdGVyRmFjdG9yIiwiZGVsaW1pdGVyRXh0ZW5kIiwibWF4RGlzdEZyb21BeGlzIiwiZGVsaW1pdGVyIiwic3FydEltYWdlIiwic2l6ZWREZWxpbSIsImN1c3RvbVNpemVkRGVsaW0iLCJsZWZ0UmlnaHREZWxpbSIsImRlbGltaXRlclNpemVzIiwiY2hlY2tEZWxpbWl0ZXIiLCJzeW1EZWxpbSIsImFzc2VydFBhcnNlZCIsImxlZnRyaWdodERlcHRoIiwiZXhwZWN0IiwicmlnaHRDb2xvciIsImlubmVyRGVwdGgiLCJoYWRNaWRkbGUiLCJpc01pZGRsZSIsImxlZnREZWxpbSIsIm1pZGRsZURlbGltIiwicmlnaHREZWxpbSIsImNvbG9yT3B0aW9ucyIsImxlZnROb2RlIiwicmlnaHROb2RlIiwidGV4dE5vZGUiLCJtaWRkbGVOb2RlIiwiaHRtbEJ1aWxkZXIkNyIsImltZ1NoaWZ0IiwiaXNTaW5nbGVDaGFyIiwibGluZVdlaWdodCIsImFuZ2xlSGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJydWxlVGhpY2tuZXNzIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImJhY2tncm91bmRDb2xvciIsIm1hdGhtbEJ1aWxkZXIkNiIsInRoayIsIl9yZWY1IiwiX2Vudmlyb25tZW50cyIsImRlZmluZUVudmlyb25tZW50IiwiX21hY3JvcyIsImRlZmluZU1hY3JvIiwiZ2V0SExpbmVzIiwiaGxpbmVJbmZvIiwibnh0IiwidmFsaWRhdGVBbXNFbnZpcm9ubWVudENvbnRleHQiLCJlbnZOYW1lIiwiZ2V0QXV0b1RhZyIsInBhcnNlQXJyYXkiLCJoc2tpcEJlZm9yZUFuZEFmdGVyIiwiYXV0b1RhZyIsInNpbmdsZVJvdyIsImVtcHR5U2luZ2xlUm93IiwibWF4TnVtQ29scyIsImV4cGFuZE1hY3JvQXNUZXh0IiwidGFncyIsImJlZ2luUm93IiwiZW5kUm93Iiwic3VicGFyc2UiLCJkQ2VsbFN0eWxlIiwiaHRtbEJ1aWxkZXIkNiIsInIiLCJjIiwibnIiLCJuYyIsImhsaW5lcyIsInB0IiwiYXJyYXljb2xzZXAiLCJsb2NhbE11bHRpcGxpZXIiLCJiYXNlbGluZXNraXAiLCJqb3QiLCJhcnJheXNraXAiLCJhcnN0cnV0SGVpZ2h0IiwiYXJzdHJ1dERlcHRoIiwic2V0SExpbmVQb3MiLCJobGluZXNJbkdhcCIsInBvcyIsImlzRGFzaGVkIiwiaW5yb3ciLCJvdXRyb3ciLCJlbHQiLCJyb3dHYXAiLCJnYXAiLCJvZmZzZXQiLCJjb2xEZXNjcmlwdGlvbnMiLCJjb2xTZXAiLCJjb2xEZXNjck51bSIsInRhZ1NwYW5zIiwic29tZSIsInRhZzIiLCJydyIsInRhZ1NwYW4iLCJjb2xEZXNjciIsImZpcnN0U2VwYXJhdG9yIiwic2VwYXJhdG9yIiwibGluZVR5cGUiLCJib3JkZXJSaWdodFN0eWxlIiwibWFyZ2luIiwiX3NoaWZ0Iiwic2Vwd2lkdGgiLCJjb2wiLCJfc2hpZnQyIiwiZGFzaGVzIiwidkxpc3RFbGVtcyIsImhsaW5lIiwibGluZVNoaWZ0IiwiZXFuTnVtQ29sIiwiYWxpZ25NYXAiLCJsIiwibWF0aG1sQnVpbGRlciQ1IiwidGJsIiwiZ2x1ZSIsInRhYmxlIiwibWVuY2xvc2UiLCJjb2x1bW5MaW5lcyIsInByZXZUeXBlV2FzQWxpZ24iLCJpU3RhcnQiLCJpRW5kIiwidHJpbSIsIl9jb2xzIiwic3BhY2luZzIiLCJyb3dMaW5lcyIsImFsaWduZWRIYW5kbGVyIiwiYWxpZ25lZEhhbmRsZXIyIiwic2VwYXJhdGlvblR5cGUiLCJpc1NwbGl0IiwicmVzIiwibnVtTWF0aHMiLCJudW1Db2xzIiwiZW1wdHlHcm91cCIsImFyZzAiLCJ0ZXh0b3JkMiIsIk51bWJlciIsImlzQWxpZ25lZCIsInN0eWxpbmciLCJvcmRncm91cCIsImN1ck1hdGhzIiwic3ltTm9kZSIsImNvbGFsaWduIiwibmRlIiwiY2EiLCJjb2xBbGlnbiIsInBheWxvYWQiLCJlbnZpcm9ubWVudHMiLCJuYW1lR3JvdXAiLCJlbnYiLCJfYXJncyIsInBhcnNlQXJndW1lbnRzIiwiZW5kTmFtZVRva2VuIiwiaHRtbEJ1aWxkZXIkNSIsIm1hdGhtbEJ1aWxkZXIkNCIsImZvbnRBbGlhc2VzIiwiZnVuYyIsImlzQ2hhcmFjdGVyQm94MyIsImFkanVzdFN0eWxlIiwib3JpZ2luYWxTdHlsZSIsImh0bWxCdWlsZGVyJDQiLCJuc3R5bGUiLCJkc3R5bGUiLCJudW1lcm0iLCJudW1lciIsImNvbnRpbnVlZCIsImhTdHJ1dCIsImRTdHJ1dCIsImRlbm9tbSIsImRlbm9tIiwicnVsZVNwYWNpbmciLCJoYXNCYXJMaW5lIiwiYmFyU2l6ZSIsIm51bVNoaWZ0IiwiZGVub21TaGlmdCIsImZyYWMiLCJjYW5kaWRhdGVDbGVhcmFuY2UiLCJtaWRTaGlmdCIsImRlbGltU2l6ZSIsIm1hdGhtbEJ1aWxkZXIkMyIsImlzRGlzcGxheSIsIndpdGhEZWxpbXMiLCJsZWZ0T3AiLCJyaWdodE9wIiwicmVwbGFjZVdpdGgiLCJzdHlsQXJyYXkiLCJkZWxpbUZyb21WYWx1ZSIsImRlbGltRnJvbVZhbHVlMiIsImRlbGltU3RyaW5nIiwiYmFyTm9kZSIsImlzQmxhbmsiLCJzdHlsIiwidGV4dE9yZCIsIl9yZWY2IiwiaHRtbEJ1aWxkZXIkMyIsImJyYWNlQm9keSIsImlzT3ZlciIsInZTcGFuIiwibWF0aG1sQnVpbGRlciQyIiwiY29tbWFuZCIsImZvcm1hdFVuc3VwcG9ydGVkQ21kIiwic3RyaW5nIiwidHJ1c3RDb250ZXh0IiwiY2xhc3MiLCJzcGxpdCIsImtleVZhbCIsImh0bWwiLCJtYXRobWwiLCJzaXplRGF0YSIsInNpemVEYXRhMiIsInRvdGFsaGVpZ2h0IiwiYXR0cmlidXRlU3RyIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJtYXRoRnVuY3Rpb24iLCJtdVVuaXQiLCJkaW1lbnNpb24iLCJhbGlnbm1lbnQiLCJmaXgiLCJvdXRlck1vZGUiLCJzd2l0Y2hNb2RlIiwiY2xvc2UyIiwiY2hvb3NlTWF0aFN0eWxlIiwiZGlzcGxheSIsInNjcmlwdHNjcmlwdCIsImFzc2VtYmxlU3VwU3ViIiwic3VwR3JvdXAiLCJzdWJHcm91cCIsImJhc2VTaGlmdCIsInN1YklzU2luZ2xlQ2hhcmFjdGVyIiwiZmluYWxHcm91cCIsIl9ib3R0b20iLCJzcGFjZXIiLCJub1N1Y2Nlc3NvciIsImh0bWxCdWlsZGVyJDIiLCJoYXNMaW1pdHMiLCJsYXJnZSIsInN0YXNoIiwib3ZhbCIsIm1hdGhtbEJ1aWxkZXIkMSIsIm9wZXJhdG9yIiwic2luZ2xlQ2hhckJpZ09wcyIsImZOYW1lIiwic2luZ2xlQ2hhckludGVncmFscyIsImh0bWxCdWlsZGVyJDEiLCJjaGlsZDIiLCJjaGlsZFRleHQiLCJtYXRobWxCdWlsZGVyMiIsImlzQWxsU3RyaW5nIiwid29yZCIsImlkZW50aWZpZXIiLCJzZW1pc2ltcGxlIiwiYW1vdW50IiwiZHkiLCJzaXppbmdHcm91cCIsImFwcGx5Iiwic2l6ZUZ1bmNzIiwiaHRtbEJ1aWxkZXIyIiwic21hc2hIZWlnaHQiLCJzbWFzaERlcHRoIiwidGJBcmciLCJsZXR0ZXIiLCJzbWFzaGVkTm9kZSIsInRoZXRhIiwicGhpIiwibGluZUNsZWFyYW5jZSIsIm1pbkRlbGltaXRlckhlaWdodCIsImRlbGltRGVwdGgiLCJyb290bSIsInRvU2hpZnQiLCJyb290Vkxpc3QiLCJyb290Vkxpc3RXcmFwIiwic3R5bGVNYXAiLCJuZXdTdHlsZSIsInN0eWxlQXR0cmlidXRlcyIsImh0bWxCdWlsZGVyRGVsZWdhdGUiLCJodG1sQnVpbGRlckRlbGVnYXRlMiIsImRlbGVnYXRlIiwiX2RlbGVnYXRlIiwiaXNTdXAiLCJidWlsZGVyRGVsZWdhdGUiLCJ2YWx1ZUJhc2UiLCJ2YWx1ZVN1cCIsInZhbHVlU3ViIiwic3VwbSIsInN1Ym0iLCJzdXBTaGlmdCIsInN1YlNoaWZ0IiwiX25ld09wdGlvbnMiLCJtaW5TdXBTaGlmdCIsImlzT2lpbnQiLCJtYXhXaWR0aCIsInBzaSIsInZsaXN0RWxlbSIsIl92bGlzdEVsZW0iLCJpc0JyYWNlIiwibm9kZVR5cGUiLCJfYmFzZSIsIl9iYXNlMiIsImRlZmF1bHRWYXJpYW50IiwiY3NzU3BhY2UiLCJyZWd1bGFyU3BhY2UiLCJvcmQiLCJwYWQiLCJwYWROb2RlIiwidGV4dEZvbnRGYW1pbGllcyIsInRleHRGb250V2VpZ2h0cyIsInRleHRGb250U2hhcGVzIiwib3B0aW9uc1dpdGhGb250IiwibWFrZVZlcmIiLCJzdGFyIiwiZnVuY3Rpb25zIiwic3BhY2VSZWdleFN0cmluZyIsImNvbnRyb2xXb3JkUmVnZXhTdHJpbmciLCJjb250cm9sU3ltYm9sUmVnZXhTdHJpbmciLCJjb250cm9sV29yZFdoaXRlc3BhY2VSZWdleFN0cmluZyIsImNvbnRyb2xTcGFjZVJlZ2V4U3RyaW5nIiwiY29tYmluaW5nRGlhY3JpdGljYWxNYXJrU3RyaW5nIiwiY29tYmluaW5nRGlhY3JpdGljYWxNYXJrc0VuZFJlZ2V4IiwidG9rZW5SZWdleFN0cmluZyIsIkxleGVyIiwidG9rZW5SZWdleCIsImNhdGNvZGVzIiwic2V0Q2F0Y29kZSIsImNoYXIiLCJsZXgiLCJsYXN0SW5kZXgiLCJubEluZGV4IiwiTmFtZXNwYWNlIiwiYnVpbHRpbnMiLCJnbG9iYWxNYWNyb3MiLCJjdXJyZW50IiwidW5kZWZTdGFjayIsInVuZGVmcyIsInVuZGVmIiwiZW5kR3JvdXBzIiwiaGFzIiwiZXhwYW5kT25jZSIsImNvbnN1bWVBcmdzIiwiZGlnaXRUb051bWJlciIsImRpZ2l0IiwibmV3Y29tbWFuZCIsImV4aXN0c09LIiwibm9uZXhpc3RzT0siLCJleGlzdHMiLCJpc0RlZmluZWQiLCJhcmdUZXh0IiwiZXhwYW5kTmV4dFRva2VuIiwibG9nIiwiZG90c0J5VG9rZW4iLCJ0aGVkb3RzIiwiZXhwYW5kQWZ0ZXJGdXR1cmUiLCJzcGFjZUFmdGVyRG90cyIsImxhdGV4UmFpc2VBIiwiYnJha2V0SGVscGVyIiwib25lIiwibWlkZGxlRG91YmxlIiwib2xkTWlkZGxlIiwib2xkTWlkZGxlRG91YmxlIiwibWlkTWFjcm8iLCJkb3VibGUiLCJjb250ZXh0MiIsImRvdWJsZWQiLCJleHBhbmRlZCIsImltcGxpY2l0Q29tbWFuZHMiLCJNYWNyb0V4cGFuZGVyIiwiZXhwYW5zaW9uQ291bnQiLCJmZWVkIiwibmV3TW9kZSIsInB1c2hUb2tlbnMiLCJzY2FuQXJndW1lbnQiLCJpc09wdGlvbmFsIiwiZGVsaW1zIiwiaXNEZWxpbWl0ZWQiLCJjb3VudEV4cGFuc2lvbiIsImV4cGFuZGFibGVPbmx5IiwidG9wVG9rZW4iLCJleHBhbnNpb24iLCJfZ2V0RXhwYW5zaW9uIiwiZXhwYW5kTWFjcm8iLCJvbGRTdGFja0xlbmd0aCIsImRlZmluaXRpb24iLCJjYXRjb2RlIiwic3RyaXBwZWQiLCJib2R5TGV4ZXIiLCJ1bmljb2RlU3ViUmVnRXgiLCJ1U3Vic0FuZFN1cHMiLCJmcmVlemUiLCJ1bmljb2RlQWNjZW50cyIsInVuaWNvZGVTeW1ib2xzIiwiUGFyc2VyIiwicGFyc2UiLCJvbGRUb2tlbiIsImJyZWFrT25JbmZpeCIsImVuZE9mRXhwcmVzc2lvbiIsInBhcnNlQXRvbSIsImZvcm1MaWdhdHVyZXMiLCJoYW5kbGVJbmZpeE5vZGVzIiwib3ZlckluZGV4IiwibnVtZXJOb2RlIiwiZGVub21Ob2RlIiwibnVtZXJCb2R5IiwiZGVub21Cb2R5IiwiaGFuZGxlU3VwU3Vic2NyaXB0Iiwic3ltYm9sVG9rZW4iLCJwYXJzZUdyb3VwIiwidGV4dG9yZEFycmF5IiwiY29sb3JOb2RlIiwic3VwZXJzY3JpcHQiLCJzdWJzY3JpcHQiLCJwcmltZSIsInByaW1lcyIsImlzU3ViIiwic3Vic3VwVG9rZW5zIiwiZnVuY0RhdGEiLCJ0b3RhbEFyZ3MiLCJhcmdUeXBlIiwicGFyc2VHcm91cE9mVHlwZSIsIm9wdGlvbmFsIiwicGFyc2VDb2xvckdyb3VwIiwicGFyc2VVcmxHcm91cCIsInBhcnNlQXJndW1lbnRHcm91cCIsInBhcnNlU3RyaW5nR3JvdXAiLCJtb2RlTmFtZSIsImFyZ1Rva2VuIiwicGFyc2VSZWdleEdyb3VwIiwicmVnZXgiLCJmaXJzdFRva2VuIiwibGFzdFRva2VuIiwiZ3JvdXBFbmQiLCJwYXJzZVN5bWJvbCIsImEiLCJ2IiwibnVjbGV1cyIsInBhcnNlVHJlZSIsInBhcnNlVHJlZTIiLCJ0b1BhcnNlIiwiVHlwZUVycm9yIiwicmVuZGVyIiwicmVuZGVyMiIsImJhc2VOb2RlIiwidGV4dENvbnRlbnQiLCJyZW5kZXJUb0RvbVRyZWUiLCJjb21wYXRNb2RlIiwicmVuZGVyMyIsInJlbmRlclRvU3RyaW5nIiwicmVuZGVyVG9TdHJpbmcyIiwiZ2VuZXJhdGVQYXJzZVRyZWUiLCJnZW5lcmF0ZVBhcnNlVHJlZTIiLCJyZW5kZXJFcnJvciIsInJlbmRlckVycm9yMiIsInJlbmRlclRvRG9tVHJlZTIiLCJyZW5kZXJUb0hUTUxUcmVlIiwicmVuZGVyVG9IVE1MVHJlZTIiLCJrYXRleCIsInZlcnNpb24iLCJfX3BhcnNlIiwiX19yZW5kZXJUb0RvbVRyZWUiLCJfX3JlbmRlclRvSFRNTFRyZWUiLCJfX3NldEZvbnRNZXRyaWNzIiwiX19kZWZpbmVTeW1ib2wiLCJfX2RlZmluZUZ1bmN0aW9uIiwiX19kZWZpbmVNYWNybyIsIl9fZG9tVHJlZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEscUJBQUE7QUFBQUMsUUFBQSxDQUFBRCxxQkFBQTtFQUFBRSxPQUFBLEVBQUFBLENBQUEsS0FBQUM7QUFBQTtBQUFBQyxNQUFBLENBQUFDLE9BQUEsR0FBQUMsWUFBQSxDQUFBTixxQkFBQTs7O0FDSUEsSUFBTU8sY0FBQSxHQUFOLE1BQXFCO0VBS25CQyxZQUFZQyxLQUFBLEVBQU9DLEtBQUEsRUFBT0MsR0FBQSxFQUFLO0lBQzdCLEtBQUtGLEtBQUEsR0FBUTtJQUNiLEtBQUtDLEtBQUEsR0FBUTtJQUNiLEtBQUtDLEdBQUEsR0FBTTtJQUNYLEtBQUtGLEtBQUEsR0FBUUEsS0FBQTtJQUNiLEtBQUtDLEtBQUEsR0FBUUEsS0FBQTtJQUNiLEtBQUtDLEdBQUEsR0FBTUEsR0FBQTtFQUNiO0VBV0EsT0FBT0MsTUFBTUMsS0FBQSxFQUFPQyxNQUFBLEVBQVE7SUFDMUIsSUFBSSxDQUFDQSxNQUFBLEVBQVE7TUFDWCxPQUFPRCxLQUFBLElBQVNBLEtBQUEsQ0FBTUUsR0FBQTtJQUN4QixXQUFXLENBQUNGLEtBQUEsSUFBUyxDQUFDQSxLQUFBLENBQU1FLEdBQUEsSUFBTyxDQUFDRCxNQUFBLENBQU9DLEdBQUEsSUFBT0YsS0FBQSxDQUFNRSxHQUFBLENBQUlOLEtBQUEsS0FBVUssTUFBQSxDQUFPQyxHQUFBLENBQUlOLEtBQUEsRUFBTztNQUN0RixPQUFPO0lBQ1QsT0FBTztNQUNMLE9BQU8sSUFBSUYsY0FBQSxDQUFlTSxLQUFBLENBQU1FLEdBQUEsQ0FBSU4sS0FBQSxFQUFPSSxLQUFBLENBQU1FLEdBQUEsQ0FBSUwsS0FBQSxFQUFPSSxNQUFBLENBQU9DLEdBQUEsQ0FBSUosR0FBRztJQUM1RTtFQUNGO0FBRUY7QUFvQkEsSUFBTUssS0FBQSxHQUFOLE1BQVk7RUFHVlIsWUFBWVMsS0FBQSxFQUNaRixHQUFBLEVBQUs7SUFDSCxLQUFLRyxJQUFBLEdBQU87SUFDWixLQUFLSCxHQUFBLEdBQU07SUFDWCxLQUFLSSxRQUFBLEdBQVc7SUFDaEIsS0FBS0MsWUFBQSxHQUFlO0lBQ3BCLEtBQUtGLElBQUEsR0FBT0QsS0FBQTtJQUNaLEtBQUtGLEdBQUEsR0FBTUEsR0FBQTtFQUNiO0VBT0FILE1BQU1TLFFBQUEsRUFDTkosS0FBQSxFQUNFO0lBQ0EsT0FBTyxJQUFJRCxLQUFBLENBQU1DLEtBQUEsRUFBTVYsY0FBQSxDQUFlSyxLQUFBLENBQU0sTUFBTVMsUUFBUSxDQUFDO0VBQzdEO0FBRUY7QUFVQSxJQUFNQyxVQUFBLEdBQU4sTUFBaUI7RUFJZmQsWUFBWWUsT0FBQSxFQUNaQyxLQUFBLEVBQ0U7SUFDQSxLQUFLQyxJQUFBLEdBQU87SUFDWixLQUFLQyxRQUFBLEdBQVc7SUFDaEIsS0FBS0MsTUFBQSxHQUFTO0lBQ2QsS0FBS0MsVUFBQSxHQUFhO0lBQ2xCLElBQUlDLEtBQUEsR0FBUSx3QkFBd0JOLE9BQUE7SUFDcEMsSUFBSWIsS0FBQTtJQUNKLElBQUlDLEdBQUE7SUFDSixJQUFJSSxHQUFBLEdBQU1TLEtBQUEsSUFBU0EsS0FBQSxDQUFNVCxHQUFBO0lBRXpCLElBQUlBLEdBQUEsSUFBT0EsR0FBQSxDQUFJTCxLQUFBLElBQVNLLEdBQUEsQ0FBSUosR0FBQSxFQUFLO01BRy9CLElBQUltQixLQUFBLEdBQVFmLEdBQUEsQ0FBSU4sS0FBQSxDQUFNcUIsS0FBQTtNQUV0QnBCLEtBQUEsR0FBUUssR0FBQSxDQUFJTCxLQUFBO01BQ1pDLEdBQUEsR0FBTUksR0FBQSxDQUFJSixHQUFBO01BRVYsSUFBSUQsS0FBQSxLQUFVb0IsS0FBQSxDQUFNSCxNQUFBLEVBQVE7UUFDMUJFLEtBQUEsSUFBUztNQUNYLE9BQU87UUFDTEEsS0FBQSxJQUFTLG1CQUFtQm5CLEtBQUEsR0FBUSxLQUFLO01BQzNDO01BR0EsSUFBSXFCLFVBQUEsR0FBYUQsS0FBQSxDQUFNRSxLQUFBLENBQU10QixLQUFBLEVBQU9DLEdBQUcsRUFBRXNCLE9BQUEsQ0FBUSxRQUFRLFVBQVU7TUFFbkUsSUFBSUMsSUFBQTtNQUVKLElBQUl4QixLQUFBLEdBQVEsSUFBSTtRQUNkd0IsSUFBQSxHQUFPLFdBQU1KLEtBQUEsQ0FBTUUsS0FBQSxDQUFNdEIsS0FBQSxHQUFRLElBQUlBLEtBQUs7TUFDNUMsT0FBTztRQUNMd0IsSUFBQSxHQUFPSixLQUFBLENBQU1FLEtBQUEsQ0FBTSxHQUFHdEIsS0FBSztNQUM3QjtNQUVBLElBQUl5QixLQUFBO01BRUosSUFBSXhCLEdBQUEsR0FBTSxLQUFLbUIsS0FBQSxDQUFNSCxNQUFBLEVBQVE7UUFDM0JRLEtBQUEsR0FBUUwsS0FBQSxDQUFNRSxLQUFBLENBQU1yQixHQUFBLEVBQUtBLEdBQUEsR0FBTSxFQUFFLElBQUk7TUFDdkMsT0FBTztRQUNMd0IsS0FBQSxHQUFRTCxLQUFBLENBQU1FLEtBQUEsQ0FBTXJCLEdBQUc7TUFDekI7TUFFQWtCLEtBQUEsSUFBU0ssSUFBQSxHQUFPSCxVQUFBLEdBQWFJLEtBQUE7SUFDL0I7SUFLQSxJQUFJQyxJQUFBLEdBQU8sSUFBSUMsS0FBQSxDQUFNUixLQUFLO0lBQzFCTyxJQUFBLENBQUtYLElBQUEsR0FBTztJQUVaVyxJQUFBLENBQUtFLFNBQUEsR0FBWWhCLFVBQUEsQ0FBV2lCLFNBQUE7SUFDNUJILElBQUEsQ0FBS1YsUUFBQSxHQUFXaEIsS0FBQTtJQUVoQixJQUFJQSxLQUFBLElBQVMsUUFBUUMsR0FBQSxJQUFPLE1BQU07TUFDaEN5QixJQUFBLENBQUtULE1BQUEsR0FBU2hCLEdBQUEsR0FBTUQsS0FBQTtJQUN0QjtJQUVBMEIsSUFBQSxDQUFLUixVQUFBLEdBQWFMLE9BQUE7SUFDbEIsT0FBT2EsSUFBQTtFQUNUO0FBRUY7QUFHQWQsVUFBQSxDQUFXaUIsU0FBQSxDQUFVRCxTQUFBLEdBQVlELEtBQUEsQ0FBTUUsU0FBQTtBQVV2QyxJQUFJQyxRQUFBLEdBQVcsU0FBU0MsVUFBU0MsSUFBQSxFQUFNQyxJQUFBLEVBQU07RUFDM0MsT0FBT0QsSUFBQSxDQUFLRSxPQUFBLENBQVFELElBQUksTUFBTTtBQUNoQztBQU9BLElBQUlFLEtBQUEsR0FBUSxTQUFTQyxPQUFNQyxPQUFBLEVBQVNDLGtCQUFBLEVBQW9CO0VBQ3RELE9BQU9ELE9BQUEsS0FBWSxTQUFZQyxrQkFBQSxHQUFxQkQsT0FBQTtBQUN0RDtBQUdBLElBQUlFLFNBQUEsR0FBWTtBQUVoQixJQUFJQyxTQUFBLEdBQVksU0FBU0MsV0FBVUMsR0FBQSxFQUFLO0VBQ3RDLE9BQU9BLEdBQUEsQ0FBSW5CLE9BQUEsQ0FBUWdCLFNBQUEsRUFBVyxLQUFLLEVBQUVJLFdBQUEsQ0FBWTtBQUNuRDtBQUVBLElBQUlDLGFBQUEsR0FBZ0I7RUFDbEIsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBTTtFQUNOLEtBQUs7QUFDUDtBQUNBLElBQUlDLFlBQUEsR0FBZTtBQUtuQixTQUFTQyxPQUFPdkMsS0FBQSxFQUFNO0VBQ3BCLE9BQU93QyxNQUFBLENBQU94QyxLQUFJLEVBQUVnQixPQUFBLENBQVFzQixZQUFBLEVBQWNHLEtBQUEsSUFBU0osYUFBQSxDQUFjSSxLQUFBLENBQU07QUFDekU7QUFRQSxJQUFJQyxXQUFBLEdBQWMsU0FBU0MsYUFBWUMsS0FBQSxFQUFPO0VBQzVDLElBQUlBLEtBQUEsQ0FBTUMsSUFBQSxLQUFTLFlBQVk7SUFDN0IsSUFBSUQsS0FBQSxDQUFNRSxJQUFBLENBQUtwQyxNQUFBLEtBQVcsR0FBRztNQUMzQixPQUFPaUMsWUFBQSxDQUFZQyxLQUFBLENBQU1FLElBQUEsQ0FBSyxFQUFFO0lBQ2xDLE9BQU87TUFDTCxPQUFPRixLQUFBO0lBQ1Q7RUFDRixXQUFXQSxLQUFBLENBQU1DLElBQUEsS0FBUyxTQUFTO0lBQ2pDLElBQUlELEtBQUEsQ0FBTUUsSUFBQSxDQUFLcEMsTUFBQSxLQUFXLEdBQUc7TUFDM0IsT0FBT2lDLFlBQUEsQ0FBWUMsS0FBQSxDQUFNRSxJQUFBLENBQUssRUFBRTtJQUNsQyxPQUFPO01BQ0wsT0FBT0YsS0FBQTtJQUNUO0VBQ0YsV0FBV0EsS0FBQSxDQUFNQyxJQUFBLEtBQVMsUUFBUTtJQUNoQyxPQUFPRixZQUFBLENBQVlDLEtBQUEsQ0FBTUUsSUFBSTtFQUMvQixPQUFPO0lBQ0wsT0FBT0YsS0FBQTtFQUNUO0FBQ0Y7QUFRQSxJQUFJRyxjQUFBLEdBQWlCLFNBQVNDLGdCQUFlSixLQUFBLEVBQU87RUFDbEQsSUFBSUssUUFBQSxHQUFXUCxXQUFBLENBQVlFLEtBQUs7RUFFaEMsT0FBT0ssUUFBQSxDQUFTSixJQUFBLEtBQVMsYUFBYUksUUFBQSxDQUFTSixJQUFBLEtBQVMsYUFBYUksUUFBQSxDQUFTSixJQUFBLEtBQVM7QUFDekY7QUFFQSxJQUFJSyxNQUFBLEdBQVMsU0FBU0MsUUFBT0MsS0FBQSxFQUFPO0VBQ2xDLElBQUksQ0FBQ0EsS0FBQSxFQUFPO0lBQ1YsTUFBTSxJQUFJaEMsS0FBQSxDQUFNLGdDQUFnQ29CLE1BQUEsQ0FBT1ksS0FBSyxDQUFDO0VBQy9EO0VBRUEsT0FBT0EsS0FBQTtBQUNUO0FBT0EsSUFBSUMsZUFBQSxHQUFrQixTQUFTQyxpQkFBZ0JDLEdBQUEsRUFBSztFQUtsRCxJQUFJQyxRQUFBLEdBQVcsc0RBQXNEQyxJQUFBLENBQUtGLEdBQUc7RUFFN0UsSUFBSSxDQUFDQyxRQUFBLEVBQVU7SUFDYixPQUFPO0VBQ1Q7RUFHQSxJQUFJQSxRQUFBLENBQVMsT0FBTyxLQUFLO0lBQ3ZCLE9BQU87RUFDVDtFQUlBLElBQUksQ0FBQyw2QkFBNkJFLElBQUEsQ0FBS0YsUUFBQSxDQUFTLEVBQUUsR0FBRztJQUNuRCxPQUFPO0VBQ1Q7RUFHQSxPQUFPQSxRQUFBLENBQVMsR0FBR3BCLFdBQUEsQ0FBWTtBQUNqQztBQUNBLElBQUl1QixLQUFBLEdBQVE7RUFDVnBDLFFBQUE7RUFDQUssS0FBQTtFQUNBVyxNQUFBO0VBQ0FOLFNBQUE7RUFDQVMsV0FBQTtFQUNBSyxjQUFBO0VBQ0FNO0FBQ0Y7QUFNQSxJQUFJTyxlQUFBLEdBQWtCO0VBQ3BCQyxXQUFBLEVBQWE7SUFDWGhCLElBQUEsRUFBTTtJQUNOaUIsV0FBQSxFQUFhO0lBQ2JDLEdBQUEsRUFBSztFQUNQO0VBQ0FDLE1BQUEsRUFBUTtJQUNObkIsSUFBQSxFQUFNO01BQ0pvQixJQUFBLEVBQU0sQ0FBQyxpQkFBaUIsUUFBUSxRQUFRO0lBQzFDO0lBQ0FILFdBQUEsRUFBYTtJQUNiQyxHQUFBLEVBQUs7RUFDUDtFQUNBRyxLQUFBLEVBQU87SUFDTHJCLElBQUEsRUFBTTtJQUNOaUIsV0FBQSxFQUFhO0VBQ2Y7RUFDQUssS0FBQSxFQUFPO0lBQ0x0QixJQUFBLEVBQU07SUFDTmlCLFdBQUEsRUFBYTtFQUNmO0VBQ0FNLFlBQUEsRUFBYztJQUNadkIsSUFBQSxFQUFNO0lBQ041RCxPQUFBLEVBQVM7SUFDVDhFLEdBQUEsRUFBSztJQUNMTSxjQUFBLEVBQWdCO0VBQ2xCO0VBQ0FDLFVBQUEsRUFBWTtJQUNWekIsSUFBQSxFQUFNO0lBQ041RCxPQUFBLEVBQVM7SUFDVDhFLEdBQUEsRUFBSztJQUNMTSxjQUFBLEVBQWdCO0lBQ2hCRSxZQUFBLEVBQWNDLEtBQUEsSUFBUyxNQUFNQTtFQUMvQjtFQUNBQyxNQUFBLEVBQVE7SUFDTjVCLElBQUEsRUFBTTtJQUNOa0IsR0FBQSxFQUFLO0lBQ0xNLGNBQUEsRUFBZ0I7SUFDaEJLLFVBQUEsRUFBWSxFQUFDO0lBQ2JILFlBQUEsRUFBY0EsQ0FBQ0ksR0FBQSxFQUFLQyxJQUFBLEtBQVM7TUFDM0JBLElBQUEsQ0FBS0MsSUFBQSxDQUFLRixHQUFHO01BQ2IsT0FBT0MsSUFBQTtJQUNUO0VBQ0Y7RUFDQUUsZ0JBQUEsRUFBa0I7SUFDaEJqQyxJQUFBLEVBQU07SUFDTmlCLFdBQUEsRUFBYTtJQUNiaUIsU0FBQSxFQUFXQyxDQUFBLElBQUtDLElBQUEsQ0FBS0MsR0FBQSxDQUFJLEdBQUdGLENBQUM7SUFDN0JqQixHQUFBLEVBQUs7SUFDTFEsWUFBQSxFQUFjWTtFQUNoQjtFQUNBQyxnQkFBQSxFQUFrQjtJQUNoQnZDLElBQUEsRUFBTTtJQUNOaUIsV0FBQSxFQUFhO0lBQ2JDLEdBQUEsRUFBSztFQUNQO0VBQ0FzQixNQUFBLEVBQVE7SUFDTnhDLElBQUEsRUFBTSxDQUFDO01BQ0xvQixJQUFBLEVBQU0sQ0FBQyxRQUFRLFVBQVUsT0FBTztJQUNsQyxHQUFHLFdBQVcsVUFBVTtJQUN4QkgsV0FBQSxFQUFhO0lBQ2JDLEdBQUEsRUFBSztJQUNMVyxVQUFBLEVBQVk7RUFDZDtFQUNBWSxLQUFBLEVBQU87SUFDTHpDLElBQUEsRUFBTSxDQUFDLFdBQVcsVUFBVTtJQUM1QmlCLFdBQUEsRUFBYTtJQUNiQyxHQUFBLEVBQUs7RUFDUDtFQUNBd0IsT0FBQSxFQUFTO0lBQ1AxQyxJQUFBLEVBQU07SUFDTjVELE9BQUEsRUFBU3VHLFFBQUE7SUFDVDFCLFdBQUEsRUFBYTtJQUNiaUIsU0FBQSxFQUFXVSxDQUFBLElBQUtSLElBQUEsQ0FBS0MsR0FBQSxDQUFJLEdBQUdPLENBQUM7SUFDN0IxQixHQUFBLEVBQUs7SUFDTFEsWUFBQSxFQUFjbUI7RUFDaEI7RUFDQUMsU0FBQSxFQUFXO0lBQ1Q5QyxJQUFBLEVBQU07SUFDTjVELE9BQUEsRUFBUztJQUNUNkUsV0FBQSxFQUFhO0lBQ2JpQixTQUFBLEVBQVdhLENBQUEsSUFBS1gsSUFBQSxDQUFLQyxHQUFBLENBQUksR0FBR1UsQ0FBQztJQUM3QjdCLEdBQUEsRUFBSztJQUNMUSxZQUFBLEVBQWNxQixDQUFBLElBQUtBLENBQUEsS0FBTSxhQUFhSixRQUFBLEdBQVdFLFFBQUEsQ0FBU0UsQ0FBQztFQUM3RDtFQUNBQyxXQUFBLEVBQWE7SUFDWGhELElBQUEsRUFBTTtJQUNOa0IsR0FBQSxFQUFLO0VBQ1A7QUFDRjtBQUVBLFNBQVMrQixnQkFBZ0JDLE1BQUEsRUFBUTtFQUMvQixJQUFJQSxNQUFBLENBQU85RyxPQUFBLEVBQVM7SUFDbEIsT0FBTzhHLE1BQUEsQ0FBTzlHLE9BQUE7RUFDaEI7RUFFQSxJQUFJNEQsSUFBQSxHQUFPa0QsTUFBQSxDQUFPbEQsSUFBQTtFQUNsQixJQUFJbUQsV0FBQSxHQUFjQyxLQUFBLENBQU1DLE9BQUEsQ0FBUXJELElBQUksSUFBSUEsSUFBQSxDQUFLLEtBQUtBLElBQUE7RUFFbEQsSUFBSSxPQUFPbUQsV0FBQSxLQUFnQixVQUFVO0lBQ25DLE9BQU9BLFdBQUEsQ0FBWS9CLElBQUEsQ0FBSztFQUMxQjtFQUVBLFFBQVErQixXQUFBO0lBQUEsS0FDRDtNQUNILE9BQU87SUFBQSxLQUVKO01BQ0gsT0FBTztJQUFBLEtBRUo7TUFDSCxPQUFPO0lBQUEsS0FFSjtNQUNILE9BQU8sQ0FBQztFQUFBO0FBRWQ7QUFhQSxJQUFNRyxRQUFBLEdBQU4sTUFBZTtFQUNiNUcsWUFBWTZHLE9BQUEsRUFBUztJQUNuQixLQUFLdkMsV0FBQSxHQUFjO0lBQ25CLEtBQUtHLE1BQUEsR0FBUztJQUNkLEtBQUtFLEtBQUEsR0FBUTtJQUNiLEtBQUtDLEtBQUEsR0FBUTtJQUNiLEtBQUtDLFlBQUEsR0FBZTtJQUNwQixLQUFLRSxVQUFBLEdBQWE7SUFDbEIsS0FBS0csTUFBQSxHQUFTO0lBQ2QsS0FBS0ssZ0JBQUEsR0FBbUI7SUFDeEIsS0FBS00sZ0JBQUEsR0FBbUI7SUFDeEIsS0FBS0MsTUFBQSxHQUFTO0lBQ2QsS0FBS0MsS0FBQSxHQUFRO0lBQ2IsS0FBS0MsT0FBQSxHQUFVO0lBQ2YsS0FBS0ksU0FBQSxHQUFZO0lBQ2pCLEtBQUtFLFdBQUEsR0FBYztJQUVuQk8sT0FBQSxHQUFVQSxPQUFBLElBQVcsQ0FBQztJQUV0QixTQUFTQyxJQUFBLElBQVF6QyxlQUFBLEVBQWlCO01BQ2hDLElBQUlBLGVBQUEsQ0FBZ0IwQyxjQUFBLENBQWVELElBQUksR0FBRztRQUV4QyxJQUFJTixNQUFBLEdBQVNuQyxlQUFBLENBQWdCeUMsSUFBQTtRQUc3QixLQUFLQSxJQUFBLElBQVFELE9BQUEsQ0FBUUMsSUFBQSxNQUFVLFNBQVlOLE1BQUEsQ0FBT2hCLFNBQUEsR0FBWWdCLE1BQUEsQ0FBT2hCLFNBQUEsQ0FBVXFCLE9BQUEsQ0FBUUMsSUFBQSxDQUFLLElBQUlELE9BQUEsQ0FBUUMsSUFBQSxJQUFRUCxlQUFBLENBQWdCQyxNQUFNO01BQ3hJO0lBQ0Y7RUFDRjtFQU9BUSxnQkFBZ0JDLFNBQUEsRUFBV0MsUUFBQSxFQUFVbEcsS0FBQSxFQUFPO0lBQzFDLElBQUk4RSxNQUFBLEdBQVMsS0FBS0EsTUFBQTtJQUVsQixJQUFJLE9BQU9BLE1BQUEsS0FBVyxZQUFZO01BR2hDQSxNQUFBLEdBQVNBLE1BQUEsQ0FBT21CLFNBQUEsRUFBV0MsUUFBQSxFQUFVbEcsS0FBSztJQUM1QztJQUVBLElBQUksQ0FBQzhFLE1BQUEsSUFBVUEsTUFBQSxLQUFXLFVBQVU7TUFDbEM7SUFDRixXQUFXQSxNQUFBLEtBQVcsUUFBUUEsTUFBQSxLQUFXLFNBQVM7TUFDaEQsTUFBTSxJQUFJaEYsVUFBQSxDQUFXLGtFQUFrRW9HLFFBQUEsR0FBVyxPQUFPRCxTQUFBLEdBQVksTUFBTWpHLEtBQUs7SUFDbEksV0FBVzhFLE1BQUEsS0FBVyxRQUFRO01BQzVCLE9BQU9xQixPQUFBLEtBQVksZUFBZUEsT0FBQSxDQUFRQyxJQUFBLENBQUssaUVBQWlFRixRQUFBLEdBQVcsT0FBT0QsU0FBQSxHQUFZLElBQUk7SUFDcEosT0FBTztNQUVMLE9BQU9FLE9BQUEsS0FBWSxlQUFlQSxPQUFBLENBQVFDLElBQUEsQ0FBSyx5REFBeUQsbUJBQW1CdEIsTUFBQSxHQUFTLFFBQVFvQixRQUFBLEdBQVcsT0FBT0QsU0FBQSxHQUFZLElBQUk7SUFDaEw7RUFDRjtFQVdBSSxrQkFBa0JKLFNBQUEsRUFBV0MsUUFBQSxFQUFVbEcsS0FBQSxFQUFPO0lBQzVDLElBQUk4RSxNQUFBLEdBQVMsS0FBS0EsTUFBQTtJQUVsQixJQUFJLE9BQU9BLE1BQUEsS0FBVyxZQUFZO01BS2hDLElBQUk7UUFDRkEsTUFBQSxHQUFTQSxNQUFBLENBQU9tQixTQUFBLEVBQVdDLFFBQUEsRUFBVWxHLEtBQUs7TUFDNUMsU0FBU0ssS0FBQSxFQUFQO1FBQ0F5RSxNQUFBLEdBQVM7TUFDWDtJQUNGO0lBRUEsSUFBSSxDQUFDQSxNQUFBLElBQVVBLE1BQUEsS0FBVyxVQUFVO01BQ2xDLE9BQU87SUFDVCxXQUFXQSxNQUFBLEtBQVcsUUFBUUEsTUFBQSxLQUFXLFNBQVM7TUFDaEQsT0FBTztJQUNULFdBQVdBLE1BQUEsS0FBVyxRQUFRO01BQzVCLE9BQU9xQixPQUFBLEtBQVksZUFBZUEsT0FBQSxDQUFRQyxJQUFBLENBQUssaUVBQWlFRixRQUFBLEdBQVcsT0FBT0QsU0FBQSxHQUFZLElBQUk7TUFDbEosT0FBTztJQUNULE9BQU87TUFFTCxPQUFPRSxPQUFBLEtBQVksZUFBZUEsT0FBQSxDQUFRQyxJQUFBLENBQUsseURBQXlELG1CQUFtQnRCLE1BQUEsR0FBUyxRQUFRb0IsUUFBQSxHQUFXLE9BQU9ELFNBQUEsR0FBWSxJQUFJO01BQzlLLE9BQU87SUFDVDtFQUNGO0VBV0FLLFVBQVVDLE9BQUEsRUFBUztJQUNqQixJQUFJQSxPQUFBLENBQVF2RCxHQUFBLElBQU8sQ0FBQ3VELE9BQUEsQ0FBUXRELFFBQUEsRUFBVTtNQUNwQyxJQUFJQSxRQUFBLEdBQVdHLEtBQUEsQ0FBTU4sZUFBQSxDQUFnQnlELE9BQUEsQ0FBUXZELEdBQUc7TUFFaEQsSUFBSUMsUUFBQSxJQUFZLE1BQU07UUFDcEIsT0FBTztNQUNUO01BRUFzRCxPQUFBLENBQVF0RCxRQUFBLEdBQVdBLFFBQUE7SUFDckI7SUFFQSxJQUFJOEIsS0FBQSxHQUFRLE9BQU8sS0FBS0EsS0FBQSxLQUFVLGFBQWEsS0FBS0EsS0FBQSxDQUFNd0IsT0FBTyxJQUFJLEtBQUt4QixLQUFBO0lBQzFFLE9BQU95QixPQUFBLENBQVF6QixLQUFLO0VBQ3RCO0FBRUY7QUFjQSxJQUFNMEIsS0FBQSxHQUFOLE1BQVk7RUFDVnpILFlBQVkwSCxFQUFBLEVBQUlDLElBQUEsRUFBTUMsT0FBQSxFQUFTO0lBQzdCLEtBQUtGLEVBQUEsR0FBSztJQUNWLEtBQUtDLElBQUEsR0FBTztJQUNaLEtBQUtDLE9BQUEsR0FBVTtJQUNmLEtBQUtGLEVBQUEsR0FBS0EsRUFBQTtJQUNWLEtBQUtDLElBQUEsR0FBT0EsSUFBQTtJQUNaLEtBQUtDLE9BQUEsR0FBVUEsT0FBQTtFQUNqQjtFQU1BQyxJQUFBLEVBQU07SUFDSixPQUFPQyxNQUFBLENBQU9ELEdBQUEsQ0FBSSxLQUFLSCxFQUFBO0VBQ3pCO0VBTUFLLElBQUEsRUFBTTtJQUNKLE9BQU9ELE1BQUEsQ0FBT0MsR0FBQSxDQUFJLEtBQUtMLEVBQUE7RUFDekI7RUFPQU0sUUFBQSxFQUFVO0lBQ1IsT0FBT0YsTUFBQSxDQUFPRSxPQUFBLENBQVEsS0FBS04sRUFBQTtFQUM3QjtFQU9BTyxRQUFBLEVBQVU7SUFDUixPQUFPSCxNQUFBLENBQU9HLE9BQUEsQ0FBUSxLQUFLUCxFQUFBO0VBQzdCO0VBT0FRLE1BQUEsRUFBUTtJQUNOLE9BQU9KLE1BQUEsQ0FBT0ksS0FBQSxDQUFNLEtBQUtSLEVBQUE7RUFDM0I7RUFNQWhILEtBQUEsRUFBTztJQUNMLE9BQU9vSCxNQUFBLENBQU9LLE1BQUEsQ0FBTyxLQUFLVCxFQUFBO0VBQzVCO0VBTUFVLFFBQUEsRUFBVTtJQUNSLE9BQU8sS0FBS1QsSUFBQSxJQUFRO0VBQ3RCO0FBRUY7QUFLQSxJQUFJVSxDQUFBLEdBQUk7QUFDUixJQUFJQyxFQUFBLEdBQUs7QUFDVCxJQUFJQyxDQUFBLEdBQUk7QUFDUixJQUFJQyxFQUFBLEdBQUs7QUFDVCxJQUFJQyxDQUFBLEdBQUk7QUFDUixJQUFJQyxFQUFBLEdBQUs7QUFDVCxJQUFJQyxFQUFBLEdBQUs7QUFDVCxJQUFJQyxHQUFBLEdBQU07QUFFVixJQUFJZCxNQUFBLEdBQVMsQ0FBQyxJQUFJTCxLQUFBLENBQU1ZLENBQUEsRUFBRyxHQUFHLEtBQUssR0FBRyxJQUFJWixLQUFBLENBQU1hLEVBQUEsRUFBSSxHQUFHLElBQUksR0FBRyxJQUFJYixLQUFBLENBQU1jLENBQUEsRUFBRyxHQUFHLEtBQUssR0FBRyxJQUFJZCxLQUFBLENBQU1lLEVBQUEsRUFBSSxHQUFHLElBQUksR0FBRyxJQUFJZixLQUFBLENBQU1nQixDQUFBLEVBQUcsR0FBRyxLQUFLLEdBQUcsSUFBSWhCLEtBQUEsQ0FBTWlCLEVBQUEsRUFBSSxHQUFHLElBQUksR0FBRyxJQUFJakIsS0FBQSxDQUFNa0IsRUFBQSxFQUFJLEdBQUcsS0FBSyxHQUFHLElBQUlsQixLQUFBLENBQU1tQixHQUFBLEVBQUssR0FBRyxJQUFJLENBQUM7QUFFOU0sSUFBSWYsR0FBQSxHQUFNLENBQUNZLENBQUEsRUFBR0MsRUFBQSxFQUFJRCxDQUFBLEVBQUdDLEVBQUEsRUFBSUMsRUFBQSxFQUFJQyxHQUFBLEVBQUtELEVBQUEsRUFBSUMsR0FBRztBQUN6QyxJQUFJYixHQUFBLEdBQU0sQ0FBQ1csRUFBQSxFQUFJQSxFQUFBLEVBQUlBLEVBQUEsRUFBSUEsRUFBQSxFQUFJRSxHQUFBLEVBQUtBLEdBQUEsRUFBS0EsR0FBQSxFQUFLQSxHQUFHO0FBQzdDLElBQUlaLE9BQUEsR0FBVSxDQUFDTyxDQUFBLEVBQUdDLEVBQUEsRUFBSUMsQ0FBQSxFQUFHQyxFQUFBLEVBQUlDLEVBQUEsRUFBSUMsR0FBQSxFQUFLRCxFQUFBLEVBQUlDLEdBQUc7QUFDN0MsSUFBSVgsT0FBQSxHQUFVLENBQUNPLEVBQUEsRUFBSUEsRUFBQSxFQUFJRSxFQUFBLEVBQUlBLEVBQUEsRUFBSUUsR0FBQSxFQUFLQSxHQUFBLEVBQUtBLEdBQUEsRUFBS0EsR0FBRztBQUNqRCxJQUFJVixLQUFBLEdBQVEsQ0FBQ0ksRUFBQSxFQUFJQSxFQUFBLEVBQUlFLEVBQUEsRUFBSUEsRUFBQSxFQUFJRSxFQUFBLEVBQUlBLEVBQUEsRUFBSUUsR0FBQSxFQUFLQSxHQUFHO0FBQzdDLElBQUlULE1BQUEsR0FBUyxDQUFDRSxDQUFBLEVBQUdDLEVBQUEsRUFBSUMsQ0FBQSxFQUFHQyxFQUFBLEVBQUlELENBQUEsRUFBR0MsRUFBQSxFQUFJRCxDQUFBLEVBQUdDLEVBQUU7QUFFeEMsSUFBSUssT0FBQSxHQUFVO0VBQ1pDLE9BQUEsRUFBU2hCLE1BQUEsQ0FBT08sQ0FBQTtFQUNoQlUsSUFBQSxFQUFNakIsTUFBQSxDQUFPUyxDQUFBO0VBQ2JTLE1BQUEsRUFBUWxCLE1BQUEsQ0FBT1csQ0FBQTtFQUNmUSxZQUFBLEVBQWNuQixNQUFBLENBQU9hLEVBQUE7QUFDdkI7QUFtQkEsSUFBSU8sVUFBQSxHQUFhLENBQUM7RUFHaEJqSSxJQUFBLEVBQU07RUFDTmtJLE1BQUEsRUFBUSxDQUFDLENBQUMsS0FBUSxHQUFNLEdBQ3hCLENBQUMsS0FBUSxHQUFNO0FBRWpCLEdBQUc7RUFJRGxJLElBQUEsRUFBTTtFQUNOa0ksTUFBQSxFQUFRLENBQUMsQ0FBQyxNQUFRLElBQU0sQ0FBQztBQUMzQixHQUFHO0VBRURsSSxJQUFBLEVBQU07RUFDTmtJLE1BQUEsRUFBUSxDQUFDLENBQUMsTUFBUSxJQUFNLENBQUM7QUFDM0IsR0FBRztFQWdCRGxJLElBQUEsRUFBTTtFQUNOa0ksTUFBQSxFQUFRLENBQUMsQ0FBQyxNQUFRLElBQU0sQ0FBQztBQUMzQixHQUFHO0VBQ0RsSSxJQUFBLEVBQU07RUFDTmtJLE1BQUEsRUFBUSxDQUFDLENBQUMsTUFBUSxJQUFNLENBQUM7QUFDM0IsR0FBRztFQUdEbEksSUFBQSxFQUFNO0VBQ05rSSxNQUFBLEVBQVEsQ0FBQyxDQUFDLE9BQVEsS0FBTSxHQUN4QixDQUFDLE9BQVEsS0FBTSxHQUNmLENBQUMsT0FBUSxLQUFNO0FBR2pCLEdBQUc7RUFFRGxJLElBQUEsRUFBTTtFQUNOa0ksTUFBQSxFQUFRLENBQUMsQ0FBQyxPQUFRLEtBQU0sQ0FBQztBQUMzQixDQUFDO0FBTUQsU0FBU0Msb0JBQW9CQyxTQUFBLEVBQVc7RUFDdEMsU0FBU0MsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSUosVUFBQSxDQUFXL0gsTUFBQSxFQUFRbUksQ0FBQSxJQUFLO0lBQzFDLElBQUlDLE1BQUEsR0FBU0wsVUFBQSxDQUFXSSxDQUFBO0lBRXhCLFNBQVNFLEVBQUEsR0FBSyxHQUFHQSxFQUFBLEdBQUtELE1BQUEsQ0FBT0osTUFBQSxDQUFPaEksTUFBQSxFQUFRcUksRUFBQSxJQUFNO01BQ2hELElBQUlDLEtBQUEsR0FBUUYsTUFBQSxDQUFPSixNQUFBLENBQU9LLEVBQUE7TUFFMUIsSUFBSUgsU0FBQSxJQUFhSSxLQUFBLENBQU0sTUFBTUosU0FBQSxJQUFhSSxLQUFBLENBQU0sSUFBSTtRQUNsRCxPQUFPRixNQUFBLENBQU90SSxJQUFBO01BQ2hCO0lBQ0Y7RUFDRjtFQUVBLE9BQU87QUFDVDtBQU1BLElBQUl5SSxTQUFBLEdBQVksRUFBQztBQUNqQlIsVUFBQSxDQUFXUyxPQUFBLENBQVF6RCxDQUFBLElBQUtBLENBQUEsQ0FBRWlELE1BQUEsQ0FBT1EsT0FBQSxDQUFRQyxDQUFBLElBQUtGLFNBQUEsQ0FBVXBFLElBQUEsQ0FBSyxHQUFHc0UsQ0FBQyxDQUFDLENBQUM7QUFVbkUsU0FBU0MsbUJBQW1CUixTQUFBLEVBQVc7RUFDckMsU0FBU0MsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSUksU0FBQSxDQUFVdkksTUFBQSxFQUFRbUksQ0FBQSxJQUFLLEdBQUc7SUFDNUMsSUFBSUQsU0FBQSxJQUFhSyxTQUFBLENBQVVKLENBQUEsS0FBTUQsU0FBQSxJQUFhSyxTQUFBLENBQVVKLENBQUEsR0FBSSxJQUFJO01BQzlELE9BQU87SUFDVDtFQUNGO0VBRUEsT0FBTztBQUNUO0FBT0EsSUFBSVEsUUFBQSxHQUFXO0FBb0JmLElBQUlDLFFBQUEsR0FBVyxTQUFTQyxVQUFTQyxhQUFBLEVBQWVDLFNBQUEsRUFBVTtFQUV4RCxPQUFPLFVBQVUsTUFBTUQsYUFBQSxHQUFnQkMsU0FBQSxJQUFZLHdTQUF3U0QsYUFBQSxHQUFnQixRQUFRLE9BQU9BLGFBQUEsR0FBZ0IseUNBQXlDLEtBQUtBLGFBQUEsSUFBaUIsNElBQTRJLE1BQU1BLGFBQUEsSUFBaUIsTUFBTUMsU0FBQSxHQUFXLGNBQWMsS0FBS0QsYUFBQSxJQUFpQjtBQUNucUI7QUFFQSxJQUFJRSxTQUFBLEdBQVksU0FBU0MsV0FBVUgsYUFBQSxFQUFlQyxTQUFBLEVBQVU7RUFFMUQsT0FBTyxXQUFXLE1BQU1ELGFBQUEsR0FBZ0JDLFNBQUEsSUFBWSxpSUFBaUlELGFBQUEsR0FBZ0IsUUFBUSxPQUFPQSxhQUFBLEdBQWdCLHdDQUF3QyxLQUFLQSxhQUFBLElBQWlCLGtVQUFrVSxPQUFPQSxhQUFBLElBQWlCLE1BQU1DLFNBQUEsR0FBVyxjQUFjLEtBQUtELGFBQUEsSUFBaUI7QUFDbnJCO0FBRUEsSUFBSUksU0FBQSxHQUFZLFNBQVNDLFdBQVVMLGFBQUEsRUFBZUMsU0FBQSxFQUFVO0VBRTFELE9BQU8sV0FBVyxLQUFLRCxhQUFBLEdBQWdCQyxTQUFBLElBQVksUUFBUUQsYUFBQSxHQUFnQixPQUFPLE9BQU9BLGFBQUEsR0FBZ0Isc0NBQXNDLEtBQUtBLGFBQUEsSUFBaUIsK1pBQStaLE9BQU9BLGFBQUEsSUFBaUIsTUFBTUMsU0FBQSxHQUFXLGNBQWMsS0FBS0QsYUFBQSxJQUFpQjtBQUNucEI7QUFFQSxJQUFJTSxTQUFBLEdBQVksU0FBU0MsV0FBVVAsYUFBQSxFQUFlQyxTQUFBLEVBQVU7RUFFMUQsT0FBTyxXQUFXLE9BQU9ELGFBQUEsR0FBZ0JDLFNBQUEsSUFBWSxxVUFBcVVELGFBQUEsR0FBZ0IsUUFBUSxPQUFPQSxhQUFBLEdBQWdCLHNDQUFzQyxLQUFLQSxhQUFBLElBQWlCLHlIQUF5SCxPQUFPQSxhQUFBLElBQWlCLE1BQU1DLFNBQUEsR0FBVyxnQkFBZ0IsS0FBS0QsYUFBQSxJQUFpQjtBQUMvcUI7QUFFQSxJQUFJUSxTQUFBLEdBQVksU0FBU0MsV0FBVVQsYUFBQSxFQUFlQyxTQUFBLEVBQVU7RUFFMUQsT0FBTyxXQUFXLE9BQU9ELGFBQUEsR0FBZ0JDLFNBQUEsSUFBWSw2Q0FBNkNELGFBQUEsR0FBZ0IsUUFBUSxPQUFPQSxhQUFBLEdBQWdCLHlDQUF5QyxLQUFLQSxhQUFBLElBQWlCLDhWQUE4VixPQUFPQSxhQUFBLElBQWlCLE1BQU1DLFNBQUEsR0FBVyxjQUFjLEtBQUtELGFBQUEsSUFBaUI7QUFDN25CO0FBRUEsSUFBSVUsU0FBQSxHQUFZLFNBQVNDLFdBQVVDLENBQUEsRUFBRztFQUNwQyxJQUFJQyxDQUFBLEdBQUlELENBQUEsR0FBSTtFQUVaLE9BQU8sYUFBYUEsQ0FBQSxHQUFJLFVBQVVDLENBQUEsR0FBSSxxQkFBcUJELENBQUEsR0FBSSxNQUFNO0FBQ3ZFO0FBRUEsSUFBSUUsUUFBQSxHQUFXLFNBQVNDLFVBQVNmLGFBQUEsRUFBZUMsU0FBQSxFQUFVZSxhQUFBLEVBQWU7RUFLdkUsSUFBSUMsV0FBQSxHQUFjRCxhQUFBLEdBQWdCLEtBQUtmLFNBQUEsR0FBV0QsYUFBQTtFQUNsRCxPQUFPLFdBQVdBLGFBQUEsR0FBZ0JDLFNBQUEsSUFBWSxhQUFhLEtBQUtELGFBQUEsSUFBaUIsWUFBWWlCLFdBQUEsR0FBYyx3T0FBd09oQixTQUFBLEdBQVcsY0FBYyxLQUFLRCxhQUFBLElBQWlCO0FBQ3BZO0FBRUEsSUFBSWtCLFFBQUEsR0FBVyxTQUFTQyxVQUFTekQsSUFBQSxFQUFNc0MsYUFBQSxFQUFlZ0IsYUFBQSxFQUFlO0VBQ25FaEIsYUFBQSxHQUFnQixNQUFPQSxhQUFBO0VBRXZCLElBQUlvQixLQUFBLEdBQU87RUFFWCxRQUFRMUQsSUFBQTtJQUFBLEtBQ0Q7TUFDSDBELEtBQUEsR0FBT3RCLFFBQUEsQ0FBU0UsYUFBQSxFQUFlSCxRQUFRO01BQ3ZDO0lBQUEsS0FFRztNQUNIdUIsS0FBQSxHQUFPbEIsU0FBQSxDQUFVRixhQUFBLEVBQWVILFFBQVE7TUFDeEM7SUFBQSxLQUVHO01BQ0h1QixLQUFBLEdBQU9oQixTQUFBLENBQVVKLGFBQUEsRUFBZUgsUUFBUTtNQUN4QztJQUFBLEtBRUc7TUFDSHVCLEtBQUEsR0FBT2QsU0FBQSxDQUFVTixhQUFBLEVBQWVILFFBQVE7TUFDeEM7SUFBQSxLQUVHO01BQ0h1QixLQUFBLEdBQU9aLFNBQUEsQ0FBVVIsYUFBQSxFQUFlSCxRQUFRO01BQ3hDO0lBQUEsS0FFRztNQUNIdUIsS0FBQSxHQUFPTixRQUFBLENBQVNkLGFBQUEsRUFBZUgsUUFBQSxFQUFVbUIsYUFBYTtFQUFBO0VBRzFELE9BQU9JLEtBQUE7QUFDVDtBQUNBLElBQUlDLFNBQUEsR0FBWSxTQUFTQyxXQUFVdEssSUFBQSxFQUFNdUssTUFBQSxFQUFRO0VBRS9DLFFBQVF2SyxJQUFBO0lBQUEsS0FDRDtNQUNILE9BQU8sa0JBQWtCdUssTUFBQSxHQUFTLHlCQUF5QkEsTUFBQSxHQUFTO0lBQUEsS0FFakU7TUFDSCxPQUFPLGtCQUFrQkEsTUFBQSxHQUFTLHlCQUF5QkEsTUFBQSxHQUFTO0lBQUEsS0FFakU7TUFDSCxPQUFPLGtCQUFrQkEsTUFBQSxHQUFTLHlCQUF5QkEsTUFBQSxHQUFTLFlBQVksa0JBQWtCQSxNQUFBLEdBQVMseUJBQXlCQSxNQUFBLEdBQVM7SUFBQSxLQUUxSTtNQUNILE9BQU8sa0JBQWtCQSxNQUFBLEdBQVMseUJBQXlCQSxNQUFBLEdBQVM7SUFBQSxLQUVqRTtNQUNILE9BQU8sa0JBQWtCQSxNQUFBLEdBQVMseUJBQXlCQSxNQUFBLEdBQVM7SUFBQSxLQUVqRTtNQUNILE9BQU8sa0JBQWtCQSxNQUFBLEdBQVMseUJBQXlCQSxNQUFBLEdBQVM7SUFBQSxLQUVqRTtNQUNILE9BQU8sa0JBQWtCQSxNQUFBLEdBQVMseUJBQXlCQSxNQUFBLEdBQVM7SUFBQSxLQUVqRTtNQUNILE9BQU8sa0JBQWtCQSxNQUFBLEdBQVMseUJBQXlCQSxNQUFBLEdBQVM7SUFBQSxLQUVqRTtNQUNILE9BQU8sa0JBQWtCQSxNQUFBLEdBQVMseUJBQXlCQSxNQUFBLEdBQVMsWUFBWSxrQkFBa0JBLE1BQUEsR0FBUyx5QkFBeUJBLE1BQUEsR0FBUztJQUFBO01BRzdJLE9BQU87RUFBQTtBQUViO0FBQ0EsSUFBSUMsSUFBQSxHQUFPO0VBRVRDLGVBQUEsRUFBaUI7RUFFakJDLGdCQUFBLEVBQWtCO0VBRWxCQyxTQUFBLEVBQVc7RUFFWEMsU0FBQSxFQUFXO0VBQ1hDLGNBQUEsRUFBZ0I7RUFFaEJDLFNBQUEsRUFBVztFQUNYQyxjQUFBLEVBQWdCO0VBRWhCQyxXQUFBLEVBQWE7RUFDYkMsZUFBQSxFQUFpQjtFQUNqQkMsZUFBQSxFQUFpQjtFQUNqQkMsbUJBQUEsRUFBcUI7RUFFckJDLFFBQUEsRUFBVTtFQUNWQyxlQUFBLEVBQWlCO0VBQ2pCQyxVQUFBLEVBQVk7RUFFWkMsVUFBQSxFQUFZO0VBQ1pDLFNBQUEsRUFBVztFQUNYQyxRQUFBLEVBQVU7RUFDVkMsYUFBQSxFQUFlO0VBQ2ZDLFVBQUEsRUFBWTtFQUNaQyxVQUFBLEVBQVk7RUFDWkMsV0FBQSxFQUFhO0VBQ2JDLFdBQUEsRUFBYTtFQUNiQyxVQUFBLEVBQVk7RUFDWkMsVUFBQSxFQUFZO0VBQ1pDLGVBQUEsRUFBaUI7RUFDakJDLFVBQUEsRUFBWTtFQUNaQyxlQUFBLEVBQWlCO0VBQ2pCQyxZQUFBLEVBQWM7RUFDZEMsZ0JBQUEsRUFBa0I7RUFDbEJDLGdCQUFBLEVBQWtCO0VBQ2xCQyxvQkFBQSxFQUFzQjtFQUN0QkMsU0FBQSxFQUFXO0VBQ1hDLGdCQUFBLEVBQWtCO0VBQ2xCQyxXQUFBLEVBQWE7RUFFYkMsZ0JBQUEsRUFBa0I7RUFDbEJDLGlCQUFBLEVBQW1CO0VBRW5CQyxNQUFBLEVBQVE7RUFFUkMsTUFBQSxFQUFRO0VBQ1JDLE1BQUEsRUFBUTtFQUNSQyxNQUFBLEVBQVE7RUFFUkMsR0FBQSxFQUFLO0VBRUxDLFFBQUEsRUFBVTtFQUVWQyxRQUFBLEVBQVU7RUFDVkMsUUFBQSxFQUFVO0VBQ1ZDLFFBQUEsRUFBVTtFQUVWQyxVQUFBLEVBQVk7RUFDWkMsVUFBQSxFQUFZO0VBQ1pDLFVBQUEsRUFBWTtFQUNaQyxVQUFBLEVBQVk7RUFJWkMsaUJBQUEsRUFBbUI7RUFFbkJDLGtCQUFBLEVBQW9CO0VBR3BCQyx3QkFBQSxFQUEwQjtFQUMxQkMseUJBQUEsRUFBMkI7RUFDM0JDLHdCQUFBLEVBQTBCO0VBQzFCQyx5QkFBQSxFQUEyQjtBQUM3QjtBQUNBLElBQUlDLFNBQUEsR0FBWSxTQUFTQyxXQUFVQyxLQUFBLEVBQU9DLFNBQUEsRUFBVztFQUNuRCxRQUFRRCxLQUFBO0lBQUEsS0FDRDtNQUNILE9BQU8sdUNBQXVDQyxTQUFBLEdBQVksc0RBQXNEQSxTQUFBLEdBQVk7SUFBQSxLQUV6SDtNQUNILE9BQU8scUNBQXFDQSxTQUFBLEdBQVksbURBQW1EQSxTQUFBLEdBQVk7SUFBQSxLQUVwSDtNQUNILE9BQU8sbUJBQW1CQSxTQUFBLEdBQVksbUVBQW1FLENBQUNBLFNBQUEsR0FBWSx3RkFBd0ZBLFNBQUEsR0FBWTtJQUFBLEtBRXZOO01BQ0gsT0FBTyxtQkFBbUJBLFNBQUEsR0FBWSxtRUFBbUUsQ0FBQ0EsU0FBQSxHQUFZLHdGQUF3RkEsU0FBQSxHQUFZLCtCQUErQkEsU0FBQSxHQUFZLG1FQUFtRSxDQUFDQSxTQUFBLEdBQVksd0ZBQXdGQSxTQUFBLEdBQVk7SUFBQSxLQUV0YjtNQUNILE9BQU8sNEJBQTRCQSxTQUFBLEdBQVksb0RBQW9EQSxTQUFBLEdBQVk7SUFBQSxLQUU1RztNQUNILE9BQU8sNEJBQTRCQSxTQUFBLEdBQVksbURBQW1EQSxTQUFBLEdBQVk7SUFBQSxLQUUzRztNQUNILE9BQU8sdUNBQXVDQSxTQUFBLEdBQVksMENBQTBDQSxTQUFBLEdBQVk7SUFBQSxLQUU3RztNQUNILE9BQU8scUNBQXFDQSxTQUFBLEdBQVksMENBQTBDQSxTQUFBLEdBQVk7SUFBQSxLQUUzRztNQUNILE9BQU8sc0tBQXNLQSxTQUFBLEdBQVksTUFBTSx1UkFBdVJBLFNBQUEsR0FBWSxNQUFNO0lBQUEsS0FFcmU7TUFDSCxPQUFPLGdNQUFnTUEsU0FBQSxHQUFZLEtBQUssNFVBQTRVQSxTQUFBLEdBQVksT0FBTztJQUFBO01BSXZqQixNQUFNLElBQUl2TixLQUFBLENBQU0sNkJBQTZCO0VBQUE7QUFFbkQ7QUFPQSxJQUFNd04sZ0JBQUEsR0FBTixNQUF1QjtFQUdyQnJQLFlBQVlzUCxRQUFBLEVBQVU7SUFDcEIsS0FBS0EsUUFBQSxHQUFXO0lBQ2hCLEtBQUtDLE9BQUEsR0FBVTtJQUNmLEtBQUsvRCxNQUFBLEdBQVM7SUFDZCxLQUFLZ0UsS0FBQSxHQUFRO0lBQ2IsS0FBS0MsV0FBQSxHQUFjO0lBQ25CLEtBQUtDLEtBQUEsR0FBUTtJQUNiLEtBQUtKLFFBQUEsR0FBV0EsUUFBQTtJQUNoQixLQUFLQyxPQUFBLEdBQVUsRUFBQztJQUNoQixLQUFLL0QsTUFBQSxHQUFTO0lBQ2QsS0FBS2dFLEtBQUEsR0FBUTtJQUNiLEtBQUtDLFdBQUEsR0FBYztJQUNuQixLQUFLQyxLQUFBLEdBQVEsQ0FBQztFQUNoQjtFQUVBQyxTQUFTQyxTQUFBLEVBQVc7SUFDbEIsT0FBT3hMLEtBQUEsQ0FBTXBDLFFBQUEsQ0FBUyxLQUFLdU4sT0FBQSxFQUFTSyxTQUFTO0VBQy9DO0VBSUFDLE9BQUEsRUFBUztJQUNQLElBQUlDLElBQUEsR0FBT0MsUUFBQSxDQUFTQyxzQkFBQSxDQUF1QjtJQUUzQyxTQUFTMUcsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSSxLQUFLZ0csUUFBQSxDQUFTbk8sTUFBQSxFQUFRbUksQ0FBQSxJQUFLO01BQzdDd0csSUFBQSxDQUFLRyxXQUFBLENBQVksS0FBS1gsUUFBQSxDQUFTaEcsQ0FBQSxFQUFHdUcsTUFBQSxDQUFPLENBQUM7SUFDNUM7SUFFQSxPQUFPQyxJQUFBO0VBQ1Q7RUFJQUksU0FBQSxFQUFXO0lBQ1QsSUFBSUMsTUFBQSxHQUFTO0lBRWIsU0FBUzdHLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUksS0FBS2dHLFFBQUEsQ0FBU25PLE1BQUEsRUFBUW1JLENBQUEsSUFBSztNQUM3QzZHLE1BQUEsSUFBVSxLQUFLYixRQUFBLENBQVNoRyxDQUFBLEVBQUc0RyxRQUFBLENBQVM7SUFDdEM7SUFFQSxPQUFPQyxNQUFBO0VBQ1Q7RUFPQUMsT0FBQSxFQUFTO0lBSVAsSUFBSUEsTUFBQSxHQUFTQyxLQUFBLElBQVNBLEtBQUEsQ0FBTUQsTUFBQSxDQUFPO0lBRW5DLE9BQU8sS0FBS2QsUUFBQSxDQUFTZ0IsR0FBQSxDQUFJRixNQUFNLEVBQUVHLElBQUEsQ0FBSyxFQUFFO0VBQzFDO0FBRUY7QUFHQSxJQUFJQyxlQUFBLEdBQWtCO0VBQ3BCLGVBQWU7SUFDYixNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJO0lBQ3ZCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDbEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsQ0FBRztJQUM1QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUk7SUFDeEIsT0FBTyxDQUFDLEdBQUcsT0FBTyxPQUFPLEdBQUcsSUFBSTtJQUNoQyxPQUFPLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxPQUFPLEdBQUcsR0FBRyxPQUFPO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLEtBQUssR0FBRyxHQUFHLE9BQU87SUFDN0IsT0FBTyxDQUFDLEdBQUcsT0FBTyxHQUFHLEdBQUcsT0FBTztJQUMvQixPQUFPLENBQUMsR0FBRyxLQUFLLEdBQUcsR0FBRyxPQUFPO0lBQzdCLE9BQU8sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdkMsUUFBUSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ2hDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUNyQyxRQUFRLENBQUMsVUFBVSxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQ3JDLFFBQVEsQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLENBQUc7SUFDckMsUUFBUSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsQ0FBRztJQUNyQyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxDQUFHO0lBQ3BDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLENBQUc7SUFDcEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLENBQUc7SUFDOUIsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsQ0FBRztJQUM5QixRQUFRLENBQUMsVUFBVSxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFFBQVEsQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLENBQUc7SUFDckMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUM5QixRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQzlCLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLENBQUc7SUFDOUIsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsQ0FBRztJQUM5QixRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsUUFBUSxPQUFPLEdBQUcsR0FBRyxDQUFHO0lBQ2pDLFFBQVEsQ0FBQyxRQUFRLE9BQU8sR0FBRyxHQUFHLENBQUc7SUFDakMsUUFBUSxDQUFDLFFBQVEsT0FBTyxHQUFHLEdBQUcsQ0FBRztJQUNqQyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxRQUFRLE9BQU8sR0FBRyxHQUFHLENBQUc7SUFDakMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxDQUFHO0lBQ3BDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLENBQUc7SUFDcEMsUUFBUSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsQ0FBRztJQUNyQyxRQUFRLENBQUMsVUFBVSxTQUFTLEdBQUcsR0FBRyxDQUFHO0lBQ3JDLFFBQVEsQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLENBQUc7SUFDckMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsQ0FBRztJQUNwQyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxDQUFHO0lBQ3BDLFFBQVEsQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLENBQUc7SUFDckMsUUFBUSxDQUFDLFFBQVEsT0FBTyxHQUFHLEdBQUcsS0FBSztJQUNuQyxRQUFRLENBQUMsUUFBUSxPQUFPLEdBQUcsR0FBRyxLQUFLO0lBQ25DLFFBQVEsQ0FBQyxHQUFHLE9BQU8sR0FBRyxHQUFHLEdBQUc7SUFDNUIsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUNyQyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQ3BDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsVUFBVSxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFFBQVEsQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsUUFBUSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxRQUFRLENBQUMsVUFBVSxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDcEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFFBQVEsT0FBTyxHQUFHLEdBQUcsT0FBTztJQUNyQyxRQUFRLENBQUMsUUFBUSxPQUFPLEdBQUcsR0FBRyxPQUFPO0lBQ3JDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxHQUFHLE9BQU8sR0FBRyxHQUFHLE9BQU87SUFDaEMsUUFBUSxDQUFDLEdBQUcsT0FBTyxHQUFHLEdBQUcsT0FBTztJQUNoQyxRQUFRLENBQUMsR0FBRyxPQUFPLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLFFBQVEsQ0FBQyxHQUFHLE9BQU8sR0FBRyxHQUFHLE9BQU87SUFDaEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxRQUFRLFFBQVEsR0FBRyxHQUFHLE9BQU87SUFDdEMsUUFBUSxDQUFDLFFBQVEsUUFBUSxHQUFHLEdBQUcsT0FBTztJQUN0QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDOUIsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUM5QixRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQzlCLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDOUIsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxHQUFHLE9BQU8sR0FBRyxHQUFHLE9BQU87SUFDaEMsUUFBUSxDQUFDLEdBQUcsT0FBTyxHQUFHLEdBQUcsT0FBTztJQUNoQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsU0FBUyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNuQyxTQUFTLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ25DLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87RUFDM0M7RUFDQSx1QkFBdUI7SUFDckIsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSTtJQUN2QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsU0FBUyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLFNBQVMsT0FBTztJQUM1QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsU0FBUyxPQUFPO0lBQzVDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLFNBQVMsT0FBTztJQUM1QyxNQUFNLENBQUMsU0FBUyxTQUFTLFFBQVEsU0FBUyxPQUFPO0lBQ2pELE1BQU0sQ0FBQyxHQUFHLFNBQVMsUUFBUyxTQUFTLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsU0FBUyxTQUFTLFNBQVMsU0FBUyxPQUFPO0lBQ2xELE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLFNBQVMsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsU0FBUyxNQUFNO0lBQ3JDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLFNBQVMsT0FBTztJQUM1QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsU0FBUyxPQUFPO0lBQzVDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxTQUFTLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLFNBQVMsTUFBTTtJQUNyQyxNQUFNLENBQUMsR0FBRyxTQUFTLE9BQU8sU0FBUyxPQUFPO0lBQzFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLFNBQVMsT0FBTztJQUM1QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLFNBQVMsTUFBTTtJQUMzQyxNQUFNLENBQUMsU0FBUyxTQUFTLFNBQVMsU0FBUyxPQUFPO0lBQ2xELE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDNUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSTtFQUMxQjtFQUNBLG1CQUFtQjtJQUNqQixNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJO0lBQ3ZCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdkMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxNQUFNO0lBQy9CLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE1BQU07SUFDckMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsTUFBTTtJQUN0QyxPQUFP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QUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN2QyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDNUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDNUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsTUFBTTtJQUMvQixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDNUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLFNB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UyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUNyQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDN0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLEtBQUs7SUFDdEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLEtBQUs7SUFDdEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFH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R0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDOUMsUUFBUSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxRQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLE9BQU8sT0FBTyxHQUFHLEdBQUcsS0FBSztJQUNsQyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxRQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFFBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsVUFBVSxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ3ZDLFFBQVEsQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsUUFBUSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUN2QyxRQUFRLENBQUMsTUFBTSxNQUFNLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxNQUFNLE1BQU0sR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLE1BQU0sTUFBTSxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsTUFBTSxNQUFNLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsUUFBUSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN6QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDdkMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsVUFBVSxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ3ZDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsR0FBRyxNQUFNLEdBQUcsR0FBRyxPQUFPO0lBQy9CLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxTQUFTLENBQUMsTUFBTSxNQUFNLEdBQUcsR0FBRyxPQUFPO0lBQ25DLFNBQVMsQ0FBQyxNQUFNLE1BQU0sR0FBRyxHQUFHLE9BQU87SUFDbkMsU0FBUyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUMvQixTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3pDLFNBQVMsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDekMsU0FBUyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsQ0FBQztFQUNyQztFQUNBLG1CQUFtQjtJQUNqQixNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJO0lBQ3ZCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzVDLE1BQU0sQ0FBQyxTQUFTLE1BQU0sU0FBUyxHQUFHLE9BQU87SUFDekMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLE1BQU0sTUFBTSxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxNQUFNLFNBQVMsR0FBRyxPQUFPO0lBQ25DLE1BQU0sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDNUMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLE1BQU0sTUFBTSxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUM1QyxNQUFNLENBQUMsVUFBVSxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzdDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsUUFBUSxHQUFHLE9BQU87SUFDckMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE1BQU07SUFDckMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLE9BQU8sR0FBRyxPQUFPO0lBQ3BDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE1BQU07SUFDckMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFFBQVEsR0FBRyxPQUFPO0lBQ3JDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE1BQU07SUFDckMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLE1BQU0sTUFBTSxRQUFRLEdBQUcsT0FBTztJQUNyQyxNQUFNLENBQUMsTUFBTSxNQUFNLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLE1BQU0sU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN6QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsT0FBTyxHQUFHLE9BQU87SUFDckMsT0FBTyxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsR0FBRztJQUN6QyxPQUFPLENBQUMsU0FBUyxTQUFTLE9BQU8sR0FBRyxPQUFPO0lBQzNDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsU0FBUyxTQUFTLFFBQVEsR0FBRyxPQUFPO0lBQzVDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsT0FBTyxHQUFHLE9BQU87SUFDM0MsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLEtBQUs7SUFDckMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsU0FBUyxTQUFTLE9BQU8sR0FBRyxPQUFPO0lBQzNDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLE1BQU0sU0FBUyxTQUFTLEdBQUcsT0FBTztJQUMxQyxPQUFPLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJO0lBQ3hCLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsU0FBUyxHQUFHLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUM3QyxPQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxLQUFLO0lBQzNDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsT0FBTyxHQUFHLE9BQU87SUFDckMsT0FBTyxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUM3QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxPQUFPLEdBQUcsT0FBTztJQUNyQyxPQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxLQUFLO0lBQzNDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE1BQU07SUFDdEMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFFBQVEsR0FBRyxPQUFPO0lBQ3RDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0VBQzFDO0VBQ0EsZUFBZTtJQUNiLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUk7SUFDdkIsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDNUMsTUFBTSxDQUFDLFNBQVMsTUFBTSxTQUFTLEdBQUcsT0FBTztJQUN6QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLE1BQU0sTUFBTSxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsTUFBTSxNQUFNLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sU0FBUyxHQUFHLE9BQU87SUFDbkMsTUFBTSxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUM1QyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsTUFBTSxNQUFNLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUM1QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUM1QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxRQUFRLEdBQUcsT0FBTztJQUNyQyxNQUFNLENBQUMsU0FBUyxTQUFTLFFBQVEsR0FBRyxPQUFPO0lBQzNDLE1BQU0sQ0FBQyxVQUFVLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDN0MsTUFBTSxDQUFDLEdBQUcsU0FBUyxRQUFRLEdBQUcsT0FBTztJQUNyQyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLEtBQUs7SUFDcEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLEtBQUs7SUFDcEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUM1QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsTUFBTSxNQUFNLFFBQVEsR0FBRyxPQUFPO0lBQ3JDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsTUFBTSxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3pDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsSUFBSTtJQUNuQyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxJQUFJO0lBQ25DLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsSUFBSTtJQUNwQyxPQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLElBQUk7SUFDMUMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFFBQVEsR0FBRyxPQUFPO0lBQ3RDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDN0MsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsSUFBSTtJQUNwQyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDN0MsT0FBTyxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsSUFBSTtJQUMxQyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLElBQUk7SUFDcEMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDN0MsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsTUFBTSxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUk7SUFDeEIsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLElBQUk7SUFDOUIsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDN0MsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFFBQVEsR0FBRyxPQUFPO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxRQUFRLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsUUFBUSxHQUFHLE9BQU87SUFDdkMsUUFBUSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0VBQ3BDO0VBQ0EsZ0JBQWdCO0lBQ2QsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSTtJQUN2QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDNUIsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsU0FBUyxNQUFNLEdBQUcsR0FBRyxHQUFHO0lBQy9CLE1BQU0sQ0FBQyxTQUFTLE1BQU0sR0FBRyxHQUFHLE9BQU87SUFDbkMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxNQUFNLEdBQUcsR0FBRyxHQUFHO0lBQ3pCLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEdBQUcsR0FBRztJQUM1QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQzVCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDNUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUM1QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQzVCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDNUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUM1QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQzVCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDNUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUM1QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQzVCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsUUFBUSxRQUFRLEdBQUcsR0FBRyxPQUFPO0lBQ3BDLE1BQU0sQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdkMsTUFBTSxDQUFDLFFBQVEsUUFBUSxHQUFHLEdBQUcsT0FBTztJQUNwQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsSUFBSTtJQUM3QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxJQUFJO0lBQzdCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxJQUFJO0lBQzdCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLElBQUk7SUFDN0IsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsSUFBSTtJQUNuQyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FB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UUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUNoQyxRQUFRLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxHQUFHO0lBQ3BDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsU0FBUyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxTQUFTLE9BQU87SUFDOUMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLENBQUc7SUFDckMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUNwQyxRQUFRLENBQUMsVUFBVSxTQUFTLEdBQUcsR0FBRyxDQUFHO0lBQ3JDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDcEMsUUFBUSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsQ0FBRztJQUNyQyxRQUFRLENBQUMsTUFBTSxNQUFNLEdBQUcsR0FBRyxHQUFHO0lBQzlCLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLENBQUc7SUFDcEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsQ0FBRztJQUNwQyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxDQUFHO0lBQ3BDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLENBQUc7SUFDcEMsUUFBUSxDQUFDLE9BQU8sT0FBTyxHQUFHLEdBQUcsQ0FBRztJQUNoQyxRQUFRLENBQUMsT0FBTyxPQUFPLEdBQUcsR0FBRyxLQUFLO0lBQ2xDLFFBQVEsQ0FBQyxPQUFPLE9BQU8sR0FBRyxHQUFHLEtBQUs7SUFDbEMsUUFBUSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsQ0FBRztJQUNy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SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsUUFBUSxRQUFRLEdBQUcsR0FBRyxDQUFHO0lBQ2xDLFFBQVEsQ0FBQyxRQUFRLFFBQVEsR0FBRyxHQUFHLENBQUc7SUFDbEMsUUFBUSxDQUFDLFFBQVEsUUFBUSxHQUFHLEdBQUcsT0FBTztJQUN0QyxRQUFRLENBQUMsUUFBUSxRQUFRLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLFFBQVEsQ0FBQyxRQUFRLFFBQVEsR0FBRyxHQUFHLE9BQU87SUFDdEMsUUFBUSxDQUFDLFFBQVEsUUFBUSxHQUFHLEdBQUcsT0FBTztJQUN0QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3hDLFFBQVEsQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN4QyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FB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LEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFFBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUM3QyxPQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxNQUFNO0lBQzVDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsTUFBTTtJQUNoQyxPQUFPLENBQUMsU0FBUyxTQUFTLFFBQVEsR0FBRyxPQUFPO0lBQzVDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE1BQU07SUFDdEMsT0FBTyxDQUFDLEdBQUcsU0FBUyxPQUFRLEdBQUcsT0FBTztJQUN0QyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxNQUFNO0lBQ2hDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDN0MsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsTUFBTTtJQUN0QyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSTtJQUN4QixPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE1BQU07SUFDdEMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDN0MsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDN0MsT0FBTyxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsR0FBRztJQUN6QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxNQUFNO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxNQUFNO0lBQ3RDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDN0MsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDN0MsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE1BQU07SUFDdEMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsS0FBSztJQUNyQyxRQUFRLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxNQUFNO0lBQ3ZDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsU0FBUyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNuQyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0VBQzNDO0VBQ0EsZUFBZTtJQUNiLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUk7SUFDdkIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUM1QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQzVCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDNUIsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUNsQyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQ2xDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDbEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUM1QixNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQ2xDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDNUIsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUNsQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsU0FBUyxJQUFJO0lBQ25DLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLFNBQVMsT0FBTztJQUM1QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsU0FBUyxPQUFPO0lBQzVDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE1BQU07SUFDM0MsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLFNBQVMsT0FBTztJQUM1QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsU0FBUyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLFNBQVMsT0FBTztJQUM1QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsU0FBUyxPQUFPO0lBQzVDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDNUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLFNBQVMsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMs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QUFHLFNBQVMsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsU0FBUyxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDN0MsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLFNBQVMsT0FBTztJQUM3QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsU0FBUyxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxTQUFTLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxNQUFNLFNBQVMsT0FBTztJQUMxQyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsU0FBUyxNQUFNO0lBQzVDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsT0FBUSxTQUFTLE1BQU07SUFDM0MsT0FBTyxDQUFDLFNBQVMsU0FBUyxTQUFTLFNBQVMsT0FBTztJQUNuRCxPQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDN0MsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLFNBQVMsT0FBTztJQUN2QyxPQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsU0FBUyxNQUFNO0lBQ2xELE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDbkQsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLFNBQVMsT0FBTztJQUM3QyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsU0FBUyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsU0FBUyxTQUFTLEdBQUcsU0FBUyxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxTQUFTLE9BQU87SUFDN0MsT0FBTyxDQUFDLFNBQVMsU0FBUyxTQUFTLFNBQVMsTUFBTTtJQUNsRCxPQUFPLENBQUMsR0FBRyxTQUFT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N0IsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdkMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsUUFBUSxHQUFHLE9BQU87SUFDckMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsSUFBSTtJQUM3QixNQUFNLENBQUMsTUFBTSxTQUFTLFNBQVMsR0FBRyxJQUFJO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLElBQUk7SUFDMUMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxJQUFJO0lBQzlCLE9BQU8sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLEdBQUc7SUFDbkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQzdCLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLEdBQUc7SUFDekMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsTUFBTSxTQUFTLEdBQUcsR0FBRyxJQUFJO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUk7SUFDeEIsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsSUFBSTtJQUM5QixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLElBQUk7SUFDOUIsT0FBTyxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsSUFBSTtJQUM5QixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxJQUFJO0lBQzlCLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLElBQUk7SUFDOUIsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsSUFBSTtJQUM5QixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsSUFBSTtJQUM5QixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxJQUFJO0lBQzlCLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxRQUFRLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxJQUFJO0lBQ3JDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDeEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztFQUNwQztFQUNBLG9CQUFvQjtJQUNsQixNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJO0lBQ3ZCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxRQUFTLEdBQUcsR0FBRztJQUNsQyxNQUFNLENBQUMsU0FBUyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzVDLE1BQU0sQ0FBQyxTQUFTLE1BQU0sU0FBUyxHQUFHLEdBQUc7SUFDckMsTUFBTSxDQUFDLFNBQVMsTUFBTSxTQUFTLEdBQUcsT0FBTztJQUN6QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLE1BQU0sTUFBTSxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsTUFBTSxNQUFNLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sU0FBUyxHQUFHLEdBQUc7SUFDL0IsTUFBTSxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUM1QyxNQUFNLENBQUMsT0FBTyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ3BDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsTUFBTSxNQUFNLFNBQVMsR0FBRyxHQUFHO0lBQ2xDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLEdBQUc7SUFDbEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsR0FBRztJQUNsQyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxHQUFHO0lBQ2xDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLEdBQUc7SUFDbEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsR0FBRztJQUNsQyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxHQUFHO0lBQ2xDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLEdBQUc7SUFDbEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsR0FBRztJQUNsQyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxHQUFHO0lBQ2xDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLEdBQUc7SUFDbEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsT0FBTyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQzFDLE1BQU0sQ0FBQyxPQUFPLE1BQU0sU0FBUyxHQUFHLE9BQU87SUFDdkMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLEtBQUs7SUFDcEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLE9BQU8sU0FBUyxTQUFTLEdBQUcsT0FBTztJQUMxQyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxNQUFNO0lBQ3JDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsUUFBUSxHQUFHLE9BQU87SUFDckMsTUFBTSxDQUFDLEdBQUcsU0FBUyxRQUFRLEdBQUcsT0FBTztJQUNyQyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsTUFBTSxNQUFNLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxRQUFRLEdBQUcsR0FBRztJQUNqQyxNQUFNLENBQUMsTUFBTSxTQUFTLFNBQVMsR0FBRyxHQUFHO0lBQ3JDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsUUFBUyxHQUFHLE9BQU87SUFDdEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN0QyxNQUFNLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLEdBQUc7SUFDekMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDN0MsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsU0FBUyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxHQUFHO0lBQ25DLE9BQU8sQ0FBQyxTQUFTLFNBQVMsUUFBUSxHQUFHLE9BQU87SUFDNUMsT0FBTyxDQUFDLFNBQVMsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUM3QyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsR0FBRyxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsUUFBUSxHQUFHLE9BQU87SUFDdEMsT0FBTyxDQUFDLEdBQUcsU0FBUyxTQUFTLEdBQUcsT0FBTztJQUN2QyxPQUFP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QUFHLEdBQUcsR0FBRztJQUM1QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxPQUFPLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDcEMsTUFBTSxDQUFDLE9BQU8sTUFBTSxHQUFHLEdBQUcsT0FBTztJQUNqQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDaEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNoQyxNQUFNLENBQUMsT0FBTyxTQUFT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R0FBRyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDdkMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUM3QixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQzdCLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDN0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUM3QixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQzdCLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDN0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDN0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUM3QixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxPQUFPO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsT0FBTztJQUNqQyxPQUFPLENBQUMsR0FB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QUM5QixPQUFPLENBQUMsR0FBRyxPQUFPLEdBQUcsR0FBRyxNQUFNO0lBQzlCLFFBQVEsQ0FBQyxTQUFTLE1BQU0sR0FBRyxHQUFHLENBQUc7SUFDakMsUUFBUSxDQUFDLFNBQVMsTUFBTSxHQUFHLEdBQUcsT0FBTztJQUNyQyxRQUFRLENBQUMsU0FBUyxNQUFNLEdBQUcsR0FBRyxPQUFPO0lBQ3JDLFFBQVEsQ0FBQyxTQUFTLE1BQU0sR0FBRyxHQUFHLE9BQU87SUFDckMsUUFBUSxDQUFDLFNBQVMsTUFBTSxHQUFHLEdBQUcsT0FBTztJQUNyQyxRQUFRLENBQUMsU0FBUyxPQUFPLEdBQUcsR0FBRyxLQUFLO0lBQ3BDLFFBQVEsQ0FBQyxNQUFPLEtBQUssR0FBRyxHQUFHLEtBQUs7SUFDaEMsUUFBUSxDQUFDLFNBQVMsT0FBTyxHQUFHLEdBQUcsS0FBSztJQUNwQyxRQUFRLENBQUMsU0FBUyxPQUFPLEdBQUcsR0FBRyxLQUFLO0lBQ3BDLFFBQVEsQ0FBQyxNQUFPLEtBQUssR0FBRyxHQUFHLEtBQUs7SUFDaEMsUUFBUSxDQUFDLFNBQVMsT0FBTyxHQUFHLEdBQUcsS0FBSztJQUNwQyxRQUFRLENBQUMsU0FBUyxPQUFPLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLFFBQVEsQ0FBQyxRQUFVLE9BQU8sR0FBRyxHQUFHLE9BQU87SUFDdkMsUUFBUSxDQUFDLFNBQVMsT0FBTyxHQUFHLEdBQUcsT0FBTztJQUN0QyxRQUFRLENBQUMsU0FBUyxPQUFPLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLFFBQVEsQ0FBQyxRQUFVLE9BQU8sR0FBRyxHQUFHLE9BQU87SUFDdkMsUUFBUSxDQUFDLFNBQVMsT0FBTyxHQUFHLEdBQUcsT0FBTztJQUN0QyxRQUFRLENBQUMsTUFBTyxLQUFLLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxTQUFTLE1BQU0sR0FBRyxHQUFHLE9BQU87SUFDckMsUUFBUSxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUcsT0FBTztJQUNsQyxRQUFRLENBQUMsR0FBRyxLQUFLLEdBQUcsR0FBRyxPQUFPO0lBQzlCLFFBQVEsQ0FBQyxNQUFPLEtBQUssR0FBRyxHQUFHLE9BQU87SUFDbEMsUUFBUSxDQUFDLFNBQVMsTUFBTSxHQUFHLEdBQUcsT0FBTztJQUNyQyxRQUFRLENBQUMsU0FBUyxHQUFHLEdBQUcsR0FBRyxPQUFPO0lBQ2xDLFFBQVEsQ0FBQyxTQUFTLE9BQU8sR0FBRyxHQUFHLE9BQU87SUFDdEMsU0FBUyxDQUFDLFNBQVMsTUFBTSxHQUFHLEdBQUcsT0FBTztJQUN0QyxTQUFTLENBQUMsU0FBUyxNQUFNLEdBQUcsR0FBRyxPQUFPO0lBQ3RDLFNBQVMsQ0FBQyxTQUFVLE9BQU8sR0FBRyxHQUFHLE9BQU87SUFDeEMsU0FBUyxDQUFDLFNBQVUsT0FBTyxHQUFHLEdBQUcsT0FBTztJQUN4QyxTQUFTLENBQUMsR0FBRyxNQUFNLEdBQUcsR0FBRyxJQUFJO0lBQzdCLFNBQVMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxHQUFHLElBQUk7SUFDN0IsU0FBUyxDQUFDLEdBQUcsTUFBTSxHQUFHLEdBQUcsSUFBSTtJQUM3QixTQUFTLENBQUMsR0FBRyxNQUFNLEdBQUcsR0FBRyxJQUFJO0VBQy9CO0VBQ0Esc0JBQXNCO0lBQ3BCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEtBQUs7SUFDeEIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUNwQyxNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ3BDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ3BDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDcEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsVUFBVSxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ3JDLE1BQU0sQ0FBQyxTQUFTLE9BQU8sR0FBRyxHQUFHLEtBQUs7SUFDbEMsTUFBTSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUNyQyxNQUFNLENBQUMsR0FBRyxPQUFPLEdBQUcsR0FBRyxLQUFLO0lBQzVCLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDcEMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDcEMsTUFBTSxDQUFDLFVBQVUsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUNyQyxNQUFNLENBQUMsVUFBVSxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ3JDLE1BQU0sQ0FBQyxVQUFVLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDckMsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUNwQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ3BDLE1BQU0sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDcEMsTUFBTSxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUNwQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQzlCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDOUIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUM5QixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ3JDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ3JDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ3JDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDckMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ3JDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUNyQyxPQUFPLENBQUMsU0FBUyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQ3JDLE9BQU8sQ0FBQyxTQUFTLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDckMsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEtBQUs7SUFDekIsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsU0FBUyxHQUFHLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLFNBQVMsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUNyQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLEdBQUcsS0FBSztJQUMvQixPQUFP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RUFBTU0sT0FBQSxFQUFTLFVBQVUsV0FBVyxJQUFJO0FBQzNEVCxZQUFBLENBQWFFLElBQUEsRUFBTUMsSUFBQSxFQUFNTSxPQUFBLEVBQVMsVUFBVSxhQUFhLElBQUk7QUFDN0RULFlBQUEsQ0FBYUUsSUFBQSxFQUFNQyxJQUFBLEVBQU1NLE9BQUEsRUFBUyxVQUFVLFVBQVUsSUFBSTtBQUMxRFQsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU0sT0FBQSxFQUFTLFVBQVUsU0FBUyxJQUFJO0FBQ3pEVCxZQUFBLENBQWFFLElBQUEsRUFBTUMsSUFBQSxFQUFNTSxPQUFBLEVBQVMsVUFBVSxXQUFXLElBQUk7QUFDM0RULFlBQUEsQ0FBYUUsSUFBQSxFQUFNQyxJQUFBLEVBQU1NLE9BQUEsRUFBUyxVQUFVLFVBQVUsSUFBSTtBQUMxRFQsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU0sT0FBQSxFQUFTLFVBQVUsV0FBVyxJQUFJO0FBQzNEVCxZQUFBLENBQWFFLElBQUEsRUFBTUMsSUFBQSxFQUFNTSxPQUFBLEVBQVMsVUFBVSxZQUFZLElBQUk7QUFDNURULFlBQUEsQ0FBYUUsSUFBQSxFQUFNQyxJQUFBLEVBQU1NLE9BQUEsRUFBUyxVQUFVLFFBQVEsSUFBSTtBQUN4RFQsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU0sT0FBQSxFQUFTLFVBQVUsUUFBUSxJQUFJO0FBQ3hEVCxZQUFBLENBQWFFLElBQUEsRUFBTUMsSUFBQSxFQUFNTSxPQUFBLEVBQVMsVUFBVSxRQUFRLElBQUk7QUFDeERULFlBQUEsQ0FBYUUsSUFBQSxFQUFNQyxJQUFBLEVBQU1NLE9BQUEsRUFBUyxVQUFVLGFBQWEsSUFBSTtBQUM3RFQsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU0sT0FBQSxFQUFTLFVBQVUsUUFBUSxJQUFJO0FBQ3hEVCxZQUFBLENBQWFFLElBQUEsRUFBTUMsSUFBQSxFQUFNTSxPQUFBLEVBQVMsVUFBVSxTQUFTLElBQUk7QUFDekRULFlBQUEsQ0FBYUUsSUFBQSxF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RSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsWUFBWTtBQUNuRFYsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsVUFBVTtBQUNqRFYsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsVUFBVTtBQUNqRFYsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsT0FBTztBQUM5Q1YsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsU0FBUztBQUNoRFYsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsUUFBUTtBQUMvQ1YsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsU0FBUztBQUNoRFYsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsUUFBUTtBQUMvQ1YsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsT0FBTztBQUM5Q1YsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsYUFBYTtBQUNwRFYsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsWUFBWTtBQUNuRFYsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsV0FBVztBQUNsRFYsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsUUFBUTtBQUMvQ1YsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsU0FBUztBQUNoRFYsWUFBQSxDQUFhRSxJQUFBLEVBQU1DLElBQUEsRUFBTU8sRUFBQSxFQUFJLFVBQVUsVUFBVTtBQUNqRFYsWUFBQSxDQUFh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QU07RUFDUjtFQUNBLFVBQVU7SUFDUjRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFdBQVc7SUFDVDRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFdBQVc7SUFDVDRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFVBQVU7SUFDUjRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFVBQVU7SUFDUjRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFdBQVc7SUFDVDRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFdBQVc7SUFDVDRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFVBQVU7SUFDUjRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFVBQVU7SUFDUjRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFdBQVc7SUFDVDRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFdBQVc7SUFDVDRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFNBQVM7SUFDUDRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFNBQVM7SUFDUDRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFVBQVU7SUFDUjRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtFQUNBLFVBQVU7SUFDUjRxQixNQUFBLEVBQVE7SUFDUjVxQixJQUFBLEVBQU07RUFDUjtBQUNGO0FBQ0EsSUFBSXF3QixVQUFBLEdBQWEsQ0FBQyxLQUFLLFlBQVksS0FBSyxZQUFZLEtBQUssWUFBWSxLQUFLLFlBQVksT0FBTyxZQUFZLE9BQU8sWUFBWSxZQUFZLFlBQVksVUFBVSxVQUFVLFdBQVcsV0FBVyxVQUFVLFVBQVUsS0FBSyxLQUFLLFlBQVksVUFBVSxZQUFZLFVBQVUsUUFBUSxRQUFRLFdBQVcsV0FBVyxXQUFXLFdBQVcsWUFBWSxZQUFZLFVBQVUsVUFBVSxnQkFBZ0IsZ0JBQWdCLFVBQVUsVUFBVSxLQUFLLGVBQWUsS0FBSyxVQUFVLE9BQU8sVUFBVSxhQUFhLGFBQWEsZUFBZSxlQUFlLGlCQUFpQixpQkFBaUIsR0FBRztBQUdyakIsU0FBUytGLGVBQWV2RixLQUFBLEVBQU9qeEIsT0FBQSxFQUFTO0VBQ3RDLElBQUl5MkIsUUFBQSxHQUFXbE8sbUJBQUEsQ0FBb0IwSSxLQUFLO0VBRXhDLElBQUl3RixRQUFBLElBQVk1NUIsS0FBQSxDQUFNcEMsUUFBQSxDQUFTZzJCLFVBQUEsRUFBWWdHLFFBQUEsQ0FBU3Q5QixJQUFJLEdBQUc7SUFDekQsT0FBT3M5QixRQUFBO0VBQ1QsV0FBV0EsUUFBQSxFQUFVO0lBQ25CLE1BQU0sSUFBSWw5QixVQUFBLENBQVcsd0JBQXdCazlCLFFBQUEsQ0FBU3Q5QixJQUFBLEdBQU8sY0FBYzZHLE9BQUEsQ0FBUTBwQixRQUFBLEdBQVcsS0FBS3VILEtBQUs7RUFDMUcsT0FBTztJQUNMLE1BQU0sSUFBSTEzQixVQUFBLENBQVcsNkJBQTZCMDNCLEtBQUEsQ0FBTWwxQixJQUFBLEdBQU8sS0FBS2sxQixLQUFLO0VBQzNFO0FBQ0Y7QUFFQXBWLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsVUFBVSxVQUFVLFdBQVcsV0FBVyxVQUFVLFVBQVUsV0FBVyxXQUFXLFVBQVUsVUFBVSxXQUFXLFdBQVcsU0FBUyxTQUFTLFVBQVUsUUFBUTtFQUMxS0MsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNUQyxRQUFBLEVBQVUsQ0FBQyxXQUFXO0VBQ3hCO0VBQ0FOLE9BQUEsRUFBU0EsQ0FBQ2pjLE9BQUEsRUFBU3lwQixJQUFBLEtBQVM7SUFDMUIsSUFBSXdILEtBQUEsR0FBUXVGLGNBQUEsQ0FBZS9NLElBQUEsQ0FBSyxJQUFJenBCLE9BQU87SUFDM0MsT0FBTztNQUNMakUsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU01TCxPQUFBLENBQVEycEIsTUFBQSxDQUFPL2QsSUFBQTtNQUNyQnhMLElBQUEsRUFBTW0yQixjQUFBLENBQWV2MkIsT0FBQSxDQUFRMHBCLFFBQUEsRUFBVXRwQixJQUFBO01BQ3ZDNHFCLE1BQUEsRUFBUXVMLGNBQUEsQ0FBZXYyQixPQUFBLENBQVEwcEIsUUFBQSxFQUFVc0IsTUFBQTtNQUN6Q2lHLEtBQUEsRUFBT0EsS0FBQSxDQUFNOTNCO0lBQ2Y7RUFDRjtFQUNBK2lCLFdBQUEsRUFBYUEsQ0FBQ3BnQixLQUFBLEVBQU93RCxPQUFBLEtBQVk7SUFDL0IsSUFBSXhELEtBQUEsQ0FBTW0xQixLQUFBLEtBQVUsS0FBSztNQUd2QixPQUFPclcsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUNyYixLQUFBLENBQU1rdkIsTUFBTSxDQUFDO0lBQzVDO0lBR0EsT0FBT2tMLFNBQUEsQ0FBVUUsVUFBQSxDQUFXdDZCLEtBQUEsQ0FBTW0xQixLQUFBLEVBQU9uMUIsS0FBQSxDQUFNc0UsSUFBQSxFQUFNZCxPQUFBLEVBQVN4RCxLQUFBLENBQU04UCxJQUFBLEVBQU0sQ0FBQzlQLEtBQUEsQ0FBTWt2QixNQUFNLENBQUM7RUFDMUY7RUFDQTVPLGFBQUEsRUFBZXRnQixLQUFBLElBQVM7SUFDdEIsSUFBSWlNLFFBQUEsR0FBVyxFQUFDO0lBRWhCLElBQUlqTSxLQUFBLENBQU1tMUIsS0FBQSxLQUFVLEtBQUs7TUFDdkJscEIsUUFBQSxDQUFTaEssSUFBQSxDQUFLaWpCLFFBQUEsQ0FBU2xsQixLQUFBLENBQU1tMUIsS0FBQSxFQUFPbjFCLEtBQUEsQ0FBTThQLElBQUksQ0FBQztJQUNqRDtJQUVBLElBQUlvRSxJQUFBLEdBQU8sSUFBSStRLFVBQUEsQ0FBV0osUUFBQSxDQUFTLE1BQU01WSxRQUFRO0lBRWpELElBQUlqTSxLQUFBLENBQU1rdkIsTUFBQSxLQUFXLFdBQVdsdkIsS0FBQSxDQUFNa3ZCLE1BQUEsS0FBVyxVQUFVO01BR3pEaGIsSUFBQSxDQUFLRyxZQUFBLENBQWEsU0FBUyxNQUFNO0lBQ25DLE9BQU87TUFHTEgsSUFBQSxDQUFLRyxZQUFBLENBQWEsU0FBUyxPQUFPO0lBQ3BDO0lBRUFILElBQUEsQ0FBS0csWUFBQSxDQUFhLFlBQVksTUFBTTtJQUNwQyxJQUFJL1AsSUFBQSxHQUFPZ1AsTUFBQSxDQUFPOG1CLFNBQUEsQ0FBVXRCLGVBQUEsQ0FBZ0I5NEIsS0FBQSxDQUFNc0UsSUFBQSxDQUFLO0lBQ3ZENFAsSUFBQSxDQUFLRyxZQUFBLENBQWEsV0FBVy9QLElBQUk7SUFDakM0UCxJQUFBLENBQUtHLFlBQUEsQ0FBYSxXQUFXL1AsSUFBSTtJQUNqQyxPQUFPNFAsSUFBQTtFQUNUO0FBQ0YsQ0FBQztBQUVELFNBQVMwbUIsYUFBYTU2QixLQUFBLEVBQU87RUFDM0IsSUFBSSxDQUFDQSxLQUFBLENBQU1FLElBQUEsRUFBTTtJQUNmLE1BQU0sSUFBSTFCLEtBQUEsQ0FBTSxtREFBbUQ7RUFDckU7QUFDRjtBQUVBdWhCLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsU0FBUztFQUNqQkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNUTyxTQUFBLEVBQVc7RUFDYjtFQUNBWixPQUFBLEVBQVNBLENBQUNqYyxPQUFBLEVBQVN5cEIsSUFBQSxLQUFTO0lBSTFCLElBQUkvckIsS0FBQSxHQUFRc0MsT0FBQSxDQUFRMnBCLE1BQUEsQ0FBT3dELE1BQUEsQ0FBT3h2QixNQUFBLENBQU9teUIsR0FBQSxDQUFJLGlCQUFpQjtJQUU5RCxJQUFJcHlCLEtBQUEsSUFBUyxPQUFPQSxLQUFBLEtBQVUsVUFBVTtNQUN0QyxNQUFNLElBQUluRSxVQUFBLENBQVcsOENBQThDO0lBQ3JFO0lBRUEsT0FBTztNQUNMd0MsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU01TCxPQUFBLENBQVEycEIsTUFBQSxDQUFPL2QsSUFBQTtNQUNyQnFsQixLQUFBLEVBQU91RixjQUFBLENBQWUvTSxJQUFBLENBQUssSUFBSXpwQixPQUFPLEVBQUU3RyxJQUFBO01BQ3hDdUU7SUFFRjtFQUNGO0FBQ0YsQ0FBQztBQUNEbWUsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxRQUFRO0VBQ2hCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RPLFNBQUEsRUFBVztFQUNiO0VBQ0FaLE9BQUEsRUFBU0EsQ0FBQ2pjLE9BQUEsRUFBU3lwQixJQUFBLEtBQVM7SUFDMUIsSUFBSXdILEtBQUEsR0FBUXVGLGNBQUEsQ0FBZS9NLElBQUEsQ0FBSyxJQUFJenBCLE9BQU87SUFDM0MsSUFBSTJwQixNQUFBLEdBQVMzcEIsT0FBQSxDQUFRMnBCLE1BQUE7SUFFckIsRUFBRUEsTUFBQSxDQUFPZ04sY0FBQTtJQUVULElBQUkzNkIsSUFBQSxHQUFPMnRCLE1BQUEsQ0FBTzJELGVBQUEsQ0FBZ0IsS0FBSztJQUN2QyxFQUFFM0QsTUFBQSxDQUFPZ04sY0FBQTtJQUVUaE4sTUFBQSxDQUFPaU4sTUFBQSxDQUFPLFdBQVcsS0FBSztJQUM5QixJQUFJeDhCLEtBQUEsR0FBUWd1QixjQUFBLENBQWV1QixNQUFBLENBQU93RyxhQUFBLENBQWMsR0FBRyxpQkFBaUI7SUFDcEUsT0FBTztNQUNMcDBCLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiNVAsSUFBQTtNQUNBN0IsSUFBQSxFQUFNODJCLEtBQUEsQ0FBTTkzQixJQUFBO01BQ1ppQixLQUFBLEVBQU9BLEtBQUEsQ0FBTTYyQixLQUFBO01BQ2I0RixVQUFBLEVBQVl6OEIsS0FBQSxDQUFNc0Q7SUFDcEI7RUFDRjtFQUNBd2UsV0FBQSxFQUFhQSxDQUFDcGdCLEtBQUEsRUFBT3dELE9BQUEsS0FBWTtJQUMvQm8zQixZQUFBLENBQWE1NkIsS0FBSztJQUVsQixJQUFJOHJCLE1BQUEsR0FBUWxLLGlCQUFBLENBQWtCNWhCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNc0QsT0FBQSxFQUFTLE1BQU0sQ0FBQyxTQUFTLFFBQVEsQ0FBQztJQUM1RSxJQUFJdTBCLFdBQUEsR0FBYztJQUNsQixJQUFJaUQsVUFBQSxHQUFhO0lBQ2pCLElBQUlDLFNBQUEsR0FBWTtJQUVoQixTQUFTaDFCLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUk2bEIsTUFBQSxDQUFNaHVCLE1BQUEsRUFBUW1JLENBQUEsSUFBSztNQUlyQyxJQUFJNmxCLE1BQUEsQ0FBTTdsQixDQUFBLEVBQUdpMUIsUUFBQSxFQUFVO1FBQ3JCRCxTQUFBLEdBQVk7TUFDZCxPQUFPO1FBQ0xsRCxXQUFBLEdBQWMxMUIsSUFBQSxDQUFLQyxHQUFBLENBQUl3cEIsTUFBQSxDQUFNN2xCLENBQUEsRUFBR2tDLE1BQUEsRUFBUTR2QixXQUFXO1FBQ25EaUQsVUFBQSxHQUFhMzRCLElBQUEsQ0FBS0MsR0FBQSxDQUFJd3BCLE1BQUEsQ0FBTTdsQixDQUFBLEVBQUdrRyxLQUFBLEVBQU82dUIsVUFBVTtNQUNsRDtJQUNGO0lBS0FqRCxXQUFBLElBQWV2MEIsT0FBQSxDQUFRNE4sY0FBQTtJQUN2QjRwQixVQUFBLElBQWN4M0IsT0FBQSxDQUFRNE4sY0FBQTtJQUN0QixJQUFJK3BCLFNBQUE7SUFFSixJQUFJbjdCLEtBQUEsQ0FBTTNCLElBQUEsS0FBUyxLQUFLO01BRXRCODhCLFNBQUEsR0FBWXhYLGlCQUFBLENBQWtCbmdCLE9BQUEsRUFBUyxDQUFDLE9BQU8sQ0FBQztJQUNsRCxPQUFPO01BR0wyM0IsU0FBQSxHQUFZZixTQUFBLENBQVVJLGNBQUEsQ0FBZXg2QixLQUFBLENBQU0zQixJQUFBLEVBQU0wNUIsV0FBQSxFQUFhaUQsVUFBQSxFQUFZeDNCLE9BQUEsRUFBU3hELEtBQUEsQ0FBTThQLElBQUEsRUFBTSxDQUFDLE9BQU8sQ0FBQztJQUMxRztJQUdBZ2MsTUFBQSxDQUFNM0ksT0FBQSxDQUFRZ1ksU0FBUztJQUV2QixJQUFJRixTQUFBLEVBQVc7TUFDYixTQUFTOTBCLEVBQUEsR0FBSyxHQUFHQSxFQUFBLEdBQUsybEIsTUFBQSxDQUFNaHVCLE1BQUEsRUFBUXFJLEVBQUEsSUFBTTtRQUN4QyxJQUFJaTFCLFdBQUEsR0FBY3RQLE1BQUEsQ0FBTTNsQixFQUFBO1FBSXhCLElBQUkrMEIsUUFBQSxHQUFXRSxXQUFBLENBQVlGLFFBQUE7UUFFM0IsSUFBSUEsUUFBQSxFQUFVO1VBRVpwUCxNQUFBLENBQU0zbEIsRUFBQSxJQUFNaTBCLFNBQUEsQ0FBVUksY0FBQSxDQUFlVSxRQUFBLENBQVMvRixLQUFBLEVBQU80QyxXQUFBLEVBQWFpRCxVQUFBLEVBQVlFLFFBQUEsQ0FBUzEzQixPQUFBLEVBQVN4RCxLQUFBLENBQU04UCxJQUFBLEVBQU0sRUFBRTtRQUNoSDtNQUNGO0lBQ0Y7SUFFQSxJQUFJdXJCLFVBQUE7SUFFSixJQUFJcjdCLEtBQUEsQ0FBTTFCLEtBQUEsS0FBVSxLQUFLO01BQ3ZCKzhCLFVBQUEsR0FBYTFYLGlCQUFBLENBQWtCbmdCLE9BQUEsRUFBUyxDQUFDLFFBQVEsQ0FBQztJQUNwRCxPQUFPO01BQ0wsSUFBSTgzQixZQUFBLEdBQWV0N0IsS0FBQSxDQUFNKzZCLFVBQUEsR0FBYXYzQixPQUFBLENBQVF1TyxTQUFBLENBQVUvUixLQUFBLENBQU0rNkIsVUFBVSxJQUFJdjNCLE9BQUE7TUFDNUU2M0IsVUFBQSxHQUFhakIsU0FBQSxDQUFVSSxjQUFBLENBQWV4NkIsS0FBQSxDQUFNMUIsS0FBQSxFQUFPeTVCLFdBQUEsRUFBYWlELFVBQUEsRUFBWU0sWUFBQSxFQUFjdDdCLEtBQUEsQ0FBTThQLElBQUEsRUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNsSDtJQUdBZ2MsTUFBQSxDQUFNN3BCLElBQUEsQ0FBS281QixVQUFVO0lBQ3JCLE9BQU92YyxXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxRQUFRLEdBQUd5USxNQUFBLEVBQU90b0IsT0FBTztFQUN4RDtFQUNBOGMsYUFBQSxFQUFlQSxDQUFDdGdCLEtBQUEsRUFBT3dELE9BQUEsS0FBWTtJQUNqQ28zQixZQUFBLENBQWE1NkIsS0FBSztJQUNsQixJQUFJOHJCLE1BQUEsR0FBUXRHLGdCQUFBLENBQWdCeGxCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNc0QsT0FBTztJQUUvQyxJQUFJeEQsS0FBQSxDQUFNM0IsSUFBQSxLQUFTLEtBQUs7TUFDdEIsSUFBSWs5QixRQUFBLEdBQVcsSUFBSXRXLFVBQUEsQ0FBV0osUUFBQSxDQUFTLE1BQU0sQ0FBQ0ssUUFBQSxDQUFTbGxCLEtBQUEsQ0FBTTNCLElBQUEsRUFBTTJCLEtBQUEsQ0FBTThQLElBQUksQ0FBQyxDQUFDO01BQy9FeXJCLFFBQUEsQ0FBU2xuQixZQUFBLENBQWEsU0FBUyxNQUFNO01BQ3JDeVgsTUFBQSxDQUFNM0ksT0FBQSxDQUFRb1ksUUFBUTtJQUN4QjtJQUVBLElBQUl2N0IsS0FBQSxDQUFNMUIsS0FBQSxLQUFVLEtBQUs7TUFDdkIsSUFBSWs5QixTQUFBLEdBQVksSUFBSXZXLFVBQUEsQ0FBV0osUUFBQSxDQUFTLE1BQU0sQ0FBQ0ssUUFBQSxDQUFTbGxCLEtBQUEsQ0FBTTFCLEtBQUEsRUFBTzBCLEtBQUEsQ0FBTThQLElBQUksQ0FBQyxDQUFDO01BQ2pGMHJCLFNBQUEsQ0FBVW5uQixZQUFBLENBQWEsU0FBUyxNQUFNO01BRXRDLElBQUlyVSxLQUFBLENBQU0rNkIsVUFBQSxFQUFZO1FBQ3BCUyxTQUFBLENBQVVubkIsWUFBQSxDQUFhLGFBQWFyVSxLQUFBLENBQU0rNkIsVUFBVTtNQUN0RDtNQUVBalAsTUFBQSxDQUFNN3BCLElBQUEsQ0FBS3U1QixTQUFTO0lBQ3RCO0lBRUEsT0FBT3BXLE9BQUEsQ0FBUTBHLE1BQUs7RUFDdEI7QUFDRixDQUFDO0FBQ0QvTCxjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLFVBQVU7RUFDbEJDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7SUFDVE8sU0FBQSxFQUFXO0VBQ2I7RUFDQVosT0FBQSxFQUFTQSxDQUFDamMsT0FBQSxFQUFTeXBCLElBQUEsS0FBUztJQUMxQixJQUFJd0gsS0FBQSxHQUFRdUYsY0FBQSxDQUFlL00sSUFBQSxDQUFLLElBQUl6cEIsT0FBTztJQUUzQyxJQUFJLENBQUNBLE9BQUEsQ0FBUTJwQixNQUFBLENBQU9nTixjQUFBLEVBQWdCO01BQ2xDLE1BQU0sSUFBSXA5QixVQUFBLENBQVcscUNBQXFDMDNCLEtBQUs7SUFDakU7SUFFQSxPQUFPO01BQ0xsMUIsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU01TCxPQUFBLENBQVEycEIsTUFBQSxDQUFPL2QsSUFBQTtNQUNyQnFsQixLQUFBLEVBQU9BLEtBQUEsQ0FBTTkzQjtJQUNmO0VBQ0Y7RUFDQStpQixXQUFBLEVBQWFBLENBQUNwZ0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBQy9CLElBQUk0M0IsV0FBQTtJQUVKLElBQUlwN0IsS0FBQSxDQUFNbTFCLEtBQUEsS0FBVSxLQUFLO01BQ3ZCaUcsV0FBQSxHQUFjelgsaUJBQUEsQ0FBa0JuZ0IsT0FBQSxFQUFTLEVBQUU7SUFDN0MsT0FBTztNQUNMNDNCLFdBQUEsR0FBY2hCLFNBQUEsQ0FBVUUsVUFBQSxDQUFXdDZCLEtBQUEsQ0FBTW0xQixLQUFBLEVBQU8sR0FBRzN4QixPQUFBLEVBQVN4RCxLQUFBLENBQU04UCxJQUFBLEVBQU0sRUFBRTtNQUMxRSxJQUFJb3JCLFFBQUEsR0FBVztRQUNiL0YsS0FBQSxFQUFPbjFCLEtBQUEsQ0FBTW0xQixLQUFBO1FBQ2IzeEI7TUFDRjtNQU1BNDNCLFdBQUEsQ0FBWUYsUUFBQSxHQUFXQSxRQUFBO0lBQ3pCO0lBRUEsT0FBT0UsV0FBQTtFQUNUO0VBQ0E5YSxhQUFBLEVBQWVBLENBQUN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBS2pDLElBQUlpNEIsUUFBQSxHQUFXejdCLEtBQUEsQ0FBTW0xQixLQUFBLEtBQVUsWUFBWW4xQixLQUFBLENBQU1tMUIsS0FBQSxLQUFVLE1BQU1qUSxRQUFBLENBQVMsS0FBSyxNQUFNLElBQUlBLFFBQUEsQ0FBU2xsQixLQUFBLENBQU1tMUIsS0FBQSxFQUFPbjFCLEtBQUEsQ0FBTThQLElBQUk7SUFDekgsSUFBSTRyQixVQUFBLEdBQWEsSUFBSXpXLFVBQUEsQ0FBV0osUUFBQSxDQUFTLE1BQU0sQ0FBQzRXLFFBQVEsQ0FBQztJQUN6REMsVUFBQSxDQUFXcm5CLFlBQUEsQ0FBYSxTQUFTLE1BQU07SUFHdkNxbkIsVUFBQSxDQUFXcm5CLFlBQUEsQ0FBYSxVQUFVLFFBQVE7SUFDMUNxbkIsVUFBQSxDQUFXcm5CLFlBQUEsQ0FBYSxVQUFVLFFBQVE7SUFDMUMsT0FBT3FuQixVQUFBO0VBQ1Q7QUFDRixDQUFDO0FBRUQsSUFBSUMsYUFBQSxHQUFnQkEsQ0FBQzM3QixLQUFBLEVBQU93RCxPQUFBLEtBQVk7RUFJdEMsSUFBSXNvQixNQUFBLEdBQVFoTixXQUFBLENBQVk3QyxZQUFBLENBQWFpRyxZQUFBLENBQWFsaUIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFPLEdBQUdBLE9BQU87RUFDL0UsSUFBSXNJLEtBQUEsR0FBUTlMLEtBQUEsQ0FBTThMLEtBQUEsQ0FBTTNOLEtBQUEsQ0FBTSxDQUFDO0VBQy9CLElBQUkrVSxLQUFBLEdBQVExUCxPQUFBLENBQVE0TixjQUFBO0VBQ3BCLElBQUk2YSxHQUFBO0VBQ0osSUFBSTJQLFFBQUEsR0FBVztFQU1mLElBQUlDLFlBQUEsR0FBZTk2QixLQUFBLENBQU1aLGNBQUEsQ0FBZUgsS0FBQSxDQUFNRSxJQUFJO0VBRWxELElBQUk0TCxLQUFBLEtBQVUsUUFBUTtJQUNwQm1nQixHQUFBLEdBQU1uTixXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxZQUFZLE1BQU0sQ0FBQztJQUMvQzRRLEdBQUEsQ0FBSTlqQixNQUFBLEdBQVMzRSxPQUFBLENBQVFnUCxXQUFBLENBQVksRUFBRTdELG9CQUFBLEdBQXVCdUUsS0FBQTtJQUMxRDBvQixRQUFBLEdBQVcsT0FBT3A0QixPQUFBLENBQVFnUCxXQUFBLENBQVksRUFBRS9FLE9BQUE7RUFDMUMsV0FBVzNCLEtBQUEsS0FBVSxTQUFTO0lBRTVCLElBQUlnd0IsVUFBQSxHQUFhL29CLGFBQUEsQ0FBYztNQUM3Qk0sTUFBQSxFQUFRO01BQ1JQLElBQUEsRUFBTTtJQUNSLEdBQUd0UCxPQUFPO0lBQ1YsSUFBSXlwQixTQUFBLEdBQVlsYSxhQUFBLENBQWM7TUFDNUJNLE1BQUEsRUFBUTtNQUNSUCxJQUFBLEVBQU07SUFDUixHQUFHdFAsT0FBTztJQUVWLElBQUkycUIsVUFBQSxHQUFhM3FCLE9BQUEsQ0FBUXNPLGdCQUFBLENBQWlCO0lBQzFDb0IsS0FBQSxHQUFRQSxLQUFBLEdBQVFpYixVQUFBLENBQVcvYyxjQUFBO0lBQzNCLElBQUkycUIsV0FBQSxHQUFjalEsTUFBQSxDQUFNM2pCLE1BQUEsR0FBUzJqQixNQUFBLENBQU0zZixLQUFBLEdBQVEydkIsVUFBQSxHQUFhN08sU0FBQTtJQUU1RG5CLE1BQUEsQ0FBTXpmLEtBQUEsQ0FBTTJ2QixXQUFBLEdBQWMxb0IsTUFBQSxDQUFPeW9CLFdBQUEsR0FBYyxJQUFJRCxVQUFVO0lBRTdELElBQUlsMEIsYUFBQSxHQUFnQnZGLElBQUEsQ0FBSzBXLEtBQUEsQ0FBTSxNQUFPZ2pCLFdBQUEsR0FBYzdvQixLQUFLO0lBQ3pELElBQUlsTCxLQUFBLEdBQU9WLFNBQUEsQ0FBVU0sYUFBYTtJQUNsQyxJQUFJaVgsT0FBQSxHQUFVLElBQUl0SixPQUFBLENBQVEsQ0FBQyxJQUFJSSxRQUFBLENBQVMsU0FBUzNOLEtBQUksQ0FBQyxHQUFHO01BQ3ZELFNBQVM7TUFDVCxVQUFVc0wsTUFBQSxDQUFPMUwsYUFBQSxHQUFnQixHQUFJO01BQ3JDLFdBQVcsZ0JBQWdCQSxhQUFBO01BQzNCLHVCQUF1QjtJQUN6QixDQUFDO0lBRURxa0IsR0FBQSxHQUFNbk4sV0FBQSxDQUFZeEQsV0FBQSxDQUFZLENBQUMsV0FBVyxHQUFHLENBQUN1RCxPQUFPLEdBQUdyYixPQUFPO0lBQy9EeW9CLEdBQUEsQ0FBSTVmLEtBQUEsQ0FBTWxFLE1BQUEsR0FBU21MLE1BQUEsQ0FBT3lvQixXQUFXO0lBQ3JDSCxRQUFBLEdBQVc5UCxNQUFBLENBQU0zZixLQUFBLEdBQVEydkIsVUFBQSxHQUFhN08sU0FBQTtFQUN4QyxPQUFPO0lBRUwsSUFBSSxTQUFTbnNCLElBQUEsQ0FBS2dMLEtBQUssR0FBRztNQUN4QixJQUFJLENBQUMrdkIsWUFBQSxFQUFjO1FBQ2pCL1AsTUFBQSxDQUFNNWYsT0FBQSxDQUFRakssSUFBQSxDQUFLLFlBQVk7TUFDakM7SUFDRixXQUFXNkosS0FBQSxLQUFVLFFBQVE7TUFDM0JnZ0IsTUFBQSxDQUFNNWYsT0FBQSxDQUFRakssSUFBQSxDQUFLLFNBQVM7SUFDOUIsT0FBTztNQUNMNnBCLE1BQUEsQ0FBTTVmLE9BQUEsQ0FBUWpLLElBQUEsQ0FBSyxRQUFRO0lBQzdCO0lBR0EsSUFBSThwQixNQUFBLEdBQVM7SUFDYixJQUFJQyxTQUFBLEdBQVk7SUFDaEIsSUFBSWlRLGFBQUEsR0FBZ0I7SUFFcEIsSUFBSSxNQUFNbjdCLElBQUEsQ0FBS2dMLEtBQUssR0FBRztNQUNyQm13QixhQUFBLEdBQWdCNTVCLElBQUEsQ0FBS0MsR0FBQSxDQUFJa0IsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUVsRCxRQUFBLEVBQy9DOUwsT0FBQSxDQUFRdEIsZ0JBQ1I7TUFDQTZwQixNQUFBLEdBQVN2b0IsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUVuRCxPQUFBLElBQVd2RCxLQUFBLEtBQVUsYUFBYSxJQUFJbXdCLGFBQUE7TUFDckVqUSxTQUFBLEdBQVlELE1BQUE7SUFDZCxXQUFXamdCLEtBQUEsS0FBVSxRQUFRO01BQzNCbXdCLGFBQUEsR0FBZ0I1NUIsSUFBQSxDQUFLQyxHQUFBLENBQUlrQixPQUFBLENBQVFnUCxXQUFBLENBQVksRUFBRTdELG9CQUFBLEVBQXNCbkwsT0FBQSxDQUFRdEIsZ0JBQWdCO01BQzdGNnBCLE1BQUEsR0FBUyxJQUFJa1EsYUFBQTtNQUVialEsU0FBQSxHQUFZM3BCLElBQUEsQ0FBS0MsR0FBQSxDQUFJLEdBQUcsT0FBT3dwQixNQUFBLENBQU0zZixLQUFLO0lBQzVDLE9BQU87TUFDTDRmLE1BQUEsR0FBUzhQLFlBQUEsR0FBZSxNQUFNO01BQzlCN1AsU0FBQSxHQUFZRCxNQUFBO0lBQ2Q7SUFFQUUsR0FBQSxHQUFNSSxRQUFBLENBQVNULFdBQUEsQ0FBWUUsTUFBQSxFQUFPaGdCLEtBQUEsRUFBT2lnQixNQUFBLEVBQVFDLFNBQUEsRUFBV3hvQixPQUFPO0lBRW5FLElBQUksdUJBQXVCMUMsSUFBQSxDQUFLZ0wsS0FBSyxHQUFHO01BQ3RDbWdCLEdBQUEsQ0FBSTVmLEtBQUEsQ0FBTTZ2QixXQUFBLEdBQWM7TUFDeEJqUSxHQUFBLENBQUk1ZixLQUFBLENBQU04dkIsV0FBQSxHQUFjN29CLE1BQUEsQ0FBTzJvQixhQUFhO0lBQzlDLFdBQVdud0IsS0FBQSxLQUFVLFVBQVVtd0IsYUFBQSxLQUFrQixPQUFPO01BQ3REaFEsR0FBQSxDQUFJNWYsS0FBQSxDQUFNK3ZCLGNBQUEsR0FBaUI5b0IsTUFBQSxDQUFPMm9CLGFBQWE7TUFDL0NoUSxHQUFBLENBQUk1ZixLQUFBLENBQU1nd0IsZ0JBQUEsR0FBbUIvb0IsTUFBQSxDQUFPMm9CLGFBQWE7SUFDbkQ7SUFFQUwsUUFBQSxHQUFXOVAsTUFBQSxDQUFNM2YsS0FBQSxHQUFRNmYsU0FBQTtJQUV6QixJQUFJaHNCLEtBQUEsQ0FBTXM4QixlQUFBLEVBQWlCO01BQ3pCclEsR0FBQSxDQUFJNWYsS0FBQSxDQUFNaXdCLGVBQUEsR0FBa0J0OEIsS0FBQSxDQUFNczhCLGVBQUE7TUFFbEMsSUFBSXQ4QixLQUFBLENBQU1tc0IsV0FBQSxFQUFhO1FBQ3JCRixHQUFBLENBQUk1ZixLQUFBLENBQU04ZixXQUFBLEdBQWNuc0IsS0FBQSxDQUFNbXNCLFdBQUE7TUFDaEM7SUFDRjtFQUNGO0VBRUEsSUFBSXRPLEtBQUE7RUFFSixJQUFJN2QsS0FBQSxDQUFNczhCLGVBQUEsRUFBaUI7SUFDekJ6ZSxLQUFBLEdBQVFpQixXQUFBLENBQVkvQixTQUFBLENBQVU7TUFDNUJULFlBQUEsRUFBYztNQUNkclEsUUFBQSxFQUFVLENBQ1Y7UUFDRWhNLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNbXRCLEdBQUE7UUFDTnhQLEtBQUEsRUFBT21mO01BQ1QsR0FBRztRQUNEMzdCLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNZ3RCLE1BQUE7UUFDTnJQLEtBQUEsRUFBTztNQUNUO0lBQ0YsR0FBR2paLE9BQU87RUFDWixPQUFPO0lBQ0wsSUFBSTBJLE9BQUEsR0FBVSxlQUFlcEwsSUFBQSxDQUFLZ0wsS0FBSyxJQUFJLENBQUMsV0FBVyxJQUFJLEVBQUM7SUFDNUQrUixLQUFBLEdBQVFpQixXQUFBLENBQVkvQixTQUFBLENBQVU7TUFDNUJULFlBQUEsRUFBYztNQUNkclEsUUFBQSxFQUFVLENBQ1Y7UUFDRWhNLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNZ3RCLE1BQUE7UUFDTnJQLEtBQUEsRUFBTztNQUNULEdBQUc7UUFDRHhjLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNbXRCLEdBQUE7UUFDTnhQLEtBQUEsRUFBT21mLFFBQUE7UUFDUHBlLGNBQUEsRUFBZ0J0UjtNQUNsQjtJQUNGLEdBQUcxSSxPQUFPO0VBQ1o7RUFFQSxJQUFJLFNBQVMxQyxJQUFBLENBQUtnTCxLQUFLLEdBQUc7SUFHeEIrUixLQUFBLENBQU0xVixNQUFBLEdBQVMyakIsTUFBQSxDQUFNM2pCLE1BQUE7SUFDckIwVixLQUFBLENBQU0xUixLQUFBLEdBQVEyZixNQUFBLENBQU0zZixLQUFBO0VBQ3RCO0VBRUEsSUFBSSxTQUFTckwsSUFBQSxDQUFLZ0wsS0FBSyxLQUFLLENBQUMrdkIsWUFBQSxFQUFjO0lBRXpDLE9BQU8vYyxXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxRQUFRLFlBQVksR0FBRyxDQUFDd0MsS0FBSyxHQUFHcmEsT0FBTztFQUN0RSxPQUFPO0lBQ0wsT0FBT3NiLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDd0MsS0FBSyxHQUFHcmEsT0FBTztFQUN4RDtBQUNGO0FBRUEsSUFBSSs0QixlQUFBLEdBQWtCQSxDQUFDdjhCLEtBQUEsRUFBT3dELE9BQUEsS0FBWTtFQUN4QyxJQUFJNkwsT0FBQSxHQUFVO0VBQ2QsSUFBSTZFLElBQUEsR0FBTyxJQUFJK1EsVUFBQSxDQUFXSixRQUFBLENBQVM3a0IsS0FBQSxDQUFNOEwsS0FBQSxDQUFNL00sT0FBQSxDQUFRLFVBQVUsSUFBSSxLQUFLLFlBQVksWUFBWSxDQUFDNG1CLFdBQUEsQ0FBVzNsQixLQUFBLENBQU1FLElBQUEsRUFBTXNELE9BQU8sQ0FBQyxDQUFDO0VBRW5JLFFBQVF4RCxLQUFBLENBQU04TCxLQUFBO0lBQUEsS0FDUDtNQUNIb0ksSUFBQSxDQUFLRyxZQUFBLENBQWEsWUFBWSxrQkFBa0I7TUFDaEQ7SUFBQSxLQUVHO01BQ0hILElBQUEsQ0FBS0csWUFBQSxDQUFhLFlBQVksb0JBQW9CO01BQ2xEO0lBQUEsS0FFRztNQUNISCxJQUFBLENBQUtHLFlBQUEsQ0FBYSxZQUFZLGFBQWE7TUFDM0M7SUFBQSxLQUVHO01BQ0hILElBQUEsQ0FBS0csWUFBQSxDQUFhLFlBQVksa0JBQWtCO01BQ2hEO0lBQUEsS0FFRztNQUNISCxJQUFBLENBQUtHLFlBQUEsQ0FBYSxZQUFZLEtBQUs7TUFDbkM7SUFBQSxLQUVHO01BQ0hILElBQUEsQ0FBS0csWUFBQSxDQUFhLFlBQVksV0FBVztNQUN6QztJQUFBLEtBRUc7SUFBQSxLQUNBO01BR0hoRixPQUFBLEdBQVU3TCxPQUFBLENBQVFnUCxXQUFBLENBQVksRUFBRW5ELE9BQUEsR0FBVTdMLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFdEQsT0FBQTtNQUNoRWdGLElBQUEsQ0FBS0csWUFBQSxDQUFhLFNBQVMsTUFBTSxJQUFJaEYsT0FBQSxHQUFVLElBQUk7TUFDbkQ2RSxJQUFBLENBQUtHLFlBQUEsQ0FBYSxVQUFVLE1BQU0sSUFBSWhGLE9BQUEsR0FBVSxJQUFJO01BQ3BENkUsSUFBQSxDQUFLRyxZQUFBLENBQWEsVUFBVWhGLE9BQUEsR0FBVSxJQUFJO01BRTFDNkUsSUFBQSxDQUFLRyxZQUFBLENBQWEsV0FBV2hGLE9BQUEsR0FBVSxJQUFJO01BRTNDLElBQUlyUCxLQUFBLENBQU04TCxLQUFBLEtBQVUsZUFBZTtRQUNqQyxJQUFJMHdCLEdBQUEsR0FBTW42QixJQUFBLENBQUtDLEdBQUEsQ0FBSWtCLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFbEQsUUFBQSxFQUN6QzlMLE9BQUEsQ0FBUXRCLGdCQUNSO1FBQ0FnUyxJQUFBLENBQUtHLFlBQUEsQ0FBYSxTQUFTLGFBQWFtb0IsR0FBQSxHQUFNLGNBQWM1OEIsTUFBQSxDQUFPSSxLQUFBLENBQU1tc0IsV0FBVyxDQUFDO01BQ3ZGO01BRUE7SUFBQSxLQUVHO01BQ0hqWSxJQUFBLENBQUtHLFlBQUEsQ0FBYSxZQUFZLHFDQUFxQztNQUNuRTtFQUFBO0VBR0osSUFBSXJVLEtBQUEsQ0FBTXM4QixlQUFBLEVBQWlCO0lBQ3pCcG9CLElBQUEsQ0FBS0csWUFBQSxDQUFhLGtCQUFrQnJVLEtBQUEsQ0FBTXM4QixlQUFlO0VBQzNEO0VBRUEsT0FBT3BvQixJQUFBO0FBQ1Q7QUFFQTZMLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsWUFBWTtFQUNwQkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNURyxhQUFBLEVBQWU7SUFDZkYsUUFBQSxFQUFVLENBQUMsU0FBUyxNQUFNO0VBQzVCO0VBRUFOLFFBQVFILElBQUEsRUFBTTJOLElBQUEsRUFBTU0sT0FBQSxFQUFTO0lBQzNCLElBQUk7TUFDRkosTUFBQTtNQUNBRDtJQUNGLElBQUk1TixJQUFBO0lBQ0osSUFBSXBlLEtBQUEsR0FBUTBxQixjQUFBLENBQWVxQixJQUFBLENBQUssSUFBSSxhQUFhLEVBQUUvckIsS0FBQTtJQUNuRCxJQUFJMUIsSUFBQSxHQUFPeXRCLElBQUEsQ0FBSztJQUNoQixPQUFPO01BQ0wxdEIsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU0rZCxNQUFBLENBQU8vZCxJQUFBO01BQ2JoRSxLQUFBLEVBQU84aEIsUUFBQTtNQUNQME8sZUFBQSxFQUFpQjE2QixLQUFBO01BQ2pCMUI7SUFDRjtFQUNGO0VBRUFrZ0IsV0FBQSxFQUFhdWIsYUFBQTtFQUNicmIsYUFBQSxFQUFlaWM7QUFDakIsQ0FBQztBQUNEeGMsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxhQUFhO0VBQ3JCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RHLGFBQUEsRUFBZTtJQUNmRixRQUFBLEVBQVUsQ0FBQyxTQUFTLFNBQVMsTUFBTTtFQUNyQztFQUVBTixRQUFRYyxLQUFBLEVBQU8wTSxJQUFBLEVBQU1NLE9BQUEsRUFBUztJQUM1QixJQUFJO01BQ0ZKLE1BQUE7TUFDQUQ7SUFDRixJQUFJM00sS0FBQTtJQUNKLElBQUlrTCxXQUFBLEdBQWNHLGNBQUEsQ0FBZXFCLElBQUEsQ0FBSyxJQUFJLGFBQWEsRUFBRS9yQixLQUFBO0lBQ3pELElBQUkwNkIsZUFBQSxHQUFrQmhRLGNBQUEsQ0FBZXFCLElBQUEsQ0FBSyxJQUFJLGFBQWEsRUFBRS9yQixLQUFBO0lBQzdELElBQUkxQixJQUFBLEdBQU95dEIsSUFBQSxDQUFLO0lBQ2hCLE9BQU87TUFDTDF0QixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYmhFLEtBQUEsRUFBTzhoQixRQUFBO01BQ1AwTyxlQUFBO01BQ0FuUSxXQUFBO01BQ0Fqc0I7SUFDRjtFQUNGO0VBRUFrZ0IsV0FBQSxFQUFhdWIsYUFBQTtFQUNicmIsYUFBQSxFQUFlaWM7QUFDakIsQ0FBQztBQUNEeGMsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxRQUFRO0VBQ2hCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RDLFFBQUEsRUFBVSxDQUFDLE1BQU07SUFDakJFLGFBQUEsRUFBZTtFQUNqQjtFQUVBUixRQUFRc1AsS0FBQSxFQUFPOUIsSUFBQSxFQUFNO0lBQ25CLElBQUk7TUFDRkU7SUFDRixJQUFJNEIsS0FBQTtJQUNKLE9BQU87TUFDTHh2QixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYmhFLEtBQUEsRUFBTztNQUNQNUwsSUFBQSxFQUFNeXRCLElBQUEsQ0FBSztJQUNiO0VBQ0Y7QUFFRixDQUFDO0FBQ0Q1TixjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLFlBQVksYUFBYSxhQUFhLFVBQVUsU0FBUztFQUNqRUMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztFQUNYO0VBRUFMLFFBQVF5VSxLQUFBLEVBQU9qSCxJQUFBLEVBQU07SUFDbkIsSUFBSTtNQUNGRSxNQUFBO01BQ0FEO0lBQ0YsSUFBSWdILEtBQUE7SUFDSixJQUFJMTBCLElBQUEsR0FBT3l0QixJQUFBLENBQUs7SUFDaEIsT0FBTztNQUNMMXRCLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiaEUsS0FBQSxFQUFPOGhCLFFBQUE7TUFDUDF0QjtJQUNGO0VBQ0Y7RUFFQWtnQixXQUFBLEVBQWF1YixhQUFBO0VBQ2JyYixhQUFBLEVBQWVpYztBQUNqQixDQUFDO0FBQ0R4YyxjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLFFBQVE7RUFDaEJDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7SUFDVEMsUUFBQSxFQUFVLENBQUMsTUFBTTtJQUNqQkUsYUFBQSxFQUFlO0VBQ2pCO0VBRUFSLFFBQVFzYyxLQUFBLEVBQU85TyxJQUFBLEVBQU07SUFDbkIsSUFBSTtNQUNGRTtJQUNGLElBQUk0TyxLQUFBO0lBQ0osT0FBTztNQUNMeDhCLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiaEUsS0FBQSxFQUFPO01BQ1A1TCxJQUFBLEVBQU15dEIsSUFBQSxDQUFLO0lBQ2I7RUFDRjtBQUVGLENBQUM7QUFPRCxJQUFJK08sYUFBQSxHQUFnQixDQUFDO0FBQ3JCLFNBQVNDLGtCQUFrQjNjLElBQUEsRUFBTTtFQUMvQixJQUFJO0lBQ0YvZixJQUFBO0lBQ0FnZ0IsS0FBQTtJQUNBQyxLQUFBO0lBQ0FDLE9BQUE7SUFDQUMsV0FBQSxFQUFBQyxZQUFBO0lBQ0FDLGFBQUEsRUFBQUM7RUFDRixJQUFJUCxJQUFBO0VBRUosSUFBSWxQLElBQUEsR0FBTztJQUNUN1EsSUFBQTtJQUNBdWdCLE9BQUEsRUFBU04sS0FBQSxDQUFNTSxPQUFBLElBQVc7SUFDMUJHLGFBQUEsRUFBZTtJQUNmRSxlQUFBLEVBQWlCO0lBQ2pCVjtFQUNGO0VBRUEsU0FBU2xhLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUlnYSxLQUFBLENBQU1uaUIsTUFBQSxFQUFRLEVBQUVtSSxDQUFBLEVBQUc7SUFJckN5MkIsYUFBQSxDQUFjemMsS0FBQSxDQUFNaGEsQ0FBQSxLQUFNNkssSUFBQTtFQUM1QjtFQUVBLElBQUl1UCxZQUFBLEVBQWE7SUFDZlIsa0JBQUEsQ0FBbUI1ZixJQUFBLElBQVFvZ0IsWUFBQTtFQUM3QjtFQUVBLElBQUlFLGNBQUEsRUFBZTtJQUNqQlQsb0JBQUEsQ0FBcUI3ZixJQUFBLElBQVFzZ0IsY0FBQTtFQUMvQjtBQUNGO0FBT0EsSUFBSXFjLE9BQUEsR0FBVSxDQUFDO0FBRWYsU0FBU0MsWUFBWWovQixJQUFBLEVBQU1zQyxJQUFBLEVBQU07RUFDL0IwOEIsT0FBQSxDQUFRaC9CLElBQUEsSUFBUXNDLElBQUE7QUFDbEI7QUFHQSxTQUFTNDhCLFVBQVVqUCxNQUFBLEVBQVE7RUFHekIsSUFBSWtQLFNBQUEsR0FBWSxFQUFDO0VBQ2pCbFAsTUFBQSxDQUFPdUcsYUFBQSxDQUFjO0VBQ3JCLElBQUk0SSxHQUFBLEdBQU1uUCxNQUFBLENBQU82RCxLQUFBLENBQU0sRUFBRXIwQixJQUFBO0VBRXpCLElBQUkyL0IsR0FBQSxLQUFRLFdBQVc7SUFFckJuUCxNQUFBLENBQU84RCxPQUFBLENBQVE7SUFDZjlELE1BQUEsQ0FBT3VHLGFBQUEsQ0FBYztJQUNyQjRJLEdBQUEsR0FBTW5QLE1BQUEsQ0FBTzZELEtBQUEsQ0FBTSxFQUFFcjBCLElBQUE7RUFDdkI7RUFFQSxPQUFPMi9CLEdBQUEsS0FBUSxhQUFhQSxHQUFBLEtBQVEsZUFBZTtJQUNqRG5QLE1BQUEsQ0FBTzhELE9BQUEsQ0FBUTtJQUNmb0wsU0FBQSxDQUFVOTZCLElBQUEsQ0FBSys2QixHQUFBLEtBQVEsYUFBYTtJQUNwQ25QLE1BQUEsQ0FBT3VHLGFBQUEsQ0FBYztJQUNyQjRJLEdBQUEsR0FBTW5QLE1BQUEsQ0FBTzZELEtBQUEsQ0FBTSxFQUFFcjBCLElBQUE7RUFDdkI7RUFFQSxPQUFPMC9CLFNBQUE7QUFDVDtBQUVBLElBQUlFLDZCQUFBLEdBQWdDLzRCLE9BQUEsSUFBVztFQUM3QyxJQUFJMmlCLFFBQUEsR0FBVzNpQixPQUFBLENBQVEycEIsTUFBQSxDQUFPaEgsUUFBQTtFQUU5QixJQUFJLENBQUNBLFFBQUEsQ0FBUzVsQixXQUFBLEVBQWE7SUFDekIsTUFBTSxJQUFJeEQsVUFBQSxDQUFXLE1BQU15RyxPQUFBLENBQVFnNUIsT0FBQSxHQUFVLHFDQUEwQztFQUN6RjtBQUNGO0FBT0EsU0FBU0MsV0FBV3YvQixJQUFBLEVBQU07RUFDeEIsSUFBSUEsSUFBQSxDQUFLbUIsT0FBQSxDQUFRLElBQUksTUFBTSxJQUFJO0lBQzdCLE9BQU9uQixJQUFBLENBQUttQixPQUFBLENBQVEsR0FBRyxNQUFNO0VBQy9CO0FBRUY7QUFTQSxTQUFTcStCLFdBQVd2UCxNQUFBLEVBQVE3TixJQUFBLEVBQU0zVCxLQUFBLEVBQU87RUFDdkMsSUFBSTtJQUNGZ3hCLG1CQUFBO0lBQ0EzSyxNQUFBO0lBQ0FOLElBQUE7SUFDQUssWUFBQTtJQUNBRyxpQkFBQTtJQUNBMEssT0FBQTtJQUNBQyxTQUFBO0lBQ0FDLGNBQUE7SUFDQUMsVUFBQTtJQUNBbjhCO0VBQ0YsSUFBSTBlLElBQUE7RUFDSjZOLE1BQUEsQ0FBT3dELE1BQUEsQ0FBT0MsVUFBQSxDQUFXO0VBRXpCLElBQUksQ0FBQ2lNLFNBQUEsRUFBVztJQUdkMVAsTUFBQSxDQUFPd0QsTUFBQSxDQUFPeHZCLE1BQUEsQ0FBTzB2QixHQUFBLENBQUksUUFBUSxhQUFhO0VBQ2hEO0VBR0EsSUFBSSxDQUFDa0IsWUFBQSxFQUFjO0lBQ2pCLElBQUlsbEIsT0FBQSxHQUFVc2dCLE1BQUEsQ0FBT3dELE1BQUEsQ0FBT3FNLGlCQUFBLENBQWtCLGdCQUFnQjtJQUU5RCxJQUFJbndCLE9BQUEsSUFBVyxNQUFNO01BRW5Ca2xCLFlBQUEsR0FBZTtJQUNqQixPQUFPO01BQ0xBLFlBQUEsR0FBZWx3QixVQUFBLENBQVdnTCxPQUFPO01BRWpDLElBQUksQ0FBQ2tsQixZQUFBLElBQWdCQSxZQUFBLEdBQWUsR0FBRztRQUNyQyxNQUFNLElBQUloMUIsVUFBQSxDQUFXLDZCQUE2QjhQLE9BQU87TUFDM0Q7SUFDRjtFQUNGO0VBR0FzZ0IsTUFBQSxDQUFPd0QsTUFBQSxDQUFPQyxVQUFBLENBQVc7RUFDekIsSUFBSU8sR0FBQSxHQUFNLEVBQUM7RUFDWCxJQUFJM3hCLElBQUEsR0FBTyxDQUFDMnhCLEdBQUc7RUFDZixJQUFJYyxPQUFBLEdBQVUsRUFBQztFQUNmLElBQUlFLGVBQUEsR0FBa0IsRUFBQztFQUN2QixJQUFJOEssSUFBQSxHQUFPTCxPQUFBLElBQVcsT0FBTyxFQUFDLEdBQUk7RUFJbEMsU0FBU00sU0FBQSxFQUFXO0lBQ2xCLElBQUlOLE9BQUEsRUFBUztNQUNYelAsTUFBQSxDQUFPd0QsTUFBQSxDQUFPeHZCLE1BQUEsQ0FBTzB2QixHQUFBLENBQUksWUFBWSxLQUFLLElBQUk7SUFDaEQ7RUFDRjtFQUVBLFNBQVNzTSxPQUFBLEVBQVM7SUFDaEIsSUFBSUYsSUFBQSxFQUFNO01BQ1IsSUFBSTlQLE1BQUEsQ0FBT3dELE1BQUEsQ0FBT3h2QixNQUFBLENBQU9teUIsR0FBQSxDQUFJLFVBQVUsR0FBRztRQUN4QzJKLElBQUEsQ0FBSzE3QixJQUFBLENBQUs0ckIsTUFBQSxDQUFPaVEsUUFBQSxDQUFTLENBQUMsSUFBSTNnQyxLQUFBLENBQU0sVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNsRDB3QixNQUFBLENBQU93RCxNQUFBLENBQU94dkIsTUFBQSxDQUFPMHZCLEdBQUEsQ0FBSSxZQUFZLFFBQVcsSUFBSTtNQUN0RCxPQUFPO1FBQ0xvTSxJQUFBLENBQUsxN0IsSUFBQSxDQUFLa0MsT0FBQSxDQUFRbTVCLE9BQU8sS0FBS3pQLE1BQUEsQ0FBT3dELE1BQUEsQ0FBT3h2QixNQUFBLENBQU9teUIsR0FBQSxDQUFJLFVBQVUsTUFBTSxHQUFHO01BQzVFO0lBQ0Y7RUFDRjtFQUVBNEosUUFBQSxDQUFTO0VBRVQvSyxlQUFBLENBQWdCNXdCLElBQUEsQ0FBSzY2QixTQUFBLENBQVVqUCxNQUFNLENBQUM7RUFFdEMsT0FBTyxNQUFNO0lBR1gsSUFBSWtFLElBQUEsR0FBT2xFLE1BQUEsQ0FBTzJELGVBQUEsQ0FBZ0IsT0FBTytMLFNBQUEsR0FBWSxVQUFVLE1BQU07SUFDckUxUCxNQUFBLENBQU93RCxNQUFBLENBQU9JLFFBQUEsQ0FBUztJQUN2QjVELE1BQUEsQ0FBT3dELE1BQUEsQ0FBT0MsVUFBQSxDQUFXO0lBQ3pCUyxJQUFBLEdBQU87TUFDTDl4QixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYjVQLElBQUEsRUFBTTZ4QjtJQUNSO0lBRUEsSUFBSTFsQixLQUFBLEVBQU87TUFDVDBsQixJQUFBLEdBQU87UUFDTDl4QixJQUFBLEVBQU07UUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7UUFDYnpELEtBQUE7UUFDQW5NLElBQUEsRUFBTSxDQUFDNnhCLElBQUk7TUFDYjtJQUNGO0lBRUFGLEdBQUEsQ0FBSTV2QixJQUFBLENBQUs4dkIsSUFBSTtJQUNiLElBQUlsWCxJQUFBLEdBQU9nVCxNQUFBLENBQU82RCxLQUFBLENBQU0sRUFBRXIwQixJQUFBO0lBRTFCLElBQUl3ZCxJQUFBLEtBQVMsS0FBSztNQUNoQixJQUFJNGlCLFVBQUEsSUFBYzVMLEdBQUEsQ0FBSS96QixNQUFBLEtBQVcyL0IsVUFBQSxFQUFZO1FBQzNDLElBQUlGLFNBQUEsSUFBYTNLLGlCQUFBLEVBQW1CO1VBRWxDLE1BQU0sSUFBSW4xQixVQUFBLENBQVcsOEJBQThCb3dCLE1BQUEsQ0FBTytELFNBQVM7UUFDckUsT0FBTztVQUVML0QsTUFBQSxDQUFPaEgsUUFBQSxDQUFTbGpCLGVBQUEsQ0FBZ0IsV0FBVywyREFBZ0U7UUFDN0c7TUFDRjtNQUVBa3FCLE1BQUEsQ0FBTzhELE9BQUEsQ0FBUTtJQUNqQixXQUFXOVcsSUFBQSxLQUFTLFNBQVM7TUFDM0JnakIsTUFBQSxDQUFPO01BS1AsSUFBSWhNLEdBQUEsQ0FBSS96QixNQUFBLEtBQVcsS0FBS2kwQixJQUFBLENBQUs5eEIsSUFBQSxLQUFTLGFBQWE4eEIsSUFBQSxDQUFLN3hCLElBQUEsQ0FBSyxHQUFHQSxJQUFBLENBQUtwQyxNQUFBLEtBQVcsTUFBTW9DLElBQUEsQ0FBS3BDLE1BQUEsR0FBUyxLQUFLLENBQUMwL0IsY0FBQSxHQUFpQjtRQUN6SHQ5QixJQUFBLENBQUttakIsR0FBQSxDQUFJO01BQ1g7TUFFQSxJQUFJd1AsZUFBQSxDQUFnQi8wQixNQUFBLEdBQVNvQyxJQUFBLENBQUtwQyxNQUFBLEdBQVMsR0FBRztRQUM1QyswQixlQUFBLENBQWdCNXdCLElBQUEsQ0FBSyxFQUFFO01BQ3pCO01BRUE7SUFDRixXQUFXNFksSUFBQSxLQUFTLFFBQVE7TUFDMUJnVCxNQUFBLENBQU84RCxPQUFBLENBQVE7TUFDZixJQUFJcnRCLElBQUEsR0FBTztNQU1YLElBQUl1cEIsTUFBQSxDQUFPd0QsTUFBQSxDQUFPK0IsTUFBQSxDQUFPLEVBQUUvMUIsSUFBQSxLQUFTLEtBQUs7UUFDdkNpSCxJQUFBLEdBQU91cEIsTUFBQSxDQUFPd0YsY0FBQSxDQUFlLElBQUk7TUFDbkM7TUFFQVYsT0FBQSxDQUFRMXdCLElBQUEsQ0FBS3FDLElBQUEsR0FBT0EsSUFBQSxDQUFLOUQsS0FBQSxHQUFRLElBQUk7TUFDckNxOUIsTUFBQSxDQUFPO01BRVBoTCxlQUFBLENBQWdCNXdCLElBQUEsQ0FBSzY2QixTQUFBLENBQVVqUCxNQUFNLENBQUM7TUFDdENnRSxHQUFBLEdBQU0sRUFBQztNQUNQM3hCLElBQUEsQ0FBSytCLElBQUEsQ0FBSzR2QixHQUFHO01BQ2IrTCxRQUFBLENBQVM7SUFDWCxPQUFPO01BQ0wsTUFBTSxJQUFJbmdDLFVBQUEsQ0FBVyx1Q0FBdUNvd0IsTUFBQSxDQUFPK0QsU0FBUztJQUM5RTtFQUNGO0VBR0EvRCxNQUFBLENBQU93RCxNQUFBLENBQU9JLFFBQUEsQ0FBUztFQUV2QjVELE1BQUEsQ0FBT3dELE1BQUEsQ0FBT0ksUUFBQSxDQUFTO0VBQ3ZCLE9BQU87SUFDTHh4QixJQUFBLEVBQU07SUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7SUFDYjRpQixNQUFBO0lBQ0FELFlBQUE7SUFDQXZ5QixJQUFBO0lBQ0FreUIsSUFBQTtJQUNBTyxPQUFBO0lBQ0EwSyxtQkFBQTtJQUNBeEssZUFBQTtJQUNBRCxpQkFBQTtJQUNBK0ssSUFBQTtJQUNBcjhCO0VBQ0Y7QUFDRjtBQUlBLFNBQVN5OEIsV0FBV2IsT0FBQSxFQUFTO0VBQzNCLElBQUlBLE9BQUEsQ0FBUS8rQixLQUFBLENBQU0sR0FBRyxDQUFDLE1BQU0sS0FBSztJQUMvQixPQUFPO0VBQ1QsT0FBTztJQUNMLE9BQU87RUFDVDtBQUNGO0FBRUEsSUFBSTYvQixhQUFBLEdBQWdCLFNBQVM1ZCxZQUFZcGdCLEtBQUEsRUFBT3dELE9BQUEsRUFBUztFQUN2RCxJQUFJeTZCLENBQUE7RUFDSixJQUFJQyxDQUFBO0VBQ0osSUFBSUMsRUFBQSxHQUFLbitCLEtBQUEsQ0FBTUUsSUFBQSxDQUFLcEMsTUFBQTtFQUNwQixJQUFJKzBCLGVBQUEsR0FBa0I3eUIsS0FBQSxDQUFNNnlCLGVBQUE7RUFDNUIsSUFBSXVMLEVBQUEsR0FBSztFQUNULElBQUlsK0IsSUFBQSxHQUFPLElBQUltRCxLQUFBLENBQU04NkIsRUFBRTtFQUN2QixJQUFJRSxNQUFBLEdBQVMsRUFBQztFQUNkLElBQUlwQyxhQUFBLEdBQWdCNTVCLElBQUEsQ0FBS0MsR0FBQSxDQUN6QmtCLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFcEQsY0FBQSxFQUFnQjVMLE9BQUEsQ0FBUXRCLGdCQUM5QztFQUVBLElBQUlvOEIsRUFBQSxHQUFLLElBQUk5NkIsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUV0RCxPQUFBO0VBQ25DLElBQUlxdkIsV0FBQSxHQUFjLElBQUlELEVBQUE7RUFFdEIsSUFBSXQrQixLQUFBLENBQU00eUIsaUJBQUEsSUFBcUI1eUIsS0FBQSxDQUFNNHlCLGlCQUFBLEtBQXNCLFNBQVM7SUFNbEUsSUFBSTRMLGVBQUEsR0FBa0JoN0IsT0FBQSxDQUFRaU8sV0FBQSxDQUFZak0sT0FBQSxDQUFRRyxNQUFNLEVBQUV5TCxjQUFBO0lBQzFEbXRCLFdBQUEsR0FBYyxVQUFVQyxlQUFBLEdBQWtCaDdCLE9BQUEsQ0FBUTROLGNBQUE7RUFDcEQ7RUFHQSxJQUFJcXRCLFlBQUEsR0FBZXorQixLQUFBLENBQU00eUIsaUJBQUEsS0FBc0IsT0FBTzdmLGFBQUEsQ0FBYztJQUNsRU0sTUFBQSxFQUFRO0lBQ1JQLElBQUEsRUFBTTtFQUNSLEdBQUd0UCxPQUFPLElBQUksS0FBSzg2QixFQUFBO0VBSW5CLElBQUlJLEdBQUEsR0FBTSxJQUFJSixFQUFBO0VBQ2QsSUFBSUssU0FBQSxHQUFZMytCLEtBQUEsQ0FBTXl5QixZQUFBLEdBQWVnTSxZQUFBO0VBQ3JDLElBQUlHLGFBQUEsR0FBZ0IsTUFBTUQsU0FBQTtFQUUxQixJQUFJRSxZQUFBLEdBQWUsTUFBTUYsU0FBQTtFQUV6QixJQUFJelMsV0FBQSxHQUFjO0VBRWxCLFNBQVM0UyxZQUFZQyxXQUFBLEVBQWE7SUFDaEMsU0FBUzk0QixDQUFBLEdBQUksR0FBR0EsQ0FBQSxHQUFJODRCLFdBQUEsQ0FBWWpoQyxNQUFBLEVBQVEsRUFBRW1JLENBQUEsRUFBRztNQUMzQyxJQUFJQSxDQUFBLEdBQUksR0FBRztRQUNUaW1CLFdBQUEsSUFBZTtNQUNqQjtNQUVBbVMsTUFBQSxDQUFPcDhCLElBQUEsQ0FBSztRQUNWKzhCLEdBQUEsRUFBSzlTLFdBQUE7UUFDTCtTLFFBQUEsRUFBVUYsV0FBQSxDQUFZOTRCLENBQUE7TUFDeEIsQ0FBQztJQUNIO0VBQ0Y7RUFFQTY0QixXQUFBLENBQVlqTSxlQUFBLENBQWdCLEVBQUU7RUFFOUIsS0FBS29MLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUlqK0IsS0FBQSxDQUFNRSxJQUFBLENBQUtwQyxNQUFBLEVBQVEsRUFBRW1nQyxDQUFBLEVBQUc7SUFDdEMsSUFBSWlCLEtBQUEsR0FBUWwvQixLQUFBLENBQU1FLElBQUEsQ0FBSys5QixDQUFBO0lBQ3ZCLElBQUk5MUIsTUFBQSxHQUFTeTJCLGFBQUE7SUFFYixJQUFJenlCLEtBQUEsR0FBUTB5QixZQUFBO0lBRVosSUFBSVQsRUFBQSxHQUFLYyxLQUFBLENBQU1waEMsTUFBQSxFQUFRO01BQ3JCc2dDLEVBQUEsR0FBS2MsS0FBQSxDQUFNcGhDLE1BQUE7SUFDYjtJQUVBLElBQUlxaEMsTUFBQSxHQUFTLElBQUk5N0IsS0FBQSxDQUFNNjdCLEtBQUEsQ0FBTXBoQyxNQUFNO0lBRW5DLEtBQUtvZ0MsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSWdCLEtBQUEsQ0FBTXBoQyxNQUFBLEVBQVEsRUFBRW9nQyxDQUFBLEVBQUc7TUFDakMsSUFBSWtCLEdBQUEsR0FBTWxkLFlBQUEsQ0FBYWdkLEtBQUEsQ0FBTWhCLENBQUEsR0FBSTE2QixPQUFPO01BRXhDLElBQUkySSxLQUFBLEdBQVFpekIsR0FBQSxDQUFJanpCLEtBQUEsRUFBTztRQUNyQkEsS0FBQSxHQUFRaXpCLEdBQUEsQ0FBSWp6QixLQUFBO01BQ2Q7TUFFQSxJQUFJaEUsTUFBQSxHQUFTaTNCLEdBQUEsQ0FBSWozQixNQUFBLEVBQVE7UUFDdkJBLE1BQUEsR0FBU2kzQixHQUFBLENBQUlqM0IsTUFBQTtNQUNmO01BRUFnM0IsTUFBQSxDQUFPakIsQ0FBQSxJQUFLa0IsR0FBQTtJQUNkO0lBRUEsSUFBSUMsTUFBQSxHQUFTci9CLEtBQUEsQ0FBTTJ5QixPQUFBLENBQVFzTCxDQUFBO0lBQzNCLElBQUlxQixHQUFBLEdBQU07SUFFVixJQUFJRCxNQUFBLEVBQVE7TUFDVkMsR0FBQSxHQUFNdnNCLGFBQUEsQ0FBY3NzQixNQUFBLEVBQVE3N0IsT0FBTztNQUVuQyxJQUFJODdCLEdBQUEsR0FBTSxHQUFHO1FBRVhBLEdBQUEsSUFBT1QsWUFBQTtRQUVQLElBQUkxeUIsS0FBQSxHQUFRbXpCLEdBQUEsRUFBSztVQUNmbnpCLEtBQUEsR0FBUW16QixHQUFBO1FBQ1Y7UUFFQUEsR0FBQSxHQUFNO01BQ1I7SUFDRjtJQUtBLElBQUl0L0IsS0FBQSxDQUFNMHlCLE1BQUEsRUFBUTtNQUNoQnZtQixLQUFBLElBQVN1eUIsR0FBQTtJQUNYO0lBRUFTLE1BQUEsQ0FBT2gzQixNQUFBLEdBQVNBLE1BQUE7SUFDaEJnM0IsTUFBQSxDQUFPaHpCLEtBQUEsR0FBUUEsS0FBQTtJQUNmK2YsV0FBQSxJQUFlL2pCLE1BQUE7SUFDZmczQixNQUFBLENBQU9ILEdBQUEsR0FBTTlTLFdBQUE7SUFDYkEsV0FBQSxJQUFlL2YsS0FBQSxHQUFRbXpCLEdBQUE7SUFFdkJwL0IsSUFBQSxDQUFLKzlCLENBQUEsSUFBS2tCLE1BQUE7SUFFVkwsV0FBQSxDQUFZak0sZUFBQSxDQUFnQm9MLENBQUEsR0FBSSxFQUFFO0VBQ3BDO0VBRUEsSUFBSXNCLE1BQUEsR0FBU3JULFdBQUEsR0FBYyxJQUFJMW9CLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFOUQsVUFBQTtFQUNyRCxJQUFJOHdCLGVBQUEsR0FBa0J4L0IsS0FBQSxDQUFNb3lCLElBQUEsSUFBUSxFQUFDO0VBQ3JDLElBQUlBLElBQUEsR0FBTyxFQUFDO0VBQ1osSUFBSXFOLE1BQUE7RUFDSixJQUFJQyxXQUFBO0VBQ0osSUFBSUMsUUFBQSxHQUFXLEVBQUM7RUFFaEIsSUFBSTMvQixLQUFBLENBQU0yOUIsSUFBQSxJQUFRMzlCLEtBQUEsQ0FBTTI5QixJQUFBLENBQUtpQyxJQUFBLENBQUtDLElBQUEsSUFBT0EsSUFBRyxHQUFHO0lBRzdDLEtBQUs1QixDQUFBLEdBQUksR0FBR0EsQ0FBQSxHQUFJRSxFQUFBLEVBQUksRUFBRUYsQ0FBQSxFQUFHO01BQ3ZCLElBQUk2QixFQUFBLEdBQUs1L0IsSUFBQSxDQUFLKzlCLENBQUE7TUFDZCxJQUFJeGhCLEtBQUEsR0FBUXFqQixFQUFBLENBQUdkLEdBQUEsR0FBTU8sTUFBQTtNQUNyQixJQUFJaGIsR0FBQSxHQUFNdmtCLEtBQUEsQ0FBTTI5QixJQUFBLENBQUtNLENBQUE7TUFDckIsSUFBSThCLE9BQUEsR0FBVTtNQUVkLElBQUl4YixHQUFBLEtBQVEsTUFBTTtRQUVoQndiLE9BQUEsR0FBVWpoQixXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxTQUFTLEdBQUcsRUFBQyxFQUFHN1gsT0FBTztNQUN6RCxXQUFXK2dCLEdBQUEsS0FBUSxPQUFPO1FBRXhCd2IsT0FBQSxHQUFVamhCLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxFQUFDLEVBQUcsRUFBQyxFQUFHN1gsT0FBTztNQUNoRCxPQUFPO1FBRUx1OEIsT0FBQSxHQUFVamhCLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxFQUFDLEVBQUd1RyxpQkFBQSxDQUFrQjJDLEdBQUEsRUFBSy9nQixPQUFBLEVBQVMsSUFBSSxHQUFHQSxPQUFPO01BQ25GO01BRUF1OEIsT0FBQSxDQUFRNXpCLEtBQUEsR0FBUTJ6QixFQUFBLENBQUczekIsS0FBQTtNQUNuQjR6QixPQUFBLENBQVE1M0IsTUFBQSxHQUFTMjNCLEVBQUEsQ0FBRzMzQixNQUFBO01BQ3BCdzNCLFFBQUEsQ0FBUzE5QixJQUFBLENBQUs7UUFDWmhDLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNaWhDLE9BQUE7UUFDTnRqQjtNQUNGLENBQUM7SUFDSDtFQUNGO0VBRUEsS0FBS3loQixDQUFBLEdBQUksR0FBR3dCLFdBQUEsR0FBYyxHQUUxQnhCLENBQUEsR0FBSUUsRUFBQSxJQUFNc0IsV0FBQSxHQUFjRixlQUFBLENBQWdCMWhDLE1BQUEsRUFBUSxFQUFFb2dDLENBQUEsRUFBRyxFQUFFd0IsV0FBQSxFQUFhO0lBQ2xFLElBQUlNLFFBQUEsR0FBV1IsZUFBQSxDQUFnQkUsV0FBQSxLQUFnQixDQUFDO0lBQ2hELElBQUlPLGNBQUEsR0FBaUI7SUFFckIsT0FBT0QsUUFBQSxDQUFTLy9CLElBQUEsS0FBUyxhQUFhO01BR3BDLElBQUksQ0FBQ2dnQyxjQUFBLEVBQWdCO1FBQ25CUixNQUFBLEdBQVMzZ0IsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsYUFBYSxHQUFHLEVBQUU7UUFDakRva0IsTUFBQSxDQUFPcHpCLEtBQUEsQ0FBTThELEtBQUEsR0FBUW1ELE1BQUEsQ0FBTzlQLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFckQsYUFBYTtRQUMvRGlqQixJQUFBLENBQUtud0IsSUFBQSxDQUFLdzlCLE1BQU07TUFDbEI7TUFFQSxJQUFJTyxRQUFBLENBQVNFLFNBQUEsS0FBYyxPQUFPRixRQUFBLENBQVNFLFNBQUEsS0FBYyxLQUFLO1FBQzVELElBQUlDLFFBQUEsR0FBV0gsUUFBQSxDQUFTRSxTQUFBLEtBQWMsTUFBTSxVQUFVO1FBQ3RELElBQUlBLFNBQUEsR0FBWXBoQixXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxvQkFBb0IsR0FBRyxFQUFDLEVBQUc3WCxPQUFPO1FBQ3hFMDhCLFNBQUEsQ0FBVTd6QixLQUFBLENBQU1sRSxNQUFBLEdBQVNtTCxNQUFBLENBQU80WSxXQUFXO1FBQzNDZ1UsU0FBQSxDQUFVN3pCLEtBQUEsQ0FBTWd3QixnQkFBQSxHQUFtQi9vQixNQUFBLENBQU8yb0IsYUFBYTtRQUN2RGlFLFNBQUEsQ0FBVTd6QixLQUFBLENBQU0rekIsZ0JBQUEsR0FBbUJELFFBQUE7UUFDbkNELFNBQUEsQ0FBVTd6QixLQUFBLENBQU1nMEIsTUFBQSxHQUFTLE9BQU8vc0IsTUFBQSxDQUFPLENBQUMyb0IsYUFBQSxHQUFnQixDQUFDO1FBRXpELElBQUlxRSxNQUFBLEdBQVNwVSxXQUFBLEdBQWNxVCxNQUFBO1FBRTNCLElBQUllLE1BQUEsRUFBUTtVQUNWSixTQUFBLENBQVU3ekIsS0FBQSxDQUFNK1gsYUFBQSxHQUFnQjlRLE1BQUEsQ0FBTyxDQUFDZ3RCLE1BQU07UUFDaEQ7UUFFQWxPLElBQUEsQ0FBS253QixJQUFBLENBQUtpK0IsU0FBUztNQUNyQixPQUFPO1FBQ0wsTUFBTSxJQUFJemlDLFVBQUEsQ0FBVyw2QkFBNkJ1aUMsUUFBQSxDQUFTRSxTQUFTO01BQ3RFO01BRUFSLFdBQUE7TUFDQU0sUUFBQSxHQUFXUixlQUFBLENBQWdCRSxXQUFBLEtBQWdCLENBQUM7TUFDNUNPLGNBQUEsR0FBaUI7SUFDbkI7SUFFQSxJQUFJL0IsQ0FBQSxJQUFLRSxFQUFBLEVBQUk7TUFDWDtJQUNGO0lBRUEsSUFBSW1DLFFBQUEsR0FBVztJQUVmLElBQUlyQyxDQUFBLEdBQUksS0FBS2wrQixLQUFBLENBQU1xOUIsbUJBQUEsRUFBcUI7TUFDdENrRCxRQUFBLEdBQVd4L0IsS0FBQSxDQUFNL0IsS0FBQSxDQUFNZ2hDLFFBQUEsQ0FBU3pOLE1BQUEsRUFBUWdNLFdBQVc7TUFFbkQsSUFBSWdDLFFBQUEsS0FBYSxHQUFHO1FBQ2xCZCxNQUFBLEdBQVMzZ0IsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsYUFBYSxHQUFHLEVBQUU7UUFDakRva0IsTUFBQSxDQUFPcHpCLEtBQUEsQ0FBTThELEtBQUEsR0FBUW1ELE1BQUEsQ0FBT2l0QixRQUFRO1FBQ3BDbk8sSUFBQSxDQUFLbndCLElBQUEsQ0FBS3c5QixNQUFNO01BQ2xCO0lBQ0Y7SUFFQSxJQUFJZSxHQUFBLEdBQU0sRUFBQztJQUVYLEtBQUt2QyxDQUFBLEdBQUksR0FBR0EsQ0FBQSxHQUFJRSxFQUFBLEVBQUksRUFBRUYsQ0FBQSxFQUFHO01BQ3ZCLElBQUlwTSxHQUFBLEdBQU0zeEIsSUFBQSxDQUFLKzlCLENBQUE7TUFDZixJQUFJbi9CLElBQUEsR0FBTyt5QixHQUFBLENBQUlxTSxDQUFBO01BRWYsSUFBSSxDQUFDcC9CLElBQUEsRUFBTTtRQUNUO01BQ0Y7TUFFQSxJQUFJMmhDLE9BQUEsR0FBVTVPLEdBQUEsQ0FBSW1OLEdBQUEsR0FBTU8sTUFBQTtNQUV4QnpnQyxJQUFBLENBQUtxTixLQUFBLEdBQVEwbEIsR0FBQSxDQUFJMWxCLEtBQUE7TUFDakJyTixJQUFBLENBQUtxSixNQUFBLEdBQVMwcEIsR0FBQSxDQUFJMXBCLE1BQUE7TUFDbEJxNEIsR0FBQSxDQUFJditCLElBQUEsQ0FBSztRQUNQaEMsSUFBQSxFQUFNO1FBQ05uQixJQUFBO1FBQ0EyZCxLQUFBLEVBQU9na0I7TUFDVCxDQUFDO0lBQ0g7SUFFQUQsR0FBQSxHQUFNMWhCLFdBQUEsQ0FBWS9CLFNBQUEsQ0FBVTtNQUMxQlQsWUFBQSxFQUFjO01BQ2RyUSxRQUFBLEVBQVV1MEI7SUFDWixHQUFHaDlCLE9BQU87SUFDVmc5QixHQUFBLEdBQU0xaEIsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsZ0JBQWdCMmtCLFFBQUEsQ0FBUzFOLEtBQUEsSUFBUyxJQUFJLEdBQUcsQ0FBQ2tPLEdBQUcsQ0FBQztJQUMxRXBPLElBQUEsQ0FBS253QixJQUFBLENBQUt1K0IsR0FBRztJQUViLElBQUl0QyxDQUFBLEdBQUlFLEVBQUEsR0FBSyxLQUFLcCtCLEtBQUEsQ0FBTXE5QixtQkFBQSxFQUFxQjtNQUMzQ2tELFFBQUEsR0FBV3gvQixLQUFBLENBQU0vQixLQUFBLENBQU1naEMsUUFBQSxDQUFTeE4sT0FBQSxFQUFTK0wsV0FBVztNQUVwRCxJQUFJZ0MsUUFBQSxLQUFhLEdBQUc7UUFDbEJkLE1BQUEsR0FBUzNnQixXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxhQUFhLEdBQUcsRUFBRTtRQUNqRG9rQixNQUFBLENBQU9wekIsS0FBQSxDQUFNOEQsS0FBQSxHQUFRbUQsTUFBQSxDQUFPaXRCLFFBQVE7UUFDcENuTyxJQUFBLENBQUtud0IsSUFBQSxDQUFLdzlCLE1BQU07TUFDbEI7SUFDRjtFQUNGO0VBRUF2L0IsSUFBQSxHQUFPNGUsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsUUFBUSxHQUFHK1csSUFBSTtFQUU1QyxJQUFJaU0sTUFBQSxDQUFPdmdDLE1BQUEsR0FBUyxHQUFHO0lBQ3JCLElBQUk0ZCxJQUFBLEdBQU9vRCxXQUFBLENBQVl2RCxZQUFBLENBQWEsU0FBUy9YLE9BQUEsRUFBU3k0QixhQUFhO0lBQ25FLElBQUl5RSxNQUFBLEdBQVM1aEIsV0FBQSxDQUFZdkQsWUFBQSxDQUFhLGFBQWEvWCxPQUFBLEVBQVN5NEIsYUFBYTtJQUN6RSxJQUFJMEUsVUFBQSxHQUFhLENBQUM7TUFDaEIxZ0MsSUFBQSxFQUFNO01BQ05uQixJQUFBLEVBQU1vQixJQUFBO01BQ051YyxLQUFBLEVBQU87SUFDVCxDQUFDO0lBRUQsT0FBTzRoQixNQUFBLENBQU92Z0MsTUFBQSxHQUFTLEdBQUc7TUFDeEIsSUFBSThpQyxLQUFBLEdBQVF2QyxNQUFBLENBQU9oYixHQUFBLENBQUk7TUFDdkIsSUFBSXdkLFNBQUEsR0FBWUQsS0FBQSxDQUFNNUIsR0FBQSxHQUFNTyxNQUFBO01BRTVCLElBQUlxQixLQUFBLENBQU0zQixRQUFBLEVBQVU7UUFDbEIwQixVQUFBLENBQVcxK0IsSUFBQSxDQUFLO1VBQ2RoQyxJQUFBLEVBQU07VUFDTm5CLElBQUEsRUFBTTRoQyxNQUFBO1VBQ05qa0IsS0FBQSxFQUFPb2tCO1FBQ1QsQ0FBQztNQUNILE9BQU87UUFDTEYsVUFBQSxDQUFXMStCLElBQUEsQ0FBSztVQUNkaEMsSUFBQSxFQUFNO1VBQ05uQixJQUFBLEVBQU00YyxJQUFBO1VBQ05lLEtBQUEsRUFBT29rQjtRQUNULENBQUM7TUFDSDtJQUNGO0lBRUEzZ0MsSUFBQSxHQUFPNGUsV0FBQSxDQUFZL0IsU0FBQSxDQUFVO01BQzNCVCxZQUFBLEVBQWM7TUFDZHJRLFFBQUEsRUFBVTAwQjtJQUNaLEdBQUduOUIsT0FBTztFQUNaO0VBRUEsSUFBSW04QixRQUFBLENBQVM3aEMsTUFBQSxLQUFXLEdBQUc7SUFDekIsT0FBT2doQixXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQ25iLElBQUksR0FBR3NELE9BQU87RUFDdkQsT0FBTztJQUNMLElBQUlzOUIsU0FBQSxHQUFZaGlCLFdBQUEsQ0FBWS9CLFNBQUEsQ0FBVTtNQUNwQ1QsWUFBQSxFQUFjO01BQ2RyUSxRQUFBLEVBQVUwekI7SUFDWixHQUFHbjhCLE9BQU87SUFDVnM5QixTQUFBLEdBQVloaUIsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsS0FBSyxHQUFHLENBQUN5bEIsU0FBUyxHQUFHdDlCLE9BQU87SUFDOUQsT0FBT3NiLFdBQUEsQ0FBWXZFLFlBQUEsQ0FBYSxDQUFDcmEsSUFBQSxFQUFNNGdDLFNBQVMsQ0FBQztFQUNuRDtBQUNGO0FBRUEsSUFBSUMsUUFBQSxHQUFXO0VBQ2I3QyxDQUFBLEVBQUc7RUFDSDhDLENBQUEsRUFBRztFQUNIL0MsQ0FBQSxFQUFHO0FBQ0w7QUFFQSxJQUFJZ0QsZUFBQSxHQUFrQixTQUFTM2dCLGNBQWN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0VBQzNELElBQUkwOUIsR0FBQSxHQUFNLEVBQUM7RUFDWCxJQUFJQyxJQUFBLEdBQU8sSUFBSWxjLFVBQUEsQ0FBV0osUUFBQSxDQUFTLE9BQU8sRUFBQyxFQUFHLENBQUMsVUFBVSxDQUFDO0VBQzFELElBQUlOLEdBQUEsR0FBTSxJQUFJVSxVQUFBLENBQVdKLFFBQUEsQ0FBUyxPQUFPLEVBQUMsRUFBRyxDQUFDLGFBQWEsQ0FBQztFQUU1RCxTQUFTNWUsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSWpHLEtBQUEsQ0FBTUUsSUFBQSxDQUFLcEMsTUFBQSxFQUFRbUksQ0FBQSxJQUFLO0lBQzFDLElBQUk2NUIsRUFBQSxHQUFLOS9CLEtBQUEsQ0FBTUUsSUFBQSxDQUFLK0YsQ0FBQTtJQUNwQixJQUFJNHJCLEdBQUEsR0FBTSxFQUFDO0lBRVgsU0FBUy9ZLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUlnbkIsRUFBQSxDQUFHaGlDLE1BQUEsRUFBUWdiLENBQUEsSUFBSztNQUNsQytZLEdBQUEsQ0FBSTV2QixJQUFBLENBQUssSUFBSWdqQixVQUFBLENBQVdKLFFBQUEsQ0FBUyxPQUFPLENBQUNjLFdBQUEsQ0FBV21hLEVBQUEsQ0FBR2huQixDQUFBLEdBQUl0VixPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFO0lBRUEsSUFBSXhELEtBQUEsQ0FBTTI5QixJQUFBLElBQVEzOUIsS0FBQSxDQUFNMjlCLElBQUEsQ0FBSzEzQixDQUFBLEdBQUk7TUFDL0I0ckIsR0FBQSxDQUFJMU8sT0FBQSxDQUFRZ2UsSUFBSTtNQUNoQnRQLEdBQUEsQ0FBSTV2QixJQUFBLENBQUtrL0IsSUFBSTtNQUViLElBQUluaEMsS0FBQSxDQUFNc0IsS0FBQSxFQUFPO1FBQ2Z1d0IsR0FBQSxDQUFJMU8sT0FBQSxDQUFRb0IsR0FBRztNQUNqQixPQUFPO1FBQ0xzTixHQUFBLENBQUk1dkIsSUFBQSxDQUFLc2lCLEdBQUc7TUFDZDtJQUNGO0lBRUEyYyxHQUFBLENBQUlqL0IsSUFBQSxDQUFLLElBQUlnakIsVUFBQSxDQUFXSixRQUFBLENBQVMsT0FBT2dOLEdBQUcsQ0FBQztFQUM5QztFQUVBLElBQUl1UCxLQUFBLEdBQVEsSUFBSW5jLFVBQUEsQ0FBV0osUUFBQSxDQUFTLFVBQVVxYyxHQUFHO0VBV2pELElBQUk1QixHQUFBLEdBQU10L0IsS0FBQSxDQUFNeXlCLFlBQUEsS0FBaUIsTUFBTSxNQUNyQyxPQUFPenlCLEtBQUEsQ0FBTXl5QixZQUFBLEdBQWUsS0FBS3p5QixLQUFBLENBQU0weUIsTUFBQSxHQUFTLE9BQU87RUFDekQwTyxLQUFBLENBQU0vc0IsWUFBQSxDQUFhLGNBQWNmLE1BQUEsQ0FBT2dzQixHQUFHLENBQUM7RUFHNUMsSUFBSStCLFFBQUEsR0FBVztFQUNmLElBQUkvTyxLQUFBLEdBQVE7RUFFWixJQUFJdHlCLEtBQUEsQ0FBTW95QixJQUFBLElBQVFweUIsS0FBQSxDQUFNb3lCLElBQUEsQ0FBS3QwQixNQUFBLEdBQVMsR0FBRztJQUV2QyxJQUFJczBCLElBQUEsR0FBT3B5QixLQUFBLENBQU1veUIsSUFBQTtJQUNqQixJQUFJa1AsV0FBQSxHQUFjO0lBQ2xCLElBQUlDLGdCQUFBLEdBQW1CO0lBQ3ZCLElBQUlDLE1BQUEsR0FBUztJQUNiLElBQUlDLElBQUEsR0FBT3JQLElBQUEsQ0FBS3QwQixNQUFBO0lBRWhCLElBQUlzMEIsSUFBQSxDQUFLLEdBQUdueUIsSUFBQSxLQUFTLGFBQWE7TUFDaENvaEMsUUFBQSxJQUFZO01BQ1pHLE1BQUEsR0FBUztJQUNYO0lBRUEsSUFBSXBQLElBQUEsQ0FBS0EsSUFBQSxDQUFLdDBCLE1BQUEsR0FBUyxHQUFHbUMsSUFBQSxLQUFTLGFBQWE7TUFDOUNvaEMsUUFBQSxJQUFZO01BQ1pJLElBQUEsSUFBUTtJQUNWO0lBRUEsU0FBU3Q3QixFQUFBLEdBQUtxN0IsTUFBQSxFQUFRcjdCLEVBQUEsR0FBS3M3QixJQUFBLEVBQU10N0IsRUFBQSxJQUFNO01BQ3JDLElBQUlpc0IsSUFBQSxDQUFLanNCLEVBQUEsRUFBSWxHLElBQUEsS0FBUyxTQUFTO1FBQzdCcXlCLEtBQUEsSUFBU3lPLFFBQUEsQ0FBUzNPLElBQUEsQ0FBS2pzQixFQUFBLEVBQUltc0IsS0FBQTtRQUUzQixJQUFJaVAsZ0JBQUEsRUFBa0I7VUFDcEJELFdBQUEsSUFBZTtRQUNqQjtRQUVBQyxnQkFBQSxHQUFtQjtNQUNyQixXQUFXblAsSUFBQSxDQUFLanNCLEVBQUEsRUFBSWxHLElBQUEsS0FBUyxhQUFhO1FBR3hDLElBQUlzaEMsZ0JBQUEsRUFBa0I7VUFDcEJELFdBQUEsSUFBZWxQLElBQUEsQ0FBS2pzQixFQUFBLEVBQUkrNUIsU0FBQSxLQUFjLE1BQU0sV0FBVztVQUN2RHFCLGdCQUFBLEdBQW1CO1FBQ3JCO01BQ0Y7SUFDRjtJQUVBSCxLQUFBLENBQU0vc0IsWUFBQSxDQUFhLGVBQWVpZSxLQUFBLENBQU1vUCxJQUFBLENBQUssQ0FBQztJQUU5QyxJQUFJLE9BQU81Z0MsSUFBQSxDQUFLd2dDLFdBQVcsR0FBRztNQUM1QkYsS0FBQSxDQUFNL3NCLFlBQUEsQ0FBYSxlQUFlaXRCLFdBQUEsQ0FBWUksSUFBQSxDQUFLLENBQUM7SUFDdEQ7RUFDRjtFQUdBLElBQUkxaEMsS0FBQSxDQUFNNHlCLGlCQUFBLEtBQXNCLFNBQVM7SUFDdkMsSUFBSStPLEtBQUEsR0FBUTNoQyxLQUFBLENBQU1veUIsSUFBQSxJQUFRLEVBQUM7SUFFM0IsSUFBSXdQLFFBQUEsR0FBVTtJQUVkLFNBQVNscUIsR0FBQSxHQUFNLEdBQUdBLEdBQUEsR0FBTWlxQixLQUFBLENBQU03akMsTUFBQSxFQUFRNFosR0FBQSxJQUFPO01BQzNDa3FCLFFBQUEsSUFBV2xxQixHQUFBLEdBQU0sSUFBSSxTQUFTO0lBQ2hDO0lBRUEwcEIsS0FBQSxDQUFNL3NCLFlBQUEsQ0FBYSxpQkFBaUJ1dEIsUUFBQSxDQUFRRixJQUFBLENBQUssQ0FBQztFQUNwRCxXQUFXMWhDLEtBQUEsQ0FBTTR5QixpQkFBQSxLQUFzQixhQUFhNXlCLEtBQUEsQ0FBTTR5QixpQkFBQSxLQUFzQixVQUFVO0lBQ3hGd08sS0FBQSxDQUFNL3NCLFlBQUEsQ0FBYSxpQkFBaUIsS0FBSztFQUMzQyxXQUFXclUsS0FBQSxDQUFNNHlCLGlCQUFBLEtBQXNCLFNBQVM7SUFDOUN3TyxLQUFBLENBQU0vc0IsWUFBQSxDQUFhLGlCQUFpQixVQUFVO0VBQ2hELFdBQVdyVSxLQUFBLENBQU00eUIsaUJBQUEsS0FBc0IsTUFBTTtJQUMzQ3dPLEtBQUEsQ0FBTS9zQixZQUFBLENBQWEsaUJBQWlCLE9BQU87RUFDN0MsT0FBTztJQUNMK3NCLEtBQUEsQ0FBTS9zQixZQUFBLENBQWEsaUJBQWlCLEtBQUs7RUFDM0M7RUFHQSxJQUFJd3RCLFFBQUEsR0FBVztFQUNmLElBQUl4RCxNQUFBLEdBQVNyK0IsS0FBQSxDQUFNNnlCLGVBQUE7RUFDbkJ3TyxRQUFBLElBQVloRCxNQUFBLENBQU8sR0FBR3ZnQyxNQUFBLEdBQVMsSUFBSSxVQUFVO0VBQzdDdWpDLFFBQUEsSUFBWWhELE1BQUEsQ0FBT0EsTUFBQSxDQUFPdmdDLE1BQUEsR0FBUyxHQUFHQSxNQUFBLEdBQVMsSUFBSSxXQUFXO0VBRTlELFNBQVMrWixHQUFBLEdBQU0sR0FBR0EsR0FBQSxHQUFNd21CLE1BQUEsQ0FBT3ZnQyxNQUFBLEdBQVMsR0FBRytaLEdBQUEsSUFBTztJQUNoRGdxQixRQUFBLElBQVl4RCxNQUFBLENBQU94bUIsR0FBQSxFQUFLL1osTUFBQSxLQUFXLElBQUksVUFDckN1Z0MsTUFBQSxDQUFPeG1CLEdBQUEsRUFBSyxLQUFLLFlBQVk7RUFDakM7RUFFQSxJQUFJLE9BQU8vVyxJQUFBLENBQUsrZ0MsUUFBUSxHQUFHO0lBQ3pCVCxLQUFBLENBQU0vc0IsWUFBQSxDQUFhLFlBQVl3dEIsUUFBQSxDQUFTSCxJQUFBLENBQUssQ0FBQztFQUNoRDtFQUVBLElBQUlMLFFBQUEsS0FBYSxJQUFJO0lBQ25CRCxLQUFBLEdBQVEsSUFBSW5jLFVBQUEsQ0FBV0osUUFBQSxDQUFTLFlBQVksQ0FBQ3VjLEtBQUssQ0FBQztJQUNuREEsS0FBQSxDQUFNL3NCLFlBQUEsQ0FBYSxZQUFZZ3RCLFFBQUEsQ0FBU0ssSUFBQSxDQUFLLENBQUM7RUFDaEQ7RUFFQSxJQUFJMWhDLEtBQUEsQ0FBTXl5QixZQUFBLElBQWdCenlCLEtBQUEsQ0FBTXl5QixZQUFBLEdBQWUsR0FBRztJQUVoRDJPLEtBQUEsR0FBUSxJQUFJbmMsVUFBQSxDQUFXSixRQUFBLENBQVMsVUFBVSxDQUFDdWMsS0FBSyxDQUFDO0lBQ2pEQSxLQUFBLENBQU0vc0IsWUFBQSxDQUFhLGVBQWUsR0FBRztFQUN2QztFQUVBLE9BQU8rc0IsS0FBQTtBQUNUO0FBR0EsSUFBSVUsY0FBQSxHQUFpQixTQUFTQyxnQkFBZTc5QixPQUFBLEVBQVN5cEIsSUFBQSxFQUFNO0VBQzFELElBQUl6cEIsT0FBQSxDQUFRZzVCLE9BQUEsQ0FBUW4rQixPQUFBLENBQVEsSUFBSSxNQUFNLElBQUk7SUFDeENrK0IsNkJBQUEsQ0FBOEIvNEIsT0FBTztFQUN2QztFQUVBLElBQUlrdUIsSUFBQSxHQUFPLEVBQUM7RUFDWixJQUFJNFAsY0FBQSxHQUFpQjk5QixPQUFBLENBQVFnNUIsT0FBQSxDQUFRbitCLE9BQUEsQ0FBUSxJQUFJLElBQUksS0FBSyxZQUFZO0VBQ3RFLElBQUlrakMsT0FBQSxHQUFVLzlCLE9BQUEsQ0FBUWc1QixPQUFBLEtBQVk7RUFDbEMsSUFBSWdGLEdBQUEsR0FBTTlFLFVBQUEsQ0FBV2w1QixPQUFBLENBQVEycEIsTUFBQSxFQUFRO0lBQ25DdUUsSUFBQTtJQUNBTSxNQUFBLEVBQVE7SUFDUjRLLE9BQUEsRUFBUzJFLE9BQUEsR0FBVSxTQUFZOUUsVUFBQSxDQUFXajVCLE9BQUEsQ0FBUWc1QixPQUFPO0lBQ3pETSxjQUFBLEVBQWdCO0lBQ2hCNUssaUJBQUEsRUFBbUJvUCxjQUFBO0lBQ25CdkUsVUFBQSxFQUFZd0UsT0FBQSxHQUFVLElBQUk7SUFDMUIzZ0MsS0FBQSxFQUFPNEMsT0FBQSxDQUFRMnBCLE1BQUEsQ0FBT2hILFFBQUEsQ0FBU3ZsQjtFQUNqQyxHQUFHLFNBQVM7RUFVWixJQUFJNmdDLFFBQUE7RUFDSixJQUFJQyxPQUFBLEdBQVU7RUFDZCxJQUFJQyxVQUFBLEdBQWE7SUFDZnBpQyxJQUFBLEVBQU07SUFDTjZQLElBQUEsRUFBTTVMLE9BQUEsQ0FBUTRMLElBQUE7SUFDZDVQLElBQUEsRUFBTTtFQUNSO0VBRUEsSUFBSXl0QixJQUFBLENBQUssTUFBTUEsSUFBQSxDQUFLLEdBQUcxdEIsSUFBQSxLQUFTLFlBQVk7SUFDMUMsSUFBSXFpQyxJQUFBLEdBQU87SUFFWCxTQUFTcjhCLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUkwbkIsSUFBQSxDQUFLLEdBQUd6dEIsSUFBQSxDQUFLcEMsTUFBQSxFQUFRbUksQ0FBQSxJQUFLO01BQzVDLElBQUlzOEIsUUFBQSxHQUFValcsY0FBQSxDQUFlcUIsSUFBQSxDQUFLLEdBQUd6dEIsSUFBQSxDQUFLK0YsQ0FBQSxHQUFJLFNBQVM7TUFDdkRxOEIsSUFBQSxJQUFRQyxRQUFBLENBQVFsbEMsSUFBQTtJQUNsQjtJQUVBOGtDLFFBQUEsR0FBV0ssTUFBQSxDQUFPRixJQUFJO0lBQ3RCRixPQUFBLEdBQVVELFFBQUEsR0FBVztFQUN2QjtFQUVBLElBQUlNLFNBQUEsR0FBWSxDQUFDTCxPQUFBO0VBQ2pCRixHQUFBLENBQUloaUMsSUFBQSxDQUFLb0csT0FBQSxDQUFRLFVBQVV1ckIsR0FBQSxFQUFLO0lBQzlCLFNBQVM3WixHQUFBLEdBQU0sR0FBR0EsR0FBQSxHQUFNNlosR0FBQSxDQUFJL3pCLE1BQUEsRUFBUWthLEdBQUEsSUFBTyxHQUFHO01BRTVDLElBQUkwcUIsT0FBQSxHQUFVcFcsY0FBQSxDQUFldUYsR0FBQSxDQUFJN1osR0FBQSxHQUFNLFNBQVM7TUFDaEQsSUFBSTJxQixRQUFBLEdBQVdyVyxjQUFBLENBQWVvVyxPQUFBLENBQVF4aUMsSUFBQSxDQUFLLElBQUksVUFBVTtNQUN6RHlpQyxRQUFBLENBQVN6aUMsSUFBQSxDQUFLaWpCLE9BQUEsQ0FBUWtmLFVBQVU7SUFDbEM7SUFFQSxJQUFJLENBQUNJLFNBQUEsRUFBVztNQUVkLElBQUlHLFFBQUEsR0FBVy9RLEdBQUEsQ0FBSS96QixNQUFBLEdBQVM7TUFFNUIsSUFBSXFrQyxRQUFBLEdBQVdTLFFBQUEsRUFBVTtRQUN2QixNQUFNLElBQUlubEMsVUFBQSxDQUFXLDhCQUE4QixjQUFjMGtDLFFBQUEsR0FBVyxlQUFlUyxRQUFBLEdBQVcvUSxHQUFBLENBQUksRUFBRTtNQUM5RztJQUNGLFdBQVd1USxPQUFBLEdBQVV2USxHQUFBLENBQUkvekIsTUFBQSxFQUFRO01BRS9Cc2tDLE9BQUEsR0FBVXZRLEdBQUEsQ0FBSS96QixNQUFBO0lBQ2hCO0VBQ0YsQ0FBQztFQUlELFNBQVNzYSxHQUFBLEdBQU0sR0FBR0EsR0FBQSxHQUFNZ3FCLE9BQUEsRUFBUyxFQUFFaHFCLEdBQUEsRUFBSztJQUN0QyxJQUFJa2EsS0FBQSxHQUFRO0lBQ1osSUFBSUMsTUFBQSxHQUFTO0lBRWIsSUFBSW5hLEdBQUEsR0FBTSxNQUFNLEdBQUc7TUFDakJrYSxLQUFBLEdBQVE7SUFDVixXQUFXbGEsR0FBQSxHQUFNLEtBQUtxcUIsU0FBQSxFQUFXO01BRS9CbFEsTUFBQSxHQUFTO0lBQ1g7SUFFQUgsSUFBQSxDQUFLaGEsR0FBQSxJQUFPO01BQ1ZuWSxJQUFBLEVBQU07TUFDTnF5QixLQUFBO01BQ0FDLE1BQUE7TUFDQUMsT0FBQSxFQUFTO0lBQ1g7RUFDRjtFQUVBMFAsR0FBQSxDQUFJdFAsaUJBQUEsR0FBb0I2UCxTQUFBLEdBQVksVUFBVTtFQUM5QyxPQUFPUCxHQUFBO0FBQ1Q7QUFNQXZGLGlCQUFBLENBQWtCO0VBQ2hCMThCLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLFNBQVMsUUFBUTtFQUN6QkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztFQUNYO0VBRUFMLFFBQVFqYyxPQUFBLEVBQVN5cEIsSUFBQSxFQUFNO0lBS3JCLElBQUlrVixPQUFBLEdBQVVwVyxtQkFBQSxDQUFvQmtCLElBQUEsQ0FBSyxFQUFFO0lBQ3pDLElBQUltVixRQUFBLEdBQVdELE9BQUEsR0FBVSxDQUFDbFYsSUFBQSxDQUFLLEVBQUUsSUFBSXJCLGNBQUEsQ0FBZXFCLElBQUEsQ0FBSyxJQUFJLFVBQVUsRUFBRXp0QixJQUFBO0lBQ3pFLElBQUlreUIsSUFBQSxHQUFPMFEsUUFBQSxDQUFTNzFCLEdBQUEsQ0FBSSxVQUFVODFCLEdBQUEsRUFBSztNQUNyQyxJQUFJN3VCLElBQUEsR0FBT3FZLG9CQUFBLENBQXFCd1csR0FBRztNQUNuQyxJQUFJQyxFQUFBLEdBQUs5dUIsSUFBQSxDQUFLN1csSUFBQTtNQUVkLElBQUksTUFBTTBCLE9BQUEsQ0FBUWlrQyxFQUFFLE1BQU0sSUFBSTtRQUM1QixPQUFPO1VBQ0wvaUMsSUFBQSxFQUFNO1VBQ05xeUIsS0FBQSxFQUFPMFE7UUFDVDtNQUNGLFdBQVdBLEVBQUEsS0FBTyxLQUFLO1FBQ3JCLE9BQU87VUFDTC9pQyxJQUFBLEVBQU07VUFDTmlnQyxTQUFBLEVBQVc7UUFDYjtNQUNGLFdBQVc4QyxFQUFBLEtBQU8sS0FBSztRQUNyQixPQUFPO1VBQ0wvaUMsSUFBQSxFQUFNO1VBQ05pZ0MsU0FBQSxFQUFXO1FBQ2I7TUFDRjtNQUVBLE1BQU0sSUFBSXppQyxVQUFBLENBQVcsK0JBQStCdWxDLEVBQUEsRUFBSUQsR0FBRztJQUM3RCxDQUFDO0lBQ0QsSUFBSWIsR0FBQSxHQUFNO01BQ1I5UCxJQUFBO01BQ0FpTCxtQkFBQSxFQUFxQjtNQUVyQkksVUFBQSxFQUFZckwsSUFBQSxDQUFLdDBCO0lBQ25CO0lBQ0EsT0FBT3MvQixVQUFBLENBQVdsNUIsT0FBQSxDQUFRMnBCLE1BQUEsRUFBUXFVLEdBQUEsRUFBS25FLFVBQUEsQ0FBVzc1QixPQUFBLENBQVFnNUIsT0FBTyxDQUFDO0VBQ3BFO0VBRUE5YyxXQUFBLEVBQWE0ZCxhQUFBO0VBQ2IxZCxhQUFBLEVBQWUyZ0I7QUFDakIsQ0FBQztBQUtEdEUsaUJBQUEsQ0FBa0I7RUFDaEIxOEIsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsVUFBVSxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxZQUFZLFlBQVksWUFBWSxZQUFZLFVBQVU7RUFDOUlDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7RUFDWDtFQUVBTCxRQUFRamMsT0FBQSxFQUFTO0lBQ2YsSUFBSXF3QixXQUFBLEdBQWE7TUFDZixVQUFVO01BQ1YsV0FBVyxDQUFDLEtBQUssR0FBRztNQUNwQixXQUFXLENBQUMsS0FBSyxHQUFHO01BQ3BCLFdBQVcsQ0FBQyxPQUFPLEtBQUs7TUFDeEIsV0FBVyxDQUFDLEtBQUssR0FBRztNQUNwQixXQUFXLENBQUMsVUFBVSxRQUFRO0lBQ2hDLEVBQUVyd0IsT0FBQSxDQUFRZzVCLE9BQUEsQ0FBUTkrQixPQUFBLENBQVEsS0FBSyxFQUFFO0lBRWpDLElBQUk2a0MsUUFBQSxHQUFXO0lBQ2YsSUFBSUMsT0FBQSxHQUFVO01BQ1o3RixtQkFBQSxFQUFxQjtNQUNyQmpMLElBQUEsRUFBTSxDQUFDO1FBQ0xueUIsSUFBQSxFQUFNO1FBQ05xeUIsS0FBQSxFQUFPMlE7TUFDVCxDQUFDO0lBQ0g7SUFFQSxJQUFJLytCLE9BQUEsQ0FBUWc1QixPQUFBLENBQVE1bEIsTUFBQSxDQUFPcFQsT0FBQSxDQUFRZzVCLE9BQUEsQ0FBUXAvQixNQUFBLEdBQVMsQ0FBQyxNQUFNLEtBQUs7TUFHOUQsSUFBSSt2QixNQUFBLEdBQVMzcEIsT0FBQSxDQUFRMnBCLE1BQUE7TUFDckJBLE1BQUEsQ0FBT3VHLGFBQUEsQ0FBYztNQUVyQixJQUFJdkcsTUFBQSxDQUFPNkQsS0FBQSxDQUFNLEVBQUVyMEIsSUFBQSxLQUFTLEtBQUs7UUFDL0J3d0IsTUFBQSxDQUFPOEQsT0FBQSxDQUFRO1FBQ2Y5RCxNQUFBLENBQU91RyxhQUFBLENBQWM7UUFDckI2TyxRQUFBLEdBQVdwVixNQUFBLENBQU82RCxLQUFBLENBQU0sRUFBRXIwQixJQUFBO1FBRTFCLElBQUksTUFBTTBCLE9BQUEsQ0FBUWtrQyxRQUFRLE1BQU0sSUFBSTtVQUNsQyxNQUFNLElBQUl4bEMsVUFBQSxDQUFXLHdCQUF3Qm93QixNQUFBLENBQU8rRCxTQUFTO1FBQy9EO1FBRUEvRCxNQUFBLENBQU84RCxPQUFBLENBQVE7UUFDZjlELE1BQUEsQ0FBT3VHLGFBQUEsQ0FBYztRQUNyQnZHLE1BQUEsQ0FBT2lOLE1BQUEsQ0FBTyxHQUFHO1FBQ2pCak4sTUFBQSxDQUFPOEQsT0FBQSxDQUFRO1FBQ2Z1UixPQUFBLENBQVE5USxJQUFBLEdBQU8sQ0FBQztVQUNkbnlCLElBQUEsRUFBTTtVQUNOcXlCLEtBQUEsRUFBTzJRO1FBQ1QsQ0FBQztNQUNIO0lBQ0Y7SUFFQSxJQUFJZixHQUFBLEdBQU05RSxVQUFBLENBQVdsNUIsT0FBQSxDQUFRMnBCLE1BQUEsRUFBUXFWLE9BQUEsRUFBU25GLFVBQUEsQ0FBVzc1QixPQUFBLENBQVFnNUIsT0FBTyxDQUFDO0lBRXpFLElBQUlrRixPQUFBLEdBQVUvL0IsSUFBQSxDQUFLQyxHQUFBLENBQUksR0FBRyxHQUFHNC9CLEdBQUEsQ0FBSWhpQyxJQUFBLENBQUsrTSxHQUFBLENBQUk0a0IsR0FBQSxJQUFPQSxHQUFBLENBQUkvekIsTUFBTSxDQUFDO0lBQzVEb2tDLEdBQUEsQ0FBSTlQLElBQUEsR0FBTyxJQUFJL3VCLEtBQUEsQ0FBTSsrQixPQUFPLEVBQUUvUCxJQUFBLENBQUs7TUFDakNweUIsSUFBQSxFQUFNO01BQ05xeUIsS0FBQSxFQUFPMlE7SUFDVCxDQUFDO0lBQ0QsT0FBTzFPLFdBQUEsR0FBYTtNQUNsQnQwQixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTTVMLE9BQUEsQ0FBUTRMLElBQUE7TUFDZDVQLElBQUEsRUFBTSxDQUFDZ2lDLEdBQUc7TUFDVjdqQyxJQUFBLEVBQU1rMkIsV0FBQSxDQUFXO01BQ2pCajJCLEtBQUEsRUFBT2kyQixXQUFBLENBQVc7TUFDbEJ3RyxVQUFBLEVBQVk7SUFFZCxJQUFJbUgsR0FBQTtFQUNOO0VBRUE5aEIsV0FBQSxFQUFhNGQsYUFBQTtFQUNiMWQsYUFBQSxFQUFlMmdCO0FBQ2pCLENBQUM7QUFDRHRFLGlCQUFBLENBQWtCO0VBQ2hCMThCLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLGFBQWE7RUFDckJDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7RUFDWDtFQUVBTCxRQUFRamMsT0FBQSxFQUFTO0lBQ2YsSUFBSWcvQixPQUFBLEdBQVU7TUFDWnpRLFlBQUEsRUFBYztJQUNoQjtJQUNBLElBQUl5UCxHQUFBLEdBQU05RSxVQUFBLENBQVdsNUIsT0FBQSxDQUFRMnBCLE1BQUEsRUFBUXFWLE9BQUEsRUFBUyxRQUFRO0lBQ3REaEIsR0FBQSxDQUFJdFAsaUJBQUEsR0FBb0I7SUFDeEIsT0FBT3NQLEdBQUE7RUFDVDtFQUVBOWhCLFdBQUEsRUFBYTRkLGFBQUE7RUFDYjFkLGFBQUEsRUFBZTJnQjtBQUNqQixDQUFDO0FBQ0R0RSxpQkFBQSxDQUFrQjtFQUNoQjE4QixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxVQUFVO0VBQ2xCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0VBQ1g7RUFFQUwsUUFBUWpjLE9BQUEsRUFBU3lwQixJQUFBLEVBQU07SUFFckIsSUFBSWtWLE9BQUEsR0FBVXBXLG1CQUFBLENBQW9Ca0IsSUFBQSxDQUFLLEVBQUU7SUFDekMsSUFBSW1WLFFBQUEsR0FBV0QsT0FBQSxHQUFVLENBQUNsVixJQUFBLENBQUssRUFBRSxJQUFJckIsY0FBQSxDQUFlcUIsSUFBQSxDQUFLLElBQUksVUFBVSxFQUFFenRCLElBQUE7SUFDekUsSUFBSWt5QixJQUFBLEdBQU8wUSxRQUFBLENBQVM3MUIsR0FBQSxDQUFJLFVBQVU4MUIsR0FBQSxFQUFLO01BQ3JDLElBQUk3dUIsSUFBQSxHQUFPcVksb0JBQUEsQ0FBcUJ3VyxHQUFHO01BQ25DLElBQUlDLEVBQUEsR0FBSzl1QixJQUFBLENBQUs3VyxJQUFBO01BRWQsSUFBSSxLQUFLMEIsT0FBQSxDQUFRaWtDLEVBQUUsTUFBTSxJQUFJO1FBQzNCLE9BQU87VUFDTC9pQyxJQUFBLEVBQU07VUFDTnF5QixLQUFBLEVBQU8wUTtRQUNUO01BQ0Y7TUFFQSxNQUFNLElBQUl2bEMsVUFBQSxDQUFXLCtCQUErQnVsQyxFQUFBLEVBQUlELEdBQUc7SUFDN0QsQ0FBQztJQUVELElBQUkzUSxJQUFBLENBQUt0MEIsTUFBQSxHQUFTLEdBQUc7TUFDbkIsTUFBTSxJQUFJTCxVQUFBLENBQVcsd0NBQXdDO0lBQy9EO0lBRUEsSUFBSXlrQyxHQUFBLEdBQU07TUFDUjlQLElBQUE7TUFDQWlMLG1CQUFBLEVBQXFCO01BQ3JCNUssWUFBQSxFQUFjO0lBQ2hCO0lBQ0F5UCxHQUFBLEdBQU05RSxVQUFBLENBQVdsNUIsT0FBQSxDQUFRMnBCLE1BQUEsRUFBUXFVLEdBQUEsRUFBSyxRQUFRO0lBRTlDLElBQUlBLEdBQUEsQ0FBSWhpQyxJQUFBLENBQUtwQyxNQUFBLEdBQVMsS0FBS29rQyxHQUFBLENBQUloaUMsSUFBQSxDQUFLLEdBQUdwQyxNQUFBLEdBQVMsR0FBRztNQUNqRCxNQUFNLElBQUlMLFVBQUEsQ0FBVyx3Q0FBd0M7SUFDL0Q7SUFFQSxPQUFPeWtDLEdBQUE7RUFDVDtFQUVBOWhCLFdBQUEsRUFBYTRkLGFBQUE7RUFDYjFkLGFBQUEsRUFBZTJnQjtBQUNqQixDQUFDO0FBT0R0RSxpQkFBQSxDQUFrQjtFQUNoQjE4QixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxTQUFTLFVBQVUsVUFBVSxTQUFTO0VBQzlDQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0VBQ1g7RUFFQUwsUUFBUWpjLE9BQUEsRUFBUztJQUNmLElBQUlnL0IsT0FBQSxHQUFVO01BQ1p6USxZQUFBLEVBQWM7TUFDZEwsSUFBQSxFQUFNLENBQUM7UUFDTG55QixJQUFBLEVBQU07UUFDTnF5QixLQUFBLEVBQU87UUFDUEMsTUFBQSxFQUFRO1FBS1JDLE9BQUEsRUFBUztNQUdYLEdBQUc7UUFDRHZ5QixJQUFBLEVBQU07UUFDTnF5QixLQUFBLEVBQU87UUFDUEMsTUFBQSxFQUFRO1FBQ1JDLE9BQUEsRUFBUztNQUNYLENBQUM7SUFDSDtJQUNBLElBQUkwUCxHQUFBLEdBQU05RSxVQUFBLENBQVdsNUIsT0FBQSxDQUFRMnBCLE1BQUEsRUFBUXFWLE9BQUEsRUFBU25GLFVBQUEsQ0FBVzc1QixPQUFBLENBQVFnNUIsT0FBTyxDQUFDO0lBQ3pFLE9BQU87TUFDTGo5QixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTTVMLE9BQUEsQ0FBUTRMLElBQUE7TUFDZDVQLElBQUEsRUFBTSxDQUFDZ2lDLEdBQUc7TUFDVjdqQyxJQUFBLEVBQU02RixPQUFBLENBQVFnNUIsT0FBQSxDQUFRbitCLE9BQUEsQ0FBUSxHQUFHLElBQUksS0FBSyxNQUFNO01BQ2hEVCxLQUFBLEVBQU80RixPQUFBLENBQVFnNUIsT0FBQSxDQUFRbitCLE9BQUEsQ0FBUSxHQUFHLElBQUksS0FBSyxRQUFRO01BQ25EZzhCLFVBQUEsRUFBWTtJQUNkO0VBQ0Y7RUFFQTNhLFdBQUEsRUFBYTRkLGFBQUE7RUFDYjFkLGFBQUEsRUFBZTJnQjtBQUNqQixDQUFDO0FBT0R0RSxpQkFBQSxDQUFrQjtFQUNoQjE4QixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxTQUFTLFVBQVUsV0FBVyxPQUFPO0VBQzdDQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0VBQ1g7RUFDQUwsT0FBQSxFQUFTMmhCLGNBQUE7RUFDVDFoQixXQUFBLEVBQWE0ZCxhQUFBO0VBQ2IxZCxhQUFBLEVBQWUyZ0I7QUFDakIsQ0FBQztBQUlEdEUsaUJBQUEsQ0FBa0I7RUFDaEIxOEIsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsWUFBWSxVQUFVLFNBQVM7RUFDdkNDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7RUFDWDtFQUVBTCxRQUFRamMsT0FBQSxFQUFTO0lBQ2YsSUFBSW5ELEtBQUEsQ0FBTXBDLFFBQUEsQ0FBUyxDQUFDLFVBQVUsU0FBUyxHQUFHdUYsT0FBQSxDQUFRZzVCLE9BQU8sR0FBRztNQUMxREQsNkJBQUEsQ0FBOEIvNEIsT0FBTztJQUN2QztJQUVBLElBQUlnK0IsR0FBQSxHQUFNO01BQ1I5UCxJQUFBLEVBQU0sQ0FBQztRQUNMbnlCLElBQUEsRUFBTTtRQUNOcXlCLEtBQUEsRUFBTztNQUNULENBQUM7TUFDREksTUFBQSxFQUFRO01BQ1JFLGlCQUFBLEVBQW1CO01BQ25CMEssT0FBQSxFQUFTSCxVQUFBLENBQVdqNUIsT0FBQSxDQUFRZzVCLE9BQU87TUFDbkNNLGNBQUEsRUFBZ0I7TUFDaEJsOEIsS0FBQSxFQUFPNEMsT0FBQSxDQUFRMnBCLE1BQUEsQ0FBT2hILFFBQUEsQ0FBU3ZsQjtJQUNqQztJQUNBLE9BQU84N0IsVUFBQSxDQUFXbDVCLE9BQUEsQ0FBUTJwQixNQUFBLEVBQVFxVSxHQUFBLEVBQUssU0FBUztFQUNsRDtFQUVBOWhCLFdBQUEsRUFBYTRkLGFBQUE7RUFDYjFkLGFBQUEsRUFBZTJnQjtBQUNqQixDQUFDO0FBSUR0RSxpQkFBQSxDQUFrQjtFQUNoQjE4QixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxXQUFXLFlBQVksV0FBVztFQUMxQ0MsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztFQUNYO0VBQ0FMLE9BQUEsRUFBUzJoQixjQUFBO0VBQ1QxaEIsV0FBQSxFQUFhNGQsYUFBQTtFQUNiMWQsYUFBQSxFQUFlMmdCO0FBQ2pCLENBQUM7QUFDRHRFLGlCQUFBLENBQWtCO0VBQ2hCMThCLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLFlBQVksV0FBVztFQUMvQkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztFQUNYO0VBRUFMLFFBQVFqYyxPQUFBLEVBQVM7SUFDZis0Qiw2QkFBQSxDQUE4Qi80QixPQUFPO0lBQ3JDLElBQUlnK0IsR0FBQSxHQUFNO01BQ1I1RSxPQUFBLEVBQVNILFVBQUEsQ0FBV2o1QixPQUFBLENBQVFnNUIsT0FBTztNQUNuQ00sY0FBQSxFQUFnQjtNQUNoQkQsU0FBQSxFQUFXO01BQ1hFLFVBQUEsRUFBWTtNQUNabjhCLEtBQUEsRUFBTzRDLE9BQUEsQ0FBUTJwQixNQUFBLENBQU9oSCxRQUFBLENBQVN2bEI7SUFDakM7SUFDQSxPQUFPODdCLFVBQUEsQ0FBV2w1QixPQUFBLENBQVEycEIsTUFBQSxFQUFRcVUsR0FBQSxFQUFLLFNBQVM7RUFDbEQ7RUFFQTloQixXQUFBLEVBQWE0ZCxhQUFBO0VBQ2IxZCxhQUFBLEVBQWUyZ0I7QUFDakIsQ0FBQztBQUNEdEUsaUJBQUEsQ0FBa0I7RUFDaEIxOEIsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsSUFBSTtFQUNaQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0VBQ1g7RUFFQUwsUUFBUWpjLE9BQUEsRUFBUztJQUNmKzRCLDZCQUFBLENBQThCLzRCLE9BQU87SUFDckMsT0FBT2l0QixPQUFBLENBQVFqdEIsT0FBQSxDQUFRMnBCLE1BQU07RUFDL0I7RUFFQXpOLFdBQUEsRUFBYTRkLGFBQUE7RUFDYjFkLGFBQUEsRUFBZTJnQjtBQUNqQixDQUFDO0FBQ0RwRSxXQUFBLENBQVksY0FBYyxtQkFBbUI7QUFDN0NBLFdBQUEsQ0FBWSxXQUFXLFlBQVk7QUFFbkM5YyxjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUVOZ2dCLEtBQUEsRUFBTyxDQUFDLFdBQVcsYUFBYTtFQUNoQ0MsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNURyxhQUFBLEVBQWU7SUFDZkMsYUFBQSxFQUFlO0VBQ2pCO0VBRUFULFFBQVFqYyxPQUFBLEVBQVN5cEIsSUFBQSxFQUFNO0lBQ3JCLE1BQU0sSUFBSWx3QixVQUFBLENBQVd5RyxPQUFBLENBQVEwcEIsUUFBQSxHQUFXLHNDQUFzQztFQUNoRjtBQUVGLENBQUM7QUFFRCxJQUFJdVYsWUFBQSxHQUFlekcsYUFBQTtBQUluQjNjLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsV0FBVyxPQUFPO0VBQzFCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RDLFFBQUEsRUFBVSxDQUFDLE1BQU07RUFDbkI7RUFFQU4sUUFBUUgsSUFBQSxFQUFNMk4sSUFBQSxFQUFNO0lBQ2xCLElBQUk7TUFDRkUsTUFBQTtNQUNBRDtJQUNGLElBQUk1TixJQUFBO0lBQ0osSUFBSW9qQixTQUFBLEdBQVl6VixJQUFBLENBQUs7SUFFckIsSUFBSXlWLFNBQUEsQ0FBVW5qQyxJQUFBLEtBQVMsWUFBWTtNQUNqQyxNQUFNLElBQUl4QyxVQUFBLENBQVcsNEJBQTRCMmxDLFNBQVM7SUFDNUQ7SUFFQSxJQUFJbEcsT0FBQSxHQUFVO0lBRWQsU0FBU2ozQixDQUFBLEdBQUksR0FBR0EsQ0FBQSxHQUFJbTlCLFNBQUEsQ0FBVWxqQyxJQUFBLENBQUtwQyxNQUFBLEVBQVEsRUFBRW1JLENBQUEsRUFBRztNQUM5Q2kzQixPQUFBLElBQVc1USxjQUFBLENBQWU4VyxTQUFBLENBQVVsakMsSUFBQSxDQUFLK0YsQ0FBQSxHQUFJLFNBQVMsRUFBRTVJLElBQUE7SUFDMUQ7SUFFQSxJQUFJdXdCLFFBQUEsS0FBYSxXQUFXO01BRTFCLElBQUksQ0FBQ3VWLFlBQUEsQ0FBYXovQixjQUFBLENBQWV3NUIsT0FBTyxHQUFHO1FBQ3pDLE1BQU0sSUFBSXovQixVQUFBLENBQVcsMEJBQTBCeS9CLE9BQUEsRUFBU2tHLFNBQVM7TUFDbkU7TUFJQSxJQUFJQyxHQUFBLEdBQU1GLFlBQUEsQ0FBYWpHLE9BQUE7TUFDdkIsSUFBSTtRQUNGdlAsSUFBQSxFQUFNMlYsS0FBQTtRQUNOclY7TUFDRixJQUFJSixNQUFBLENBQU8wVixjQUFBLENBQWUsYUFBYXJHLE9BQUEsR0FBVSxLQUFLbUcsR0FBRztNQUN6RCxJQUFJbi9CLE9BQUEsR0FBVTtRQUNaNEwsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtRQUNib3RCLE9BQUE7UUFDQXJQO01BQ0Y7TUFDQSxJQUFJNUssTUFBQSxHQUFTb2dCLEdBQUEsQ0FBSWxqQixPQUFBLENBQVFqYyxPQUFBLEVBQVNvL0IsS0FBQSxFQUFPclYsT0FBTztNQUNoREosTUFBQSxDQUFPaU4sTUFBQSxDQUFPLFNBQVMsS0FBSztNQUM1QixJQUFJMEksWUFBQSxHQUFlM1YsTUFBQSxDQUFPK0QsU0FBQTtNQUMxQixJQUFJOTBCLEdBQUEsR0FBTXd2QixjQUFBLENBQWV1QixNQUFBLENBQU93RyxhQUFBLENBQWMsR0FBRyxhQUFhO01BRTlELElBQUl2M0IsR0FBQSxDQUFJYyxJQUFBLEtBQVNzL0IsT0FBQSxFQUFTO1FBQ3hCLE1BQU0sSUFBSXovQixVQUFBLENBQVcsdUJBQXVCeS9CLE9BQUEsR0FBVSx3QkFBd0JwZ0MsR0FBQSxDQUFJYyxJQUFBLEdBQU8sS0FBSzRsQyxZQUFZO01BQzVHO01BR0EsT0FBT3ZnQixNQUFBO0lBQ1Q7SUFFQSxPQUFPO01BQ0xoakIsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU0rZCxNQUFBLENBQU8vZCxJQUFBO01BQ2JsUyxJQUFBLEVBQU1zL0IsT0FBQTtNQUNOa0c7SUFDRjtFQUNGO0FBRUYsQ0FBQztBQUlELElBQUlLLGFBQUEsR0FBZ0JBLENBQUN6akMsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0VBQ3RDLElBQUlxTSxJQUFBLEdBQU83UCxLQUFBLENBQU02UCxJQUFBO0VBQ2pCLElBQUlzZSxVQUFBLEdBQWEzcUIsT0FBQSxDQUFReU8sUUFBQSxDQUFTcEMsSUFBSTtFQUN0QyxPQUFPcVMsWUFBQSxDQUFhbGlCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNaXVCLFVBQVU7QUFDNUM7QUFFQSxJQUFJdVYsZUFBQSxHQUFrQkEsQ0FBQzFqQyxLQUFBLEVBQU93RCxPQUFBLEtBQVk7RUFDeEMsSUFBSXFNLElBQUEsR0FBTzdQLEtBQUEsQ0FBTTZQLElBQUE7RUFDakIsSUFBSXNlLFVBQUEsR0FBYTNxQixPQUFBLENBQVF5TyxRQUFBLENBQVNwQyxJQUFJO0VBQ3RDLE9BQU84VixXQUFBLENBQVczbEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1pdUIsVUFBVTtBQUMxQztBQUVBLElBQUl3VixXQUFBLEdBQWM7RUFDaEIsU0FBUztFQUNULFVBQVU7RUFDVixVQUFVO0VBQ1YsUUFBUTtBQUNWO0FBQ0E1akIsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FDUCxZQUFZLFlBQVksWUFBWSxnQkFDcEMsWUFBWSxhQUFhLGNBQWMsYUFBYSxZQUFZLFlBQ2hFLFNBQVMsVUFBVSxTQUFRO0VBQzNCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RFLGlCQUFBLEVBQW1CO0VBQ3JCO0VBQ0FQLE9BQUEsRUFBU0EsQ0FBQ0gsSUFBQSxFQUFNMk4sSUFBQSxLQUFTO0lBQ3ZCLElBQUk7TUFDRkUsTUFBQTtNQUNBRDtJQUNGLElBQUk1TixJQUFBO0lBQ0osSUFBSTlmLElBQUEsR0FBT2doQixpQkFBQSxDQUFrQnlNLElBQUEsQ0FBSyxFQUFFO0lBQ3BDLElBQUlpVyxJQUFBLEdBQU9oVyxRQUFBO0lBRVgsSUFBSWdXLElBQUEsSUFBUUQsV0FBQSxFQUFhO01BQ3ZCQyxJQUFBLEdBQU9ELFdBQUEsQ0FBWUMsSUFBQTtJQUNyQjtJQUVBLE9BQU87TUFDTDNqQyxJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYkQsSUFBQSxFQUFNK3pCLElBQUEsQ0FBS3psQyxLQUFBLENBQU0sQ0FBQztNQUNsQitCO0lBQ0Y7RUFDRjtFQUNBa2dCLFdBQUEsRUFBYXFqQixhQUFBO0VBQ2JuakIsYUFBQSxFQUFlb2pCO0FBQ2pCLENBQUM7QUFDRDNqQixjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLGdCQUFnQixNQUFNO0VBQzlCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0VBQ1g7RUFDQUwsT0FBQSxFQUFTQSxDQUFDYyxLQUFBLEVBQU8wTSxJQUFBLEtBQVM7SUFDeEIsSUFBSTtNQUNGRTtJQUNGLElBQUk1TSxLQUFBO0lBQ0osSUFBSS9nQixJQUFBLEdBQU95dEIsSUFBQSxDQUFLO0lBQ2hCLElBQUlrVyxlQUFBLEdBQWlCOWlDLEtBQUEsQ0FBTVosY0FBQSxDQUFlRCxJQUFJO0lBRzlDLE9BQU87TUFDTEQsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU0rZCxNQUFBLENBQU8vZCxJQUFBO01BQ2JvZixNQUFBLEVBQVFJLFdBQUEsQ0FBWXB2QixJQUFJO01BQ3hCQSxJQUFBLEVBQU0sQ0FBQztRQUNMRCxJQUFBLEVBQU07UUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7UUFDYkQsSUFBQSxFQUFNO1FBQ04zUDtNQUNGLENBQUM7TUFDREMsY0FBQSxFQUFnQjBqQztJQUNsQjtFQUNGO0FBQ0YsQ0FBQztBQUVEOWpCLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsUUFBUSxRQUFRLFFBQVEsUUFBUSxRQUFRLE9BQU87RUFDdkRDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7SUFDVEcsYUFBQSxFQUFlO0VBQ2pCO0VBQ0FSLE9BQUEsRUFBU0EsQ0FBQ3NQLEtBQUEsRUFBTzlCLElBQUEsS0FBUztJQUN4QixJQUFJO01BQ0ZFLE1BQUE7TUFDQUQsUUFBQTtNQUNBdUY7SUFDRixJQUFJMUQsS0FBQTtJQUNKLElBQUk7TUFDRjNmO0lBQ0YsSUFBSStkLE1BQUE7SUFDSixJQUFJM3RCLElBQUEsR0FBTzJ0QixNQUFBLENBQU8yRCxlQUFBLENBQWdCLE1BQU0yQixnQkFBZ0I7SUFDeEQsSUFBSTltQixLQUFBLEdBQVEsU0FBU3VoQixRQUFBLENBQVN6dkIsS0FBQSxDQUFNLENBQUM7SUFDckMsT0FBTztNQUNMOEIsSUFBQSxFQUFNO01BQ042UCxJQUFBO01BQ0FELElBQUEsRUFBTXhELEtBQUE7TUFDTm5NLElBQUEsRUFBTTtRQUNKRCxJQUFBLEVBQU07UUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7UUFDYjVQO01BQ0Y7SUFDRjtFQUNGO0VBQ0FrZ0IsV0FBQSxFQUFhcWpCLGFBQUE7RUFDYm5qQixhQUFBLEVBQWVvakI7QUFDakIsQ0FBQztBQUVELElBQUlJLFdBQUEsR0FBY0EsQ0FBQ3gvQixJQUFBLEVBQU15L0IsYUFBQSxLQUFrQjtFQUd6QyxJQUFJMTNCLEtBQUEsR0FBUTAzQixhQUFBO0VBRVosSUFBSXovQixJQUFBLEtBQVMsV0FBVztJQUd0QitILEtBQUEsR0FBUUEsS0FBQSxDQUFNaEksRUFBQSxJQUFNbUIsT0FBQSxDQUFRRyxNQUFBLENBQU90QixFQUFBLEdBQUtnSSxLQUFBLENBQU1oUCxJQUFBLENBQUssSUFBSW1JLE9BQUEsQ0FBUUMsT0FBQTtFQUNqRSxXQUFXbkIsSUFBQSxLQUFTLFVBQVUrSCxLQUFBLENBQU0vSCxJQUFBLEtBQVNrQixPQUFBLENBQVFDLE9BQUEsQ0FBUW5CLElBQUEsRUFBTTtJQUVqRStILEtBQUEsR0FBUTdHLE9BQUEsQ0FBUUUsSUFBQTtFQUNsQixXQUFXcEIsSUFBQSxLQUFTLFVBQVU7SUFDNUIrSCxLQUFBLEdBQVE3RyxPQUFBLENBQVFHLE1BQUE7RUFDbEIsV0FBV3JCLElBQUEsS0FBUyxnQkFBZ0I7SUFDbEMrSCxLQUFBLEdBQVE3RyxPQUFBLENBQVFJLFlBQUE7RUFDbEI7RUFFQSxPQUFPeUcsS0FBQTtBQUNUO0FBRUEsSUFBSTIzQixhQUFBLEdBQWdCQSxDQUFDaGtDLEtBQUEsRUFBT3dELE9BQUEsS0FBWTtFQUV0QyxJQUFJNkksS0FBQSxHQUFReTNCLFdBQUEsQ0FBWTlqQyxLQUFBLENBQU1zRSxJQUFBLEVBQU1kLE9BQUEsQ0FBUTZJLEtBQUs7RUFDakQsSUFBSTQzQixNQUFBLEdBQVM1M0IsS0FBQSxDQUFNMUgsT0FBQSxDQUFRO0VBQzNCLElBQUl1L0IsTUFBQSxHQUFTNzNCLEtBQUEsQ0FBTXpILE9BQUEsQ0FBUTtFQUMzQixJQUFJdXBCLFVBQUE7RUFDSkEsVUFBQSxHQUFhM3FCLE9BQUEsQ0FBUWlPLFdBQUEsQ0FBWXd5QixNQUFNO0VBQ3ZDLElBQUlFLE1BQUEsR0FBU2ppQixZQUFBLENBQWFsaUIsS0FBQSxDQUFNb2tDLEtBQUEsRUFBT2pXLFVBQUEsRUFBWTNxQixPQUFPO0VBRTFELElBQUl4RCxLQUFBLENBQU1xa0MsU0FBQSxFQUFXO0lBR25CLElBQUlDLE1BQUEsR0FBUyxNQUFNOWdDLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFdEQsT0FBQTtJQUN6QyxJQUFJcTFCLE1BQUEsR0FBUyxNQUFNL2dDLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFdEQsT0FBQTtJQUN6Q2kxQixNQUFBLENBQU9oOEIsTUFBQSxHQUFTZzhCLE1BQUEsQ0FBT2g4QixNQUFBLEdBQVNtOEIsTUFBQSxHQUFTQSxNQUFBLEdBQVNILE1BQUEsQ0FBT2g4QixNQUFBO0lBQ3pEZzhCLE1BQUEsQ0FBT2g0QixLQUFBLEdBQVFnNEIsTUFBQSxDQUFPaDRCLEtBQUEsR0FBUW80QixNQUFBLEdBQVNBLE1BQUEsR0FBU0osTUFBQSxDQUFPaDRCLEtBQUE7RUFDekQ7RUFFQWdpQixVQUFBLEdBQWEzcUIsT0FBQSxDQUFRaU8sV0FBQSxDQUFZeXlCLE1BQU07RUFDdkMsSUFBSU0sTUFBQSxHQUFTdGlCLFlBQUEsQ0FBYWxpQixLQUFBLENBQU15a0MsS0FBQSxFQUFPdFcsVUFBQSxFQUFZM3FCLE9BQU87RUFDMUQsSUFBSTZhLElBQUE7RUFDSixJQUFJMGEsU0FBQTtFQUNKLElBQUkyTCxXQUFBO0VBRUosSUFBSTFrQyxLQUFBLENBQU0ya0MsVUFBQSxFQUFZO0lBQ3BCLElBQUkza0MsS0FBQSxDQUFNNGtDLE9BQUEsRUFBUztNQUNqQjdMLFNBQUEsR0FBWWhtQixhQUFBLENBQWMvUyxLQUFBLENBQU00a0MsT0FBQSxFQUFTcGhDLE9BQU87TUFDaEQ2YSxJQUFBLEdBQU9TLFdBQUEsQ0FBWXZELFlBQUEsQ0FBYSxhQUFhL1gsT0FBQSxFQUFTdTFCLFNBQVM7SUFDakUsT0FBTztNQUNMMWEsSUFBQSxHQUFPUyxXQUFBLENBQVl2RCxZQUFBLENBQWEsYUFBYS9YLE9BQU87SUFDdEQ7SUFFQXUxQixTQUFBLEdBQVkxYSxJQUFBLENBQUtsVyxNQUFBO0lBQ2pCdThCLFdBQUEsR0FBY3JtQixJQUFBLENBQUtsVyxNQUFBO0VBQ3JCLE9BQU87SUFDTGtXLElBQUEsR0FBTztJQUNQMGEsU0FBQSxHQUFZO0lBQ1oyTCxXQUFBLEdBQWNsaEMsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUU3RCxvQkFBQTtFQUN0QztFQUdBLElBQUlrMkIsUUFBQTtFQUNKLElBQUk1WCxTQUFBO0VBQ0osSUFBSTZYLFVBQUE7RUFFSixJQUFJejRCLEtBQUEsQ0FBTS9ILElBQUEsS0FBU2tCLE9BQUEsQ0FBUUMsT0FBQSxDQUFRbkIsSUFBQSxJQUFRdEUsS0FBQSxDQUFNc0UsSUFBQSxLQUFTLFdBQVc7SUFDbkV1Z0MsUUFBQSxHQUFXcmhDLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFNUUsSUFBQTtJQUVqQyxJQUFJbXJCLFNBQUEsR0FBWSxHQUFHO01BQ2pCOUwsU0FBQSxHQUFZLElBQUl5WCxXQUFBO0lBQ2xCLE9BQU87TUFDTHpYLFNBQUEsR0FBWSxJQUFJeVgsV0FBQTtJQUNsQjtJQUVBSSxVQUFBLEdBQWF0aEMsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUV6RSxNQUFBO0VBQ3JDLE9BQU87SUFDTCxJQUFJZ3JCLFNBQUEsR0FBWSxHQUFHO01BQ2pCOEwsUUFBQSxHQUFXcmhDLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFM0UsSUFBQTtNQUNqQ29mLFNBQUEsR0FBWXlYLFdBQUE7SUFDZCxPQUFPO01BQ0xHLFFBQUEsR0FBV3JoQyxPQUFBLENBQVFnUCxXQUFBLENBQVksRUFBRTFFLElBQUE7TUFDakNtZixTQUFBLEdBQVksSUFBSXlYLFdBQUE7SUFDbEI7SUFFQUksVUFBQSxHQUFhdGhDLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFeEUsTUFBQTtFQUNyQztFQUVBLElBQUkrMkIsSUFBQTtFQUVKLElBQUksQ0FBQzFtQixJQUFBLEVBQU07SUFFVCxJQUFJMm1CLGtCQUFBLEdBQXFCSCxRQUFBLEdBQVdWLE1BQUEsQ0FBT2g0QixLQUFBLElBQVNxNEIsTUFBQSxDQUFPcjhCLE1BQUEsR0FBUzI4QixVQUFBO0lBRXBFLElBQUlFLGtCQUFBLEdBQXFCL1gsU0FBQSxFQUFXO01BQ2xDNFgsUUFBQSxJQUFZLE9BQU81WCxTQUFBLEdBQVkrWCxrQkFBQTtNQUMvQkYsVUFBQSxJQUFjLE9BQU83WCxTQUFBLEdBQVkrWCxrQkFBQTtJQUNuQztJQUVBRCxJQUFBLEdBQU9qbUIsV0FBQSxDQUFZL0IsU0FBQSxDQUFVO01BQzNCVCxZQUFBLEVBQWM7TUFDZHJRLFFBQUEsRUFBVSxDQUFDO1FBQ1RoTSxJQUFBLEVBQU07UUFDTm5CLElBQUEsRUFBTTBsQyxNQUFBO1FBQ04vbkIsS0FBQSxFQUFPcW9CO01BQ1QsR0FBRztRQUNEN2tDLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNcWxDLE1BQUE7UUFDTjFuQixLQUFBLEVBQU8sQ0FBQ29vQjtNQUNWLENBQUM7SUFDSCxHQUFHcmhDLE9BQU87RUFDWixPQUFPO0lBRUwsSUFBSWtMLFVBQUEsR0FBYWxMLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFOUQsVUFBQTtJQUV2QyxJQUFJbTJCLFFBQUEsR0FBV1YsTUFBQSxDQUFPaDRCLEtBQUEsSUFBU3VDLFVBQUEsR0FBYSxNQUFNcXFCLFNBQUEsSUFBYTlMLFNBQUEsRUFBVztNQUN4RTRYLFFBQUEsSUFBWTVYLFNBQUEsSUFBYTRYLFFBQUEsR0FBV1YsTUFBQSxDQUFPaDRCLEtBQUEsSUFBU3VDLFVBQUEsR0FBYSxNQUFNcXFCLFNBQUE7SUFDekU7SUFFQSxJQUFJcnFCLFVBQUEsR0FBYSxNQUFNcXFCLFNBQUEsSUFBYXlMLE1BQUEsQ0FBT3I4QixNQUFBLEdBQVMyOEIsVUFBQSxJQUFjN1gsU0FBQSxFQUFXO01BQzNFNlgsVUFBQSxJQUFjN1gsU0FBQSxJQUFhdmUsVUFBQSxHQUFhLE1BQU1xcUIsU0FBQSxJQUFheUwsTUFBQSxDQUFPcjhCLE1BQUEsR0FBUzI4QixVQUFBO0lBQzdFO0lBRUEsSUFBSUcsUUFBQSxHQUFXLEVBQUV2MkIsVUFBQSxHQUFhLE1BQU1xcUIsU0FBQTtJQUNwQ2dNLElBQUEsR0FBT2ptQixXQUFBLENBQVkvQixTQUFBLENBQVU7TUFDM0JULFlBQUEsRUFBYztNQUNkclEsUUFBQSxFQUFVLENBQUM7UUFDVGhNLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNMGxDLE1BQUE7UUFDTi9uQixLQUFBLEVBQU9xb0I7TUFDVCxHQUFHO1FBQ0Q3a0MsSUFBQSxFQUFNO1FBQ05uQixJQUFBLEVBQU11ZixJQUFBO1FBQ041QixLQUFBLEVBQU93b0I7TUFDVCxHQUFHO1FBQ0RobEMsSUFBQSxFQUFNO1FBQ05uQixJQUFBLEVBQU1xbEMsTUFBQTtRQUNOMW5CLEtBQUEsRUFBTyxDQUFDb29CO01BQ1YsQ0FBQztJQUNILEdBQUdyaEMsT0FBTztFQUNaO0VBSUEycUIsVUFBQSxHQUFhM3FCLE9BQUEsQ0FBUWlPLFdBQUEsQ0FBWXBGLEtBQUs7RUFDdEMwNEIsSUFBQSxDQUFLNThCLE1BQUEsSUFBVWdtQixVQUFBLENBQVcvYyxjQUFBLEdBQWlCNU4sT0FBQSxDQUFRNE4sY0FBQTtFQUNuRDJ6QixJQUFBLENBQUs1NEIsS0FBQSxJQUFTZ2lCLFVBQUEsQ0FBVy9jLGNBQUEsR0FBaUI1TixPQUFBLENBQVE0TixjQUFBO0VBRWxELElBQUk4ekIsU0FBQTtFQUVKLElBQUk3NEIsS0FBQSxDQUFNL0gsSUFBQSxLQUFTa0IsT0FBQSxDQUFRQyxPQUFBLENBQVFuQixJQUFBLEVBQU07SUFDdkM0Z0MsU0FBQSxHQUFZMWhDLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFaEUsTUFBQTtFQUNwQyxXQUFXbkMsS0FBQSxDQUFNL0gsSUFBQSxLQUFTa0IsT0FBQSxDQUFRSSxZQUFBLENBQWF0QixJQUFBLEVBQU07SUFDbkQ0Z0MsU0FBQSxHQUFZMWhDLE9BQUEsQ0FBUWlPLFdBQUEsQ0FBWWpNLE9BQUEsQ0FBUUcsTUFBTSxFQUFFNk0sV0FBQSxDQUFZLEVBQUUvRCxNQUFBO0VBQ2hFLE9BQU87SUFDTHkyQixTQUFBLEdBQVkxaEMsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUUvRCxNQUFBO0VBQ3BDO0VBRUEsSUFBSTBzQixTQUFBO0VBQ0osSUFBSUUsVUFBQTtFQUVKLElBQUlyN0IsS0FBQSxDQUFNbTdCLFNBQUEsSUFBYSxNQUFNO0lBQzNCQSxTQUFBLEdBQVl4WCxpQkFBQSxDQUFrQm5nQixPQUFBLEVBQVMsQ0FBQyxPQUFPLENBQUM7RUFDbEQsT0FBTztJQUNMMjNCLFNBQUEsR0FBWWYsU0FBQSxDQUFVRyxnQkFBQSxDQUFpQnY2QixLQUFBLENBQU1tN0IsU0FBQSxFQUFXK0osU0FBQSxFQUFXLE1BQU0xaEMsT0FBQSxDQUFRaU8sV0FBQSxDQUFZcEYsS0FBSyxHQUFHck0sS0FBQSxDQUFNOFAsSUFBQSxFQUFNLENBQUMsT0FBTyxDQUFDO0VBQzVIO0VBRUEsSUFBSTlQLEtBQUEsQ0FBTXFrQyxTQUFBLEVBQVc7SUFDbkJoSixVQUFBLEdBQWF2YyxXQUFBLENBQVl6RCxRQUFBLENBQVMsRUFBRTtFQUN0QyxXQUFXcmIsS0FBQSxDQUFNcTdCLFVBQUEsSUFBYyxNQUFNO0lBQ25DQSxVQUFBLEdBQWExWCxpQkFBQSxDQUFrQm5nQixPQUFBLEVBQVMsQ0FBQyxRQUFRLENBQUM7RUFDcEQsT0FBTztJQUNMNjNCLFVBQUEsR0FBYWpCLFNBQUEsQ0FBVUcsZ0JBQUEsQ0FBaUJ2NkIsS0FBQSxDQUFNcTdCLFVBQUEsRUFBWTZKLFNBQUEsRUFBVyxNQUFNMWhDLE9BQUEsQ0FBUWlPLFdBQUEsQ0FBWXBGLEtBQUssR0FBR3JNLEtBQUEsQ0FBTThQLElBQUEsRUFBTSxDQUFDLFFBQVEsQ0FBQztFQUMvSDtFQUVBLE9BQU9nUCxXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxNQUFNLEVBQUU3QixNQUFBLENBQU8yVSxVQUFBLENBQVc5YixhQUFBLENBQWM3TyxPQUFPLENBQUMsR0FBRyxDQUFDMjNCLFNBQUEsRUFBV3JjLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLE9BQU8sR0FBRyxDQUFDMHBCLElBQUksQ0FBQyxHQUFHMUosVUFBVSxHQUFHNzNCLE9BQU87QUFDM0o7QUFFQSxJQUFJMmhDLGVBQUEsR0FBa0JBLENBQUNubEMsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0VBQ3hDLElBQUkwUSxJQUFBLEdBQU8sSUFBSStRLFVBQUEsQ0FBV0osUUFBQSxDQUFTLFNBQVMsQ0FBQ2MsV0FBQSxDQUFXM2xCLEtBQUEsQ0FBTW9rQyxLQUFBLEVBQU81Z0MsT0FBTyxHQUFHbWlCLFdBQUEsQ0FBVzNsQixLQUFBLENBQU15a0MsS0FBQSxFQUFPamhDLE9BQU8sQ0FBQyxDQUFDO0VBRWhILElBQUksQ0FBQ3hELEtBQUEsQ0FBTTJrQyxVQUFBLEVBQVk7SUFDckJ6d0IsSUFBQSxDQUFLRyxZQUFBLENBQWEsaUJBQWlCLEtBQUs7RUFDMUMsV0FBV3JVLEtBQUEsQ0FBTTRrQyxPQUFBLEVBQVM7SUFDeEIsSUFBSTdMLFNBQUEsR0FBWWhtQixhQUFBLENBQWMvUyxLQUFBLENBQU00a0MsT0FBQSxFQUFTcGhDLE9BQU87SUFDcEQwUSxJQUFBLENBQUtHLFlBQUEsQ0FBYSxpQkFBaUJmLE1BQUEsQ0FBT3lsQixTQUFTLENBQUM7RUFDdEQ7RUFFQSxJQUFJMXNCLEtBQUEsR0FBUXkzQixXQUFBLENBQVk5akMsS0FBQSxDQUFNc0UsSUFBQSxFQUFNZCxPQUFBLENBQVE2SSxLQUFLO0VBRWpELElBQUlBLEtBQUEsQ0FBTS9ILElBQUEsS0FBU2QsT0FBQSxDQUFRNkksS0FBQSxDQUFNL0gsSUFBQSxFQUFNO0lBQ3JDNFAsSUFBQSxHQUFPLElBQUkrUSxVQUFBLENBQVdKLFFBQUEsQ0FBUyxVQUFVLENBQUMzUSxJQUFJLENBQUM7SUFDL0MsSUFBSWt4QixTQUFBLEdBQVkvNEIsS0FBQSxDQUFNL0gsSUFBQSxLQUFTa0IsT0FBQSxDQUFRQyxPQUFBLENBQVFuQixJQUFBLEdBQU8sU0FBUztJQUMvRDRQLElBQUEsQ0FBS0csWUFBQSxDQUFhLGdCQUFnQit3QixTQUFTO0lBQzNDbHhCLElBQUEsQ0FBS0csWUFBQSxDQUFhLGVBQWUsR0FBRztFQUN0QztFQUVBLElBQUlyVSxLQUFBLENBQU1tN0IsU0FBQSxJQUFhLFFBQVFuN0IsS0FBQSxDQUFNcTdCLFVBQUEsSUFBYyxNQUFNO0lBQ3ZELElBQUlnSyxVQUFBLEdBQWEsRUFBQztJQUVsQixJQUFJcmxDLEtBQUEsQ0FBTW03QixTQUFBLElBQWEsTUFBTTtNQUMzQixJQUFJbUssTUFBQSxHQUFTLElBQUlyZ0IsVUFBQSxDQUFXSixRQUFBLENBQVMsTUFBTSxDQUFDLElBQUlJLFVBQUEsQ0FBV0YsUUFBQSxDQUFTL2tCLEtBQUEsQ0FBTW03QixTQUFBLENBQVUvOEIsT0FBQSxDQUFRLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztNQUN2R2tuQyxNQUFBLENBQU9qeEIsWUFBQSxDQUFhLFNBQVMsTUFBTTtNQUNuQ2d4QixVQUFBLENBQVdwakMsSUFBQSxDQUFLcWpDLE1BQU07SUFDeEI7SUFFQUQsVUFBQSxDQUFXcGpDLElBQUEsQ0FBS2lTLElBQUk7SUFFcEIsSUFBSWxVLEtBQUEsQ0FBTXE3QixVQUFBLElBQWMsTUFBTTtNQUM1QixJQUFJa0ssT0FBQSxHQUFVLElBQUl0Z0IsVUFBQSxDQUFXSixRQUFBLENBQVMsTUFBTSxDQUFDLElBQUlJLFVBQUEsQ0FBV0YsUUFBQSxDQUFTL2tCLEtBQUEsQ0FBTXE3QixVQUFBLENBQVdqOUIsT0FBQSxDQUFRLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztNQUN6R21uQyxPQUFBLENBQVFseEIsWUFBQSxDQUFhLFNBQVMsTUFBTTtNQUNwQ2d4QixVQUFBLENBQVdwakMsSUFBQSxDQUFLc2pDLE9BQU87SUFDekI7SUFFQSxPQUFPbmdCLE9BQUEsQ0FBUWlnQixVQUFVO0VBQzNCO0VBRUEsT0FBT254QixJQUFBO0FBQ1Q7QUFFQTZMLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsV0FBVyxVQUFVLFdBQVcsWUFBWSxXQUFXLFlBQVksZ0JBQzNFLGlCQUFpQixnQkFDakI7RUFDQUMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNURSxpQkFBQSxFQUFtQjtFQUNyQjtFQUNBUCxPQUFBLEVBQVNBLENBQUNILElBQUEsRUFBTTJOLElBQUEsS0FBUztJQUN2QixJQUFJO01BQ0ZFLE1BQUE7TUFDQUQ7SUFDRixJQUFJNU4sSUFBQTtJQUNKLElBQUlva0IsS0FBQSxHQUFRelcsSUFBQSxDQUFLO0lBQ2pCLElBQUk4VyxLQUFBLEdBQVE5VyxJQUFBLENBQUs7SUFDakIsSUFBSWdYLFVBQUE7SUFDSixJQUFJeEosU0FBQSxHQUFZO0lBQ2hCLElBQUlFLFVBQUEsR0FBYTtJQUNqQixJQUFJLzJCLElBQUEsR0FBTztJQUVYLFFBQVFzcEIsUUFBQTtNQUFBLEtBQ0Q7TUFBQSxLQUNBO01BQUEsS0FDQTtRQUNIK1csVUFBQSxHQUFhO1FBQ2I7TUFBQSxLQUVHO1FBQ0hBLFVBQUEsR0FBYTtRQUNiO01BQUEsS0FFRztNQUFBLEtBQ0E7TUFBQSxLQUNBO1FBQ0hBLFVBQUEsR0FBYTtRQUNieEosU0FBQSxHQUFZO1FBQ1pFLFVBQUEsR0FBYTtRQUNiO01BQUEsS0FFRztRQUNIc0osVUFBQSxHQUFhO1FBQ2J4SixTQUFBLEdBQVk7UUFDWkUsVUFBQSxHQUFhO1FBQ2I7TUFBQSxLQUVHO1FBQ0hzSixVQUFBLEdBQWE7UUFDYnhKLFNBQUEsR0FBWTtRQUNaRSxVQUFBLEdBQWE7UUFDYjtNQUFBO1FBR0EsTUFBTSxJQUFJNzhCLEtBQUEsQ0FBTSw4QkFBOEI7SUFBQTtJQUdsRCxRQUFRb3ZCLFFBQUE7TUFBQSxLQUNEO01BQUEsS0FDQTtRQUNIdHBCLElBQUEsR0FBTztRQUNQO01BQUEsS0FFRztNQUFBLEtBQ0E7UUFDSEEsSUFBQSxHQUFPO1FBQ1A7SUFBQTtJQUdKLE9BQU87TUFDTHJFLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNidTBCLFNBQUEsRUFBVztNQUNYRCxLQUFBO01BQ0FLLEtBQUE7TUFDQUUsVUFBQTtNQUNBeEosU0FBQTtNQUNBRSxVQUFBO01BQ0EvMkIsSUFBQTtNQUNBc2dDLE9BQUEsRUFBUztJQUNYO0VBQ0Y7RUFDQXhrQixXQUFBLEVBQWE0akIsYUFBQTtFQUNiMWpCLGFBQUEsRUFBZTZrQjtBQUNqQixDQUFDO0FBQ0RwbEIsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxTQUFTO0VBQ2pCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0VBQ1g7RUFDQUwsT0FBQSxFQUFTQSxDQUFDYyxLQUFBLEVBQU8wTSxJQUFBLEtBQVM7SUFDeEIsSUFBSTtNQUNGRSxNQUFBO01BQ0FEO0lBQ0YsSUFBSTNNLEtBQUE7SUFDSixJQUFJbWpCLEtBQUEsR0FBUXpXLElBQUEsQ0FBSztJQUNqQixJQUFJOFcsS0FBQSxHQUFROVcsSUFBQSxDQUFLO0lBQ2pCLE9BQU87TUFDTDF0QixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYnUwQixTQUFBLEVBQVc7TUFDWEQsS0FBQTtNQUNBSyxLQUFBO01BQ0FFLFVBQUEsRUFBWTtNQUNaeEosU0FBQSxFQUFXO01BQ1hFLFVBQUEsRUFBWTtNQUNaLzJCLElBQUEsRUFBTTtNQUNOc2dDLE9BQUEsRUFBUztJQUNYO0VBQ0Y7QUFDRixDQUFDO0FBR0Q3a0IsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxVQUFVLFlBQVksVUFBVSxXQUFXLFNBQVM7RUFDNURDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7SUFDVE0sS0FBQSxFQUFPO0VBQ1Q7RUFFQVgsUUFBUXNQLEtBQUEsRUFBTztJQUNiLElBQUk7TUFDRjVCLE1BQUE7TUFDQUQsUUFBQTtNQUNBandCO0lBQ0YsSUFBSTh4QixLQUFBO0lBQ0osSUFBSStWLFdBQUE7SUFFSixRQUFRNVgsUUFBQTtNQUFBLEtBQ0Q7UUFDSDRYLFdBQUEsR0FBYztRQUNkO01BQUEsS0FFRztRQUNIQSxXQUFBLEdBQWM7UUFDZDtNQUFBLEtBRUc7UUFDSEEsV0FBQSxHQUFjO1FBQ2Q7TUFBQSxLQUVHO1FBQ0hBLFdBQUEsR0FBYztRQUNkO01BQUEsS0FFRztRQUNIQSxXQUFBLEdBQWM7UUFDZDtNQUFBO1FBR0EsTUFBTSxJQUFJaG5DLEtBQUEsQ0FBTSxvQ0FBb0M7SUFBQTtJQUd4RCxPQUFPO01BQ0x5QixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYjAxQixXQUFBO01BQ0E3bkM7SUFDRjtFQUNGO0FBRUYsQ0FBQztBQUNELElBQUk4bkMsU0FBQSxHQUFZLENBQUMsV0FBVyxRQUFRLFVBQVUsY0FBYztBQUU1RCxJQUFJQyxjQUFBLEdBQWlCLFNBQVNDLGdCQUFlQyxXQUFBLEVBQWE7RUFDeEQsSUFBSXpRLEtBQUEsR0FBUTtFQUVaLElBQUl5USxXQUFBLENBQVk5bkMsTUFBQSxHQUFTLEdBQUc7SUFDMUJxM0IsS0FBQSxHQUFReVEsV0FBQTtJQUNSelEsS0FBQSxHQUFRQSxLQUFBLEtBQVUsTUFBTSxPQUFPQSxLQUFBO0VBQ2pDO0VBRUEsT0FBT0EsS0FBQTtBQUNUO0FBRUFwVixjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLFdBQVc7RUFDbkJDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7SUFDVEUsaUJBQUEsRUFBbUI7SUFDbkJELFFBQUEsRUFBVSxDQUFDLFFBQVEsUUFBUSxRQUFRLFFBQVEsUUFBUSxNQUFNO0VBQzNEO0VBRUFOLFFBQVF5VSxLQUFBLEVBQU9qSCxJQUFBLEVBQU07SUFDbkIsSUFBSTtNQUNGRTtJQUNGLElBQUkrRyxLQUFBO0lBQ0osSUFBSXdQLEtBQUEsR0FBUXpXLElBQUEsQ0FBSztJQUNqQixJQUFJOFcsS0FBQSxHQUFROVcsSUFBQSxDQUFLO0lBRWpCLElBQUk0TixRQUFBLEdBQVdyYSxpQkFBQSxDQUFrQnlNLElBQUEsQ0FBSyxFQUFFO0lBQ3hDLElBQUl3TixTQUFBLEdBQVlJLFFBQUEsQ0FBU3Q3QixJQUFBLEtBQVMsVUFBVXM3QixRQUFBLENBQVMvTCxNQUFBLEtBQVcsU0FBU2tXLGNBQUEsQ0FBZW5LLFFBQUEsQ0FBU2wrQixJQUFJLElBQUk7SUFDekcsSUFBSW0rQixTQUFBLEdBQVl0YSxpQkFBQSxDQUFrQnlNLElBQUEsQ0FBSyxFQUFFO0lBQ3pDLElBQUkwTixVQUFBLEdBQWFHLFNBQUEsQ0FBVXY3QixJQUFBLEtBQVMsVUFBVXU3QixTQUFBLENBQVVoTSxNQUFBLEtBQVcsVUFBVWtXLGNBQUEsQ0FBZWxLLFNBQUEsQ0FBVW4rQixJQUFJLElBQUk7SUFDOUcsSUFBSXdvQyxPQUFBLEdBQVV2WixjQUFBLENBQWVxQixJQUFBLENBQUssSUFBSSxNQUFNO0lBQzVDLElBQUlnWCxVQUFBO0lBQ0osSUFBSUMsT0FBQSxHQUFVO0lBRWQsSUFBSWlCLE9BQUEsQ0FBUUMsT0FBQSxFQUFTO01BSW5CbkIsVUFBQSxHQUFhO0lBQ2YsT0FBTztNQUNMQyxPQUFBLEdBQVVpQixPQUFBLENBQVFybEMsS0FBQTtNQUNsQm1rQyxVQUFBLEdBQWFDLE9BQUEsQ0FBUXZ4QixNQUFBLEdBQVM7SUFDaEM7SUFHQSxJQUFJL08sSUFBQSxHQUFPO0lBQ1gsSUFBSXloQyxJQUFBLEdBQU9wWSxJQUFBLENBQUs7SUFFaEIsSUFBSW9ZLElBQUEsQ0FBSzlsQyxJQUFBLEtBQVMsWUFBWTtNQUM1QixJQUFJOGxDLElBQUEsQ0FBSzdsQyxJQUFBLENBQUtwQyxNQUFBLEdBQVMsR0FBRztRQUN4QixJQUFJa29DLE9BQUEsR0FBVTFaLGNBQUEsQ0FBZXlaLElBQUEsQ0FBSzdsQyxJQUFBLENBQUssSUFBSSxTQUFTO1FBQ3BEb0UsSUFBQSxHQUFPbWhDLFNBQUEsQ0FBVWpELE1BQUEsQ0FBT3dELE9BQUEsQ0FBUTNvQyxJQUFJO01BQ3RDO0lBQ0YsT0FBTztNQUNMMG9DLElBQUEsR0FBT3paLGNBQUEsQ0FBZXlaLElBQUEsRUFBTSxTQUFTO01BQ3JDemhDLElBQUEsR0FBT21oQyxTQUFBLENBQVVqRCxNQUFBLENBQU91RCxJQUFBLENBQUsxb0MsSUFBSTtJQUNuQztJQUVBLE9BQU87TUFDTDRDLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiczBCLEtBQUE7TUFDQUssS0FBQTtNQUNBSixTQUFBLEVBQVc7TUFDWE0sVUFBQTtNQUNBQyxPQUFBO01BQ0F6SixTQUFBO01BQ0FFLFVBQUE7TUFDQS8yQjtJQUNGO0VBQ0Y7RUFFQThiLFdBQUEsRUFBYTRqQixhQUFBO0VBQ2IxakIsYUFBQSxFQUFlNmtCO0FBQ2pCLENBQUM7QUFFRHBsQixjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLFNBQVM7RUFDakJDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7SUFDVEMsUUFBQSxFQUFVLENBQUMsTUFBTTtJQUNqQkssS0FBQSxFQUFPO0VBQ1Q7RUFFQVgsUUFBUXNjLEtBQUEsRUFBTzlPLElBQUEsRUFBTTtJQUNuQixJQUFJO01BQ0ZFLE1BQUE7TUFDQUQsUUFBQTtNQUNBandCO0lBQ0YsSUFBSTgrQixLQUFBO0lBQ0osT0FBTztNQUNMeDhCLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiMDFCLFdBQUEsRUFBYTtNQUNibGhDLElBQUEsRUFBTWdvQixjQUFBLENBQWVxQixJQUFBLENBQUssSUFBSSxNQUFNLEVBQUVudEIsS0FBQTtNQUN0QzdDO0lBQ0Y7RUFDRjtBQUVGLENBQUM7QUFDRG9pQixjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLGVBQWU7RUFDdkJDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7SUFDVEMsUUFBQSxFQUFVLENBQUMsUUFBUSxRQUFRLE1BQU07RUFDbkM7RUFDQU4sT0FBQSxFQUFTQSxDQUFDOGxCLEtBQUEsRUFBT3RZLElBQUEsS0FBUztJQUN4QixJQUFJO01BQ0ZFLE1BQUE7TUFDQUQ7SUFDRixJQUFJcVksS0FBQTtJQUNKLElBQUk3QixLQUFBLEdBQVF6VyxJQUFBLENBQUs7SUFDakIsSUFBSWlYLE9BQUEsR0FBVXRrQyxNQUFBLENBQU9nc0IsY0FBQSxDQUFlcUIsSUFBQSxDQUFLLElBQUksT0FBTyxFQUFFcnBCLElBQUk7SUFDMUQsSUFBSW1nQyxLQUFBLEdBQVE5VyxJQUFBLENBQUs7SUFDakIsSUFBSWdYLFVBQUEsR0FBYUMsT0FBQSxDQUFRdnhCLE1BQUEsR0FBUztJQUNsQyxPQUFPO01BQ0xwVCxJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYnMwQixLQUFBO01BQ0FLLEtBQUE7TUFDQUosU0FBQSxFQUFXO01BQ1hNLFVBQUE7TUFDQUMsT0FBQTtNQUNBekosU0FBQSxFQUFXO01BQ1hFLFVBQUEsRUFBWTtNQUNaLzJCLElBQUEsRUFBTTtJQUNSO0VBQ0Y7RUFDQThiLFdBQUEsRUFBYTRqQixhQUFBO0VBQ2IxakIsYUFBQSxFQUFlNmtCO0FBQ2pCLENBQUM7QUFJRCxJQUFJZSxhQUFBLEdBQWdCQSxDQUFDeGIsR0FBQSxFQUFLbG5CLE9BQUEsS0FBWTtFQUNwQyxJQUFJNkksS0FBQSxHQUFRN0ksT0FBQSxDQUFRNkksS0FBQTtFQUVwQixJQUFJc2dCLFdBQUE7RUFDSixJQUFJM3NCLEtBQUE7RUFFSixJQUFJMHFCLEdBQUEsQ0FBSXpxQixJQUFBLEtBQVMsVUFBVTtJQUl6QjBzQixXQUFBLEdBQWNqQyxHQUFBLENBQUlsbUIsR0FBQSxHQUFNMGQsWUFBQSxDQUFhd0ksR0FBQSxDQUFJbG1CLEdBQUEsRUFBS2hCLE9BQUEsQ0FBUWlPLFdBQUEsQ0FBWXBGLEtBQUEsQ0FBTTdILEdBQUEsQ0FBSSxDQUFDLEdBQUdoQixPQUFPLElBQUkwZSxZQUFBLENBQWF3SSxHQUFBLENBQUlobUIsR0FBQSxFQUFLbEIsT0FBQSxDQUFRaU8sV0FBQSxDQUFZcEYsS0FBQSxDQUFNM0gsR0FBQSxDQUFJLENBQUMsR0FBR2xCLE9BQU87SUFDMUp4RCxLQUFBLEdBQVFzc0IsY0FBQSxDQUFlNUIsR0FBQSxDQUFJRSxJQUFBLEVBQU0sWUFBWTtFQUMvQyxPQUFPO0lBQ0w1cUIsS0FBQSxHQUFRc3NCLGNBQUEsQ0FBZTVCLEdBQUEsRUFBSyxZQUFZO0VBQzFDO0VBR0EsSUFBSXhxQixJQUFBLEdBQU9naUIsWUFBQSxDQUFhbGlCLEtBQUEsQ0FBTTRxQixJQUFBLEVBQU1wbkIsT0FBQSxDQUFRb08sZUFBQSxDQUFnQnBNLE9BQUEsQ0FBUUMsT0FBTyxDQUFDO0VBRTVFLElBQUkwZ0MsU0FBQSxHQUFZOVosUUFBQSxDQUFTL0IsT0FBQSxDQUFRdHFCLEtBQUEsRUFBT3dELE9BQU87RUFHL0MsSUFBSXFhLEtBQUE7RUFFSixJQUFJN2QsS0FBQSxDQUFNb21DLE1BQUEsRUFBUTtJQUNoQnZvQixLQUFBLEdBQVFpQixXQUFBLENBQVkvQixTQUFBLENBQVU7TUFDNUJULFlBQUEsRUFBYztNQUNkclEsUUFBQSxFQUFVLENBQUM7UUFDVGhNLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNb0I7TUFDUixHQUFHO1FBQ0RELElBQUEsRUFBTTtRQUNOcUUsSUFBQSxFQUFNO01BQ1IsR0FBRztRQUNEckUsSUFBQSxFQUFNO1FBQ05uQixJQUFBLEVBQU1xbkM7TUFDUixDQUFDO0lBQ0gsR0FBRzNpQyxPQUFPO0lBRVZxYSxLQUFBLENBQU01UixRQUFBLENBQVMsR0FBR0EsUUFBQSxDQUFTLEdBQUdBLFFBQUEsQ0FBUyxHQUFHQyxPQUFBLENBQVFqSyxJQUFBLENBQUssV0FBVztFQUNwRSxPQUFPO0lBQ0w0YixLQUFBLEdBQVFpQixXQUFBLENBQVkvQixTQUFBLENBQVU7TUFDNUJULFlBQUEsRUFBYztNQUNkTyxZQUFBLEVBQWMzYyxJQUFBLENBQUtpTSxLQUFBLEdBQVEsTUFBTWc2QixTQUFBLENBQVVoK0IsTUFBQTtNQUMzQzhELFFBQUEsRUFBVSxDQUFDO1FBQ1RoTSxJQUFBLEVBQU07UUFDTm5CLElBQUEsRUFBTXFuQztNQUNSLEdBQUc7UUFDRGxtQyxJQUFBLEVBQU07UUFDTnFFLElBQUEsRUFBTTtNQUNSLEdBQUc7UUFDRHJFLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNb0I7TUFDUixDQUFDO0lBQ0gsR0FBR3NELE9BQU87SUFFVnFhLEtBQUEsQ0FBTTVSLFFBQUEsQ0FBUyxHQUFHQSxRQUFBLENBQVMsR0FBR0EsUUFBQSxDQUFTLEdBQUdDLE9BQUEsQ0FBUWpLLElBQUEsQ0FBSyxXQUFXO0VBQ3BFO0VBRUEsSUFBSTBxQixXQUFBLEVBQWE7SUFRZixJQUFJMFosS0FBQSxHQUFRdm5CLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLFFBQVFyYixLQUFBLENBQU1vbUMsTUFBQSxHQUFTLFVBQVUsUUFBUSxHQUFHLENBQUN2b0IsS0FBSyxHQUFHcmEsT0FBTztJQUU5RixJQUFJeEQsS0FBQSxDQUFNb21DLE1BQUEsRUFBUTtNQUNoQnZvQixLQUFBLEdBQVFpQixXQUFBLENBQVkvQixTQUFBLENBQVU7UUFDNUJULFlBQUEsRUFBYztRQUNkclEsUUFBQSxFQUFVLENBQUM7VUFDVGhNLElBQUEsRUFBTTtVQUNObkIsSUFBQSxFQUFNdW5DO1FBQ1IsR0FBRztVQUNEcG1DLElBQUEsRUFBTTtVQUNOcUUsSUFBQSxFQUFNO1FBQ1IsR0FBRztVQUNEckUsSUFBQSxFQUFNO1VBQ05uQixJQUFBLEVBQU02dEI7UUFDUixDQUFDO01BQ0gsR0FBR25wQixPQUFPO0lBQ1osT0FBTztNQUNMcWEsS0FBQSxHQUFRaUIsV0FBQSxDQUFZL0IsU0FBQSxDQUFVO1FBQzVCVCxZQUFBLEVBQWM7UUFDZE8sWUFBQSxFQUFjd3BCLEtBQUEsQ0FBTWw2QixLQUFBLEdBQVEsTUFBTXdnQixXQUFBLENBQVl4a0IsTUFBQSxHQUFTd2tCLFdBQUEsQ0FBWXhnQixLQUFBO1FBQ25FRixRQUFBLEVBQVUsQ0FBQztVQUNUaE0sSUFBQSxFQUFNO1VBQ05uQixJQUFBLEVBQU02dEI7UUFDUixHQUFHO1VBQ0Qxc0IsSUFBQSxFQUFNO1VBQ05xRSxJQUFBLEVBQU07UUFDUixHQUFHO1VBQ0RyRSxJQUFBLEVBQU07VUFDTm5CLElBQUEsRUFBTXVuQztRQUNSLENBQUM7TUFDSCxHQUFHN2lDLE9BQU87SUFDWjtFQUNGO0VBRUEsT0FBT3NiLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLFFBQVFyYixLQUFBLENBQU1vbUMsTUFBQSxHQUFTLFVBQVUsUUFBUSxHQUFHLENBQUN2b0IsS0FBSyxHQUFHcmEsT0FBTztBQUMzRjtBQUVBLElBQUk4aUMsZUFBQSxHQUFrQkEsQ0FBQ3RtQyxLQUFBLEVBQU93RCxPQUFBLEtBQVk7RUFDeEMsSUFBSWdxQixVQUFBLEdBQWFuQixRQUFBLENBQVN0QyxVQUFBLENBQVcvcEIsS0FBQSxDQUFNOEwsS0FBSztFQUNoRCxPQUFPLElBQUltWixVQUFBLENBQVdKLFFBQUEsQ0FBUzdrQixLQUFBLENBQU1vbUMsTUFBQSxHQUFTLFVBQVUsVUFBVSxDQUFDemdCLFdBQUEsQ0FBVzNsQixLQUFBLENBQU00cUIsSUFBQSxFQUFNcG5CLE9BQU8sR0FBR2dxQixVQUFVLENBQUM7QUFDakg7QUFHQXpOLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsZUFBZSxjQUFjO0VBQ3JDQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0VBQ1g7RUFFQUwsUUFBUUgsSUFBQSxFQUFNMk4sSUFBQSxFQUFNO0lBQ2xCLElBQUk7TUFDRkUsTUFBQTtNQUNBRDtJQUNGLElBQUk1TixJQUFBO0lBQ0osT0FBTztNQUNML2YsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU0rZCxNQUFBLENBQU8vZCxJQUFBO01BQ2JoRSxLQUFBLEVBQU84aEIsUUFBQTtNQUNQd1ksTUFBQSxFQUFRLFVBQVV0bEMsSUFBQSxDQUFLOHNCLFFBQVE7TUFDL0JoRCxJQUFBLEVBQU0rQyxJQUFBLENBQUs7SUFDYjtFQUNGO0VBRUF2TixXQUFBLEVBQWE4bEIsYUFBQTtFQUNiNWxCLGFBQUEsRUFBZWdtQjtBQUNqQixDQUFDO0FBRUR2bUIsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxRQUFRO0VBQ2hCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RDLFFBQUEsRUFBVSxDQUFDLE9BQU8sVUFBVTtJQUM1QkUsYUFBQSxFQUFlO0VBQ2pCO0VBQ0FSLE9BQUEsRUFBU0EsQ0FBQ0gsSUFBQSxFQUFNMk4sSUFBQSxLQUFTO0lBQ3ZCLElBQUk7TUFDRkU7SUFDRixJQUFJN04sSUFBQTtJQUNKLElBQUk5ZixJQUFBLEdBQU95dEIsSUFBQSxDQUFLO0lBQ2hCLElBQUkvWSxJQUFBLEdBQU8wWCxjQUFBLENBQWVxQixJQUFBLENBQUssSUFBSSxLQUFLLEVBQUVodEIsR0FBQTtJQUUxQyxJQUFJLENBQUNrdEIsTUFBQSxDQUFPaEgsUUFBQSxDQUFTNWlCLFNBQUEsQ0FBVTtNQUM3QnNpQyxPQUFBLEVBQVM7TUFDVDVsQyxHQUFBLEVBQUtpVTtJQUNQLENBQUMsR0FBRztNQUNGLE9BQU9pWixNQUFBLENBQU8yWSxvQkFBQSxDQUFxQixRQUFRO0lBQzdDO0lBRUEsT0FBTztNQUNMdm1DLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiOEUsSUFBQTtNQUNBMVUsSUFBQSxFQUFNbWhCLFdBQUEsQ0FBWW5oQixJQUFJO0lBQ3hCO0VBQ0Y7RUFDQWtnQixXQUFBLEVBQWFBLENBQUNwZ0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBQy9CLElBQUl5ckIsUUFBQSxHQUFXck4saUJBQUEsQ0FBa0I1aEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFBLEVBQVMsS0FBSztJQUMzRCxPQUFPc2IsV0FBQSxDQUFZbEQsVUFBQSxDQUFXNWIsS0FBQSxDQUFNNFUsSUFBQSxFQUFNLEVBQUMsRUFBR3FhLFFBQUEsRUFBVXpyQixPQUFPO0VBQ2pFO0VBQ0E4YyxhQUFBLEVBQWVBLENBQUN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBQ2pDLElBQUlpakIsS0FBQSxHQUFPVixrQkFBQSxDQUFtQi9sQixLQUFBLENBQU1FLElBQUEsRUFBTXNELE9BQU87SUFFakQsSUFBSSxFQUFFaWpCLEtBQUEsWUFBZ0I1QixRQUFBLEdBQVc7TUFDL0I0QixLQUFBLEdBQU8sSUFBSTVCLFFBQUEsQ0FBUyxRQUFRLENBQUM0QixLQUFJLENBQUM7SUFDcEM7SUFFQUEsS0FBQSxDQUFLcFMsWUFBQSxDQUFhLFFBQVFyVSxLQUFBLENBQU00VSxJQUFJO0lBQ3BDLE9BQU82UixLQUFBO0VBQ1Q7QUFDRixDQUFDO0FBQ0QxRyxjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLE9BQU87RUFDZkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNUQyxRQUFBLEVBQVUsQ0FBQyxLQUFLO0lBQ2hCRSxhQUFBLEVBQWU7RUFDakI7RUFDQVIsT0FBQSxFQUFTQSxDQUFDYyxLQUFBLEVBQU8wTSxJQUFBLEtBQVM7SUFDeEIsSUFBSTtNQUNGRTtJQUNGLElBQUk1TSxLQUFBO0lBQ0osSUFBSXJNLElBQUEsR0FBTzBYLGNBQUEsQ0FBZXFCLElBQUEsQ0FBSyxJQUFJLEtBQUssRUFBRWh0QixHQUFBO0lBRTFDLElBQUksQ0FBQ2t0QixNQUFBLENBQU9oSCxRQUFBLENBQVM1aUIsU0FBQSxDQUFVO01BQzdCc2lDLE9BQUEsRUFBUztNQUNUNWxDLEdBQUEsRUFBS2lVO0lBQ1AsQ0FBQyxHQUFHO01BQ0YsT0FBT2laLE1BQUEsQ0FBTzJZLG9CQUFBLENBQXFCLE9BQU87SUFDNUM7SUFFQSxJQUFJeHJCLEtBQUEsR0FBUSxFQUFDO0lBRWIsU0FBUy9VLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUkyTyxJQUFBLENBQUs5VyxNQUFBLEVBQVFtSSxDQUFBLElBQUs7TUFDcEMsSUFBSWk0QixDQUFBLEdBQUl0cEIsSUFBQSxDQUFLM08sQ0FBQTtNQUViLElBQUlpNEIsQ0FBQSxLQUFNLEtBQUs7UUFDYkEsQ0FBQSxHQUFJO01BQ047TUFFQWxqQixLQUFBLENBQU0vWSxJQUFBLENBQUs7UUFDVGhDLElBQUEsRUFBTTtRQUNONlAsSUFBQSxFQUFNO1FBQ056UyxJQUFBLEVBQU02Z0M7TUFDUixDQUFDO0lBQ0g7SUFFQSxJQUFJaCtCLElBQUEsR0FBTztNQUNURCxJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYkQsSUFBQSxFQUFNO01BQ04zUCxJQUFBLEVBQU04YTtJQUNSO0lBQ0EsT0FBTztNQUNML2EsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU0rZCxNQUFBLENBQU8vZCxJQUFBO01BQ2I4RSxJQUFBO01BQ0ExVSxJQUFBLEVBQU1taEIsV0FBQSxDQUFZbmhCLElBQUk7SUFDeEI7RUFDRjtBQUNGLENBQUM7QUFNRDZmLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsUUFBUTtFQUNoQkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNUQyxRQUFBLEVBQVUsQ0FBQyxNQUFNO0lBQ2pCRSxhQUFBLEVBQWU7SUFDZkksU0FBQSxFQUFXO0VBQ2I7RUFFQVosUUFBUUgsSUFBQSxFQUFNMk4sSUFBQSxFQUFNO0lBQ2xCLElBQUk7TUFDRkU7SUFDRixJQUFJN04sSUFBQTtJQUNKLE9BQU87TUFDTC9mLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiNVAsSUFBQSxFQUFNbWhCLFdBQUEsQ0FBWXNNLElBQUEsQ0FBSyxFQUFFO0lBQzNCO0VBQ0Y7RUFFQXZOLFlBQVlwZ0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBQzFCLElBQUl5ckIsUUFBQSxHQUFXck4saUJBQUEsQ0FBa0I1aEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFBLEVBQVMsS0FBSztJQUMzRCxPQUFPc2IsV0FBQSxDQUFZdkUsWUFBQSxDQUFhMFUsUUFBUTtFQUMxQztFQUVBM08sY0FBY3RnQixLQUFBLEVBQU93RCxPQUFBLEVBQVM7SUFDNUIsT0FBTyxJQUFJeWhCLFVBQUEsQ0FBV0osUUFBQSxDQUFTLFFBQVFXLGdCQUFBLENBQWdCeGxCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNc0QsT0FBTyxDQUFDO0VBQzdFO0FBRUYsQ0FBQztBQUVEdWMsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxlQUFlLFlBQVksZUFBZSxZQUFZO0VBQzlEQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RDLFFBQUEsRUFBVSxDQUFDLE9BQU8sVUFBVTtJQUM1QkUsYUFBQSxFQUFlO0VBQ2pCO0VBQ0FSLE9BQUEsRUFBU0EsQ0FBQ0gsSUFBQSxFQUFNMk4sSUFBQSxLQUFTO0lBQ3ZCLElBQUk7TUFDRkUsTUFBQTtNQUNBRCxRQUFBO01BQ0Fqd0I7SUFDRixJQUFJcWlCLElBQUE7SUFDSixJQUFJeGYsS0FBQSxHQUFROHJCLGNBQUEsQ0FBZXFCLElBQUEsQ0FBSyxJQUFJLEtBQUssRUFBRThZLE1BQUE7SUFDM0MsSUFBSXZtQyxJQUFBLEdBQU95dEIsSUFBQSxDQUFLO0lBRWhCLElBQUlFLE1BQUEsQ0FBT2hILFFBQUEsQ0FBU3BrQixNQUFBLEVBQVE7TUFDMUJvckIsTUFBQSxDQUFPaEgsUUFBQSxDQUFTbGpCLGVBQUEsQ0FBZ0IsaUJBQWlCLDJDQUEyQztJQUM5RjtJQUVBLElBQUkraUMsWUFBQTtJQUNKLElBQUkzeUIsVUFBQSxHQUFhLENBQUM7SUFFbEIsUUFBUTZaLFFBQUE7TUFBQSxLQUNEO1FBQ0g3WixVQUFBLENBQVc0eUIsS0FBQSxHQUFRbm1DLEtBQUE7UUFDbkJrbUMsWUFBQSxHQUFlO1VBQ2JILE9BQUEsRUFBUztVQUNUSSxLQUFBLEVBQU9ubUM7UUFDVDtRQUNBO01BQUEsS0FFRztRQUNIdVQsVUFBQSxDQUFXMVAsRUFBQSxHQUFLN0QsS0FBQTtRQUNoQmttQyxZQUFBLEdBQWU7VUFDYkgsT0FBQSxFQUFTO1VBQ1RsaUMsRUFBQSxFQUFJN0Q7UUFDTjtRQUNBO01BQUEsS0FFRztRQUNIdVQsVUFBQSxDQUFXMUgsS0FBQSxHQUFRN0wsS0FBQTtRQUNuQmttQyxZQUFBLEdBQWU7VUFDYkgsT0FBQSxFQUFTO1VBQ1RsNkIsS0FBQSxFQUFPN0w7UUFDVDtRQUNBO01BQUEsS0FFRztRQUNIO1VBQ0UsSUFBSXNRLElBQUEsR0FBT3RRLEtBQUEsQ0FBTW9tQyxLQUFBLENBQU0sR0FBRztVQUUxQixTQUFTM2dDLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUk2SyxJQUFBLENBQUtoVCxNQUFBLEVBQVFtSSxDQUFBLElBQUs7WUFDcEMsSUFBSTRnQyxNQUFBLEdBQVMvMUIsSUFBQSxDQUFLN0ssQ0FBQSxFQUFHMmdDLEtBQUEsQ0FBTSxHQUFHO1lBRTlCLElBQUlDLE1BQUEsQ0FBTy9vQyxNQUFBLEtBQVcsR0FBRztjQUN2QixNQUFNLElBQUlMLFVBQUEsQ0FBVyx3Q0FBd0M7WUFDL0Q7WUFFQXNXLFVBQUEsQ0FBVyxVQUFVOHlCLE1BQUEsQ0FBTyxHQUFHbkYsSUFBQSxDQUFLLEtBQUttRixNQUFBLENBQU8sR0FBR25GLElBQUEsQ0FBSztVQUMxRDtVQUVBZ0YsWUFBQSxHQUFlO1lBQ2JILE9BQUEsRUFBUztZQUNUeHlCO1VBQ0Y7VUFDQTtRQUNGO01BQUE7UUFHQSxNQUFNLElBQUl2VixLQUFBLENBQU0sMkJBQTJCO0lBQUE7SUFHL0MsSUFBSSxDQUFDcXZCLE1BQUEsQ0FBT2hILFFBQUEsQ0FBUzVpQixTQUFBLENBQVV5aUMsWUFBWSxHQUFHO01BQzVDLE9BQU83WSxNQUFBLENBQU8yWSxvQkFBQSxDQUFxQjVZLFFBQVE7SUFDN0M7SUFFQSxPQUFPO01BQ0wzdEIsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU0rZCxNQUFBLENBQU8vZCxJQUFBO01BQ2JpRSxVQUFBO01BQ0E3VCxJQUFBLEVBQU1taEIsV0FBQSxDQUFZbmhCLElBQUk7SUFDeEI7RUFDRjtFQUNBa2dCLFdBQUEsRUFBYUEsQ0FBQ3BnQixLQUFBLEVBQU93RCxPQUFBLEtBQVk7SUFDL0IsSUFBSXlyQixRQUFBLEdBQVdyTixpQkFBQSxDQUFrQjVoQixLQUFBLENBQU1FLElBQUEsRUFBTXNELE9BQUEsRUFBUyxLQUFLO0lBQzNELElBQUkwSSxPQUFBLEdBQVUsQ0FBQyxXQUFXO0lBRTFCLElBQUlsTSxLQUFBLENBQU0rVCxVQUFBLENBQVc0eUIsS0FBQSxFQUFPO01BQzFCejZCLE9BQUEsQ0FBUWpLLElBQUEsQ0FBSyxHQUFHakMsS0FBQSxDQUFNK1QsVUFBQSxDQUFXNHlCLEtBQUEsQ0FBTWpGLElBQUEsQ0FBSyxFQUFFa0YsS0FBQSxDQUFNLEtBQUssQ0FBQztJQUM1RDtJQUVBLElBQUl6eEIsSUFBQSxHQUFPMkosV0FBQSxDQUFZekQsUUFBQSxDQUFTblAsT0FBQSxFQUFTK2lCLFFBQUEsRUFBVXpyQixPQUFPO0lBRTFELFNBQVM0USxJQUFBLElBQVFwVSxLQUFBLENBQU0rVCxVQUFBLEVBQVk7TUFDakMsSUFBSUssSUFBQSxLQUFTLFdBQVdwVSxLQUFBLENBQU0rVCxVQUFBLENBQVdyUSxjQUFBLENBQWUwUSxJQUFJLEdBQUc7UUFDN0RlLElBQUEsQ0FBS2QsWUFBQSxDQUFhRCxJQUFBLEVBQU1wVSxLQUFBLENBQU0rVCxVQUFBLENBQVdLLElBQUEsQ0FBSztNQUNoRDtJQUNGO0lBRUEsT0FBT2UsSUFBQTtFQUNUO0VBQ0FtTCxhQUFBLEVBQWVBLENBQUN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBQ2pDLE9BQU91aUIsa0JBQUEsQ0FBbUIvbEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFPO0VBQy9DO0FBQ0YsQ0FBQztBQUVEdWMsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxlQUFlO0VBQ3ZCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RHLGFBQUEsRUFBZTtFQUNqQjtFQUNBUixPQUFBLEVBQVNBLENBQUNILElBQUEsRUFBTTJOLElBQUEsS0FBUztJQUN2QixJQUFJO01BQ0ZFO0lBQ0YsSUFBSTdOLElBQUE7SUFDSixPQUFPO01BQ0wvZixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYmczQixJQUFBLEVBQU16bEIsV0FBQSxDQUFZc00sSUFBQSxDQUFLLEVBQUU7TUFDekJvWixNQUFBLEVBQVExbEIsV0FBQSxDQUFZc00sSUFBQSxDQUFLLEVBQUU7SUFDN0I7RUFDRjtFQUNBdk4sV0FBQSxFQUFhQSxDQUFDcGdCLEtBQUEsRUFBT3dELE9BQUEsS0FBWTtJQUMvQixJQUFJeXJCLFFBQUEsR0FBV3JOLGlCQUFBLENBQWtCNWhCLEtBQUEsQ0FBTThtQyxJQUFBLEVBQU10akMsT0FBQSxFQUFTLEtBQUs7SUFDM0QsT0FBT3NiLFdBQUEsQ0FBWXZFLFlBQUEsQ0FBYTBVLFFBQVE7RUFDMUM7RUFDQTNPLGFBQUEsRUFBZUEsQ0FBQ3RnQixLQUFBLEVBQU93RCxPQUFBLEtBQVk7SUFDakMsT0FBT3VpQixrQkFBQSxDQUFtQi9sQixLQUFBLENBQU0rbUMsTUFBQSxFQUFRdmpDLE9BQU87RUFDakQ7QUFDRixDQUFDO0FBRUQsSUFBSXdqQyxRQUFBLEdBQVcsU0FBU0MsVUFBUzFuQyxHQUFBLEVBQUs7RUFDcEMsSUFBSSwrQkFBK0J1QixJQUFBLENBQUt2QixHQUFHLEdBQUc7SUFHNUMsT0FBTztNQUNMOFQsTUFBQSxFQUFRLENBQUM5VCxHQUFBO01BQ1R1VCxJQUFBLEVBQU07SUFDUjtFQUNGLE9BQU87SUFDTCxJQUFJalQsS0FBQSxHQUFRLDZDQUE2Q2dCLElBQUEsQ0FBS3RCLEdBQUc7SUFFakUsSUFBSSxDQUFDTSxLQUFBLEVBQU87TUFDVixNQUFNLElBQUlwQyxVQUFBLENBQVcsb0JBQW9COEIsR0FBQSxHQUFNLHdCQUF3QjtJQUN6RTtJQUVBLElBQUl1UixJQUFBLEdBQU87TUFDVHVDLE1BQUEsRUFBUSxFQUFFeFQsS0FBQSxDQUFNLEtBQUtBLEtBQUEsQ0FBTTtNQUUzQmlULElBQUEsRUFBTWpULEtBQUEsQ0FBTTtJQUNkO0lBRUEsSUFBSSxDQUFDK1MsU0FBQSxDQUFVOUIsSUFBSSxHQUFHO01BQ3BCLE1BQU0sSUFBSXJULFVBQUEsQ0FBVyxvQkFBb0JxVCxJQUFBLENBQUtnQyxJQUFBLEdBQU8seUJBQXlCO0lBQ2hGO0lBRUEsT0FBT2hDLElBQUE7RUFDVDtBQUNGO0FBRUFpUCxjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLG1CQUFtQjtFQUMzQkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNUSyxlQUFBLEVBQWlCO0lBQ2pCSixRQUFBLEVBQVUsQ0FBQyxPQUFPLEtBQUs7SUFDdkJFLGFBQUEsRUFBZTtFQUNqQjtFQUNBUixPQUFBLEVBQVNBLENBQUNILElBQUEsRUFBTTJOLElBQUEsRUFBTU0sT0FBQSxLQUFZO0lBQ2hDLElBQUk7TUFDRko7SUFDRixJQUFJN04sSUFBQTtJQUNKLElBQUk3UCxLQUFBLEdBQVE7TUFDVmtELE1BQUEsRUFBUTtNQUNSUCxJQUFBLEVBQU07SUFDUjtJQUNBLElBQUkzSyxNQUFBLEdBQVM7TUFDWGtMLE1BQUEsRUFBUTtNQUNSUCxJQUFBLEVBQU07SUFDUjtJQUVBLElBQUlvMEIsV0FBQSxHQUFjO01BQ2hCN3pCLE1BQUEsRUFBUTtNQUNSUCxJQUFBLEVBQU07SUFDUjtJQUNBLElBQUlpQyxHQUFBLEdBQU07SUFFVixJQUFJa1osT0FBQSxDQUFRLElBQUk7TUFDZCxJQUFJa1osWUFBQSxHQUFlN2EsY0FBQSxDQUFlMkIsT0FBQSxDQUFRLElBQUksS0FBSyxFQUFFd1ksTUFBQTtNQUVyRCxJQUFJMXlCLFVBQUEsR0FBYW96QixZQUFBLENBQWFQLEtBQUEsQ0FBTSxHQUFHO01BRXZDLFNBQVMzZ0MsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSThOLFVBQUEsQ0FBV2pXLE1BQUEsRUFBUW1JLENBQUEsSUFBSztRQUMxQyxJQUFJNGdDLE1BQUEsR0FBUzl5QixVQUFBLENBQVc5TixDQUFBLEVBQUcyZ0MsS0FBQSxDQUFNLEdBQUc7UUFFcEMsSUFBSUMsTUFBQSxDQUFPL29DLE1BQUEsS0FBVyxHQUFHO1VBQ3ZCLElBQUl5QixHQUFBLEdBQU1zbkMsTUFBQSxDQUFPLEdBQUduRixJQUFBLENBQUs7VUFFekIsUUFBUW1GLE1BQUEsQ0FBTyxHQUFHbkYsSUFBQSxDQUFLO1lBQUEsS0FDaEI7Y0FDSDNzQixHQUFBLEdBQU14VixHQUFBO2NBQ047WUFBQSxLQUVHO2NBQ0g0USxLQUFBLEdBQVE2MkIsUUFBQSxDQUFTem5DLEdBQUc7Y0FDcEI7WUFBQSxLQUVHO2NBQ0g0SSxNQUFBLEdBQVM2K0IsUUFBQSxDQUFTem5DLEdBQUc7Y0FDckI7WUFBQSxLQUVHO2NBQ0gybkMsV0FBQSxHQUFjRixRQUFBLENBQVN6bkMsR0FBRztjQUMxQjtZQUFBO2NBR0EsTUFBTSxJQUFJOUIsVUFBQSxDQUFXLG1CQUFtQm9wQyxNQUFBLENBQU8sS0FBSyx5QkFBeUI7VUFBQTtRQUVuRjtNQUNGO0lBQ0Y7SUFFQSxJQUFJL3hCLEdBQUEsR0FBTXdYLGNBQUEsQ0FBZXFCLElBQUEsQ0FBSyxJQUFJLEtBQUssRUFBRWh0QixHQUFBO0lBRXpDLElBQUlvVSxHQUFBLEtBQVEsSUFBSTtNQUVkQSxHQUFBLEdBQU1ELEdBQUE7TUFDTkMsR0FBQSxHQUFNQSxHQUFBLENBQUkzVyxPQUFBLENBQVEsWUFBWSxFQUFFO01BQ2hDMlcsR0FBQSxHQUFNQSxHQUFBLENBQUlxeUIsU0FBQSxDQUFVLEdBQUdyeUIsR0FBQSxDQUFJc3lCLFdBQUEsQ0FBWSxHQUFHLENBQUM7SUFDN0M7SUFFQSxJQUFJLENBQUN4WixNQUFBLENBQU9oSCxRQUFBLENBQVM1aUIsU0FBQSxDQUFVO01BQzdCc2lDLE9BQUEsRUFBUztNQUNUNWxDLEdBQUEsRUFBS21VO0lBQ1AsQ0FBQyxHQUFHO01BQ0YsT0FBTytZLE1BQUEsQ0FBTzJZLG9CQUFBLENBQXFCLG1CQUFtQjtJQUN4RDtJQUVBLE9BQU87TUFDTHZtQyxJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYmlGLEdBQUE7TUFDQTVFLEtBQUE7TUFDQWhJLE1BQUE7TUFDQSsrQixXQUFBO01BQ0FweUI7SUFDRjtFQUNGO0VBQ0FzTCxXQUFBLEVBQWFBLENBQUNwZ0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBQy9CLElBQUkyRSxNQUFBLEdBQVM0SyxhQUFBLENBQWMvUyxLQUFBLENBQU1tSSxNQUFBLEVBQVEzRSxPQUFPO0lBQ2hELElBQUkySSxLQUFBLEdBQVE7SUFFWixJQUFJbk0sS0FBQSxDQUFNa25DLFdBQUEsQ0FBWTd6QixNQUFBLEdBQVMsR0FBRztNQUNoQ2xILEtBQUEsR0FBUTRHLGFBQUEsQ0FBYy9TLEtBQUEsQ0FBTWtuQyxXQUFBLEVBQWExakMsT0FBTyxJQUFJMkUsTUFBQTtJQUN0RDtJQUVBLElBQUlnSSxLQUFBLEdBQVE7SUFFWixJQUFJblEsS0FBQSxDQUFNbVEsS0FBQSxDQUFNa0QsTUFBQSxHQUFTLEdBQUc7TUFDMUJsRCxLQUFBLEdBQVE0QyxhQUFBLENBQWMvUyxLQUFBLENBQU1tUSxLQUFBLEVBQU8zTSxPQUFPO0lBQzVDO0lBRUEsSUFBSTZJLEtBQUEsR0FBUTtNQUNWbEUsTUFBQSxFQUFRbUwsTUFBQSxDQUFPbkwsTUFBQSxHQUFTZ0UsS0FBSztJQUMvQjtJQUVBLElBQUlnRSxLQUFBLEdBQVEsR0FBRztNQUNiOUQsS0FBQSxDQUFNOEQsS0FBQSxHQUFRbUQsTUFBQSxDQUFPbkQsS0FBSztJQUM1QjtJQUVBLElBQUloRSxLQUFBLEdBQVEsR0FBRztNQUNiRSxLQUFBLENBQU0rWCxhQUFBLEdBQWdCOVEsTUFBQSxDQUFPLENBQUNuSCxLQUFLO0lBQ3JDO0lBRUEsSUFBSStILElBQUEsR0FBTyxJQUFJVyxHQUFBLENBQUk3VSxLQUFBLENBQU04VSxHQUFBLEVBQUs5VSxLQUFBLENBQU0rVSxHQUFBLEVBQUsxSSxLQUFLO0lBQzlDNkgsSUFBQSxDQUFLL0wsTUFBQSxHQUFTQSxNQUFBO0lBQ2QrTCxJQUFBLENBQUsvSCxLQUFBLEdBQVFBLEtBQUE7SUFDYixPQUFPK0gsSUFBQTtFQUNUO0VBQ0FvTSxhQUFBLEVBQWVBLENBQUN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBQ2pDLElBQUkwUSxJQUFBLEdBQU8sSUFBSStRLFVBQUEsQ0FBV0osUUFBQSxDQUFTLFVBQVUsRUFBRTtJQUMvQzNRLElBQUEsQ0FBS0csWUFBQSxDQUFhLE9BQU9yVSxLQUFBLENBQU0rVSxHQUFHO0lBQ2xDLElBQUk1TSxNQUFBLEdBQVM0SyxhQUFBLENBQWMvUyxLQUFBLENBQU1tSSxNQUFBLEVBQVEzRSxPQUFPO0lBQ2hELElBQUkySSxLQUFBLEdBQVE7SUFFWixJQUFJbk0sS0FBQSxDQUFNa25DLFdBQUEsQ0FBWTd6QixNQUFBLEdBQVMsR0FBRztNQUNoQ2xILEtBQUEsR0FBUTRHLGFBQUEsQ0FBYy9TLEtBQUEsQ0FBTWtuQyxXQUFBLEVBQWExakMsT0FBTyxJQUFJMkUsTUFBQTtNQUNwRCtMLElBQUEsQ0FBS0csWUFBQSxDQUFhLFVBQVVmLE1BQUEsQ0FBTyxDQUFDbkgsS0FBSyxDQUFDO0lBQzVDO0lBRUErSCxJQUFBLENBQUtHLFlBQUEsQ0FBYSxVQUFVZixNQUFBLENBQU9uTCxNQUFBLEdBQVNnRSxLQUFLLENBQUM7SUFFbEQsSUFBSW5NLEtBQUEsQ0FBTW1RLEtBQUEsQ0FBTWtELE1BQUEsR0FBUyxHQUFHO01BQzFCLElBQUlsRCxLQUFBLEdBQVE0QyxhQUFBLENBQWMvUyxLQUFBLENBQU1tUSxLQUFBLEVBQU8zTSxPQUFPO01BQzlDMFEsSUFBQSxDQUFLRyxZQUFBLENBQWEsU0FBU2YsTUFBQSxDQUFPbkQsS0FBSyxDQUFDO0lBQzFDO0lBRUErRCxJQUFBLENBQUtHLFlBQUEsQ0FBYSxPQUFPclUsS0FBQSxDQUFNOFUsR0FBRztJQUNsQyxPQUFPWixJQUFBO0VBQ1Q7QUFDRixDQUFDO0FBSUQ2TCxjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLFVBQVUsV0FBVyxXQUFXLFNBQVM7RUFDakRDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7SUFDVEMsUUFBQSxFQUFVLENBQUMsTUFBTTtJQUNqQk0sU0FBQSxFQUFXO0lBQ1hKLGFBQUEsRUFBZTtFQUNqQjtFQUVBUixRQUFRSCxJQUFBLEVBQU0yTixJQUFBLEVBQU07SUFDbEIsSUFBSTtNQUNGRSxNQUFBO01BQ0FEO0lBQ0YsSUFBSTVOLElBQUE7SUFDSixJQUFJMWIsSUFBQSxHQUFPZ29CLGNBQUEsQ0FBZXFCLElBQUEsQ0FBSyxJQUFJLE1BQU07SUFFekMsSUFBSUUsTUFBQSxDQUFPaEgsUUFBQSxDQUFTcGtCLE1BQUEsRUFBUTtNQUMxQixJQUFJNmtDLFlBQUEsR0FBZTFaLFFBQUEsQ0FBUyxPQUFPO01BRW5DLElBQUkyWixNQUFBLEdBQVNqakMsSUFBQSxDQUFLOUQsS0FBQSxDQUFNc1MsSUFBQSxLQUFTO01BRWpDLElBQUl3MEIsWUFBQSxFQUFjO1FBQ2hCLElBQUksQ0FBQ0MsTUFBQSxFQUFRO1VBQ1gxWixNQUFBLENBQU9oSCxRQUFBLENBQVNsakIsZUFBQSxDQUFnQixtQkFBbUIsYUFBYWlxQixRQUFBLEdBQVcsK0JBQStCLFNBQVN0cEIsSUFBQSxDQUFLOUQsS0FBQSxDQUFNc1MsSUFBQSxHQUFPLFNBQVM7UUFDaEo7UUFFQSxJQUFJK2EsTUFBQSxDQUFPL2QsSUFBQSxLQUFTLFFBQVE7VUFDMUIrZCxNQUFBLENBQU9oSCxRQUFBLENBQVNsakIsZUFBQSxDQUFnQixtQkFBbUIsYUFBYWlxQixRQUFBLEdBQVcsMEJBQTBCO1FBQ3ZHO01BQ0YsT0FBTztRQUVMLElBQUkyWixNQUFBLEVBQVE7VUFDVjFaLE1BQUEsQ0FBT2hILFFBQUEsQ0FBU2xqQixlQUFBLENBQWdCLG1CQUFtQixhQUFhaXFCLFFBQUEsR0FBVywyQkFBMkI7UUFDeEc7TUFDRjtJQUNGO0lBRUEsT0FBTztNQUNMM3RCLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiMDNCLFNBQUEsRUFBV2xqQyxJQUFBLENBQUs5RDtJQUNsQjtFQUNGO0VBRUE0ZixZQUFZcGdCLEtBQUEsRUFBT3dELE9BQUEsRUFBUztJQUMxQixPQUFPc2IsV0FBQSxDQUFZWCxRQUFBLENBQVNuZSxLQUFBLENBQU13bkMsU0FBQSxFQUFXaGtDLE9BQU87RUFDdEQ7RUFFQThjLGNBQWN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBQzVCLElBQUlna0MsU0FBQSxHQUFZejBCLGFBQUEsQ0FBYy9TLEtBQUEsQ0FBTXduQyxTQUFBLEVBQVdoa0MsT0FBTztJQUN0RCxPQUFPLElBQUl5aEIsVUFBQSxDQUFXRCxTQUFBLENBQVV3aUIsU0FBUztFQUMzQztBQUVGLENBQUM7QUFHRHpuQixjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLGNBQWMsY0FBYyxZQUFZO0VBQ2hEQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RHLGFBQUEsRUFBZTtFQUNqQjtFQUNBUixPQUFBLEVBQVNBLENBQUNILElBQUEsRUFBTTJOLElBQUEsS0FBUztJQUN2QixJQUFJO01BQ0ZFLE1BQUE7TUFDQUQ7SUFDRixJQUFJNU4sSUFBQTtJQUNKLElBQUk5ZixJQUFBLEdBQU95dEIsSUFBQSxDQUFLO0lBQ2hCLE9BQU87TUFDTDF0QixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYjIzQixTQUFBLEVBQVc3WixRQUFBLENBQVN6dkIsS0FBQSxDQUFNLENBQUM7TUFDM0IrQjtJQUNGO0VBQ0Y7RUFDQWtnQixXQUFBLEVBQWFBLENBQUNwZ0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBRS9CLElBQUlzb0IsTUFBQTtJQUVKLElBQUk5ckIsS0FBQSxDQUFNeW5DLFNBQUEsS0FBYyxRQUFRO01BRTlCM2IsTUFBQSxHQUFRaE4sV0FBQSxDQUFZekQsUUFBQSxDQUFTLEVBQUMsRUFBRyxDQUFDNkcsWUFBQSxDQUFhbGlCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNc0QsT0FBTyxDQUFDLENBQUM7TUFFcEVzb0IsTUFBQSxHQUFRaE4sV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsT0FBTyxHQUFHLENBQUN5USxNQUFLLEdBQUd0b0IsT0FBTztJQUMxRCxPQUFPO01BQ0xzb0IsTUFBQSxHQUFRaE4sV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsT0FBTyxHQUFHLENBQUM2RyxZQUFBLENBQWFsaUIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFPLENBQUMsQ0FBQztJQUM3RTtJQUVBLElBQUlra0MsR0FBQSxHQUFNNW9CLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLEtBQUssR0FBRyxFQUFFO0lBQzFDLElBQUluSCxJQUFBLEdBQU80SyxXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQ3JiLEtBQUEsQ0FBTXluQyxTQUFTLEdBQUcsQ0FBQzNiLE1BQUEsRUFBTzRiLEdBQUcsR0FBR2xrQyxPQUFPO0lBTXhFLElBQUkyZ0IsS0FBQSxHQUFRckYsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsT0FBTyxDQUFDO0lBQzFDOEksS0FBQSxDQUFNOVgsS0FBQSxDQUFNbEUsTUFBQSxHQUFTbUwsTUFBQSxDQUFPWSxJQUFBLENBQUsvTCxNQUFBLEdBQVMrTCxJQUFBLENBQUsvSCxLQUFLO0lBRXBELElBQUkrSCxJQUFBLENBQUsvSCxLQUFBLEVBQU87TUFDZGdZLEtBQUEsQ0FBTTlYLEtBQUEsQ0FBTStYLGFBQUEsR0FBZ0I5USxNQUFBLENBQU8sQ0FBQ1ksSUFBQSxDQUFLL0gsS0FBSztJQUNoRDtJQUVBK0gsSUFBQSxDQUFLakksUUFBQSxDQUFTa1gsT0FBQSxDQUFRZ0IsS0FBSztJQUczQmpRLElBQUEsR0FBTzRLLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLFNBQVMsR0FBRyxDQUFDbkgsSUFBSSxHQUFHMVEsT0FBTztJQUN4RCxPQUFPc2IsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsUUFBUSxNQUFNLEdBQUcsQ0FBQ25ILElBQUksR0FBRzFRLE9BQU87RUFDL0Q7RUFDQThjLGFBQUEsRUFBZUEsQ0FBQ3RnQixLQUFBLEVBQU93RCxPQUFBLEtBQVk7SUFFakMsSUFBSTBRLElBQUEsR0FBTyxJQUFJK1EsVUFBQSxDQUFXSixRQUFBLENBQVMsV0FBVyxDQUFDYyxXQUFBLENBQVczbEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFPLENBQUMsQ0FBQztJQUUvRSxJQUFJeEQsS0FBQSxDQUFNeW5DLFNBQUEsS0FBYyxRQUFRO01BQzlCLElBQUlsSSxNQUFBLEdBQVN2L0IsS0FBQSxDQUFNeW5DLFNBQUEsS0FBYyxTQUFTLE9BQU87TUFDakR2ekIsSUFBQSxDQUFLRyxZQUFBLENBQWEsVUFBVWtyQixNQUFBLEdBQVMsT0FBTztJQUM5QztJQUVBcnJCLElBQUEsQ0FBS0csWUFBQSxDQUFhLFNBQVMsS0FBSztJQUNoQyxPQUFPSCxJQUFBO0VBQ1Q7QUFDRixDQUFDO0FBRUQ2TCxjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLE9BQU8sR0FBRztFQUNsQkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNURyxhQUFBLEVBQWU7SUFDZkMsYUFBQSxFQUFlO0VBQ2pCO0VBRUFULFFBQVFILElBQUEsRUFBTTJOLElBQUEsRUFBTTtJQUNsQixJQUFJO01BQ0ZDLFFBQUE7TUFDQUM7SUFDRixJQUFJN04sSUFBQTtJQUNKLElBQUkybkIsU0FBQSxHQUFZOVosTUFBQSxDQUFPL2QsSUFBQTtJQUN2QitkLE1BQUEsQ0FBTytaLFVBQUEsQ0FBVyxNQUFNO0lBQ3hCLElBQUlDLE1BQUEsR0FBUWphLFFBQUEsS0FBYSxRQUFRLFFBQVE7SUFDekMsSUFBSTF0QixJQUFBLEdBQU8ydEIsTUFBQSxDQUFPMkQsZUFBQSxDQUFnQixPQUFPcVcsTUFBSztJQUM5Q2hhLE1BQUEsQ0FBT2lOLE1BQUEsQ0FBTytNLE1BQUs7SUFDbkJoYSxNQUFBLENBQU8rWixVQUFBLENBQVdELFNBQVM7SUFDM0IsT0FBTztNQUNMMW5DLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiekQsS0FBQSxFQUFPO01BQ1BuTTtJQUNGO0VBQ0Y7QUFFRixDQUFDO0FBRUQ2ZixjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUVOZ2dCLEtBQUEsRUFBTyxDQUFDLE9BQU8sS0FBSztFQUNwQkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNURyxhQUFBLEVBQWU7SUFDZkMsYUFBQSxFQUFlO0VBQ2pCO0VBRUFULFFBQVFqYyxPQUFBLEVBQVN5cEIsSUFBQSxFQUFNO0lBQ3JCLE1BQU0sSUFBSWx3QixVQUFBLENBQVcsZ0JBQWdCeUcsT0FBQSxDQUFRMHBCLFFBQVE7RUFDdkQ7QUFFRixDQUFDO0FBRUQsSUFBSWthLGVBQUEsR0FBa0JBLENBQUM5bkMsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0VBQ3hDLFFBQVFBLE9BQUEsQ0FBUTZJLEtBQUEsQ0FBTS9ILElBQUE7SUFBQSxLQUNma0IsT0FBQSxDQUFRQyxPQUFBLENBQVFuQixJQUFBO01BQ25CLE9BQU90RSxLQUFBLENBQU0rbkMsT0FBQTtJQUFBLEtBRVZ2aUMsT0FBQSxDQUFRRSxJQUFBLENBQUtwQixJQUFBO01BQ2hCLE9BQU90RSxLQUFBLENBQU0zQyxJQUFBO0lBQUEsS0FFVm1JLE9BQUEsQ0FBUUcsTUFBQSxDQUFPckIsSUFBQTtNQUNsQixPQUFPdEUsS0FBQSxDQUFNa0csTUFBQTtJQUFBLEtBRVZWLE9BQUEsQ0FBUUksWUFBQSxDQUFhdEIsSUFBQTtNQUN4QixPQUFPdEUsS0FBQSxDQUFNZ29DLFlBQUE7SUFBQTtNQUdiLE9BQU9ob0MsS0FBQSxDQUFNM0MsSUFBQTtFQUFBO0FBRW5CO0FBRUEwaUIsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxjQUFjO0VBQ3RCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RPLFNBQUEsRUFBVztFQUNiO0VBQ0FaLE9BQUEsRUFBU0EsQ0FBQ0gsSUFBQSxFQUFNMk4sSUFBQSxLQUFTO0lBQ3ZCLElBQUk7TUFDRkU7SUFDRixJQUFJN04sSUFBQTtJQUNKLE9BQU87TUFDTC9mLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiaTRCLE9BQUEsRUFBUzFtQixXQUFBLENBQVlzTSxJQUFBLENBQUssRUFBRTtNQUM1QnR3QixJQUFBLEVBQU1na0IsV0FBQSxDQUFZc00sSUFBQSxDQUFLLEVBQUU7TUFDekJ6bkIsTUFBQSxFQUFRbWIsV0FBQSxDQUFZc00sSUFBQSxDQUFLLEVBQUU7TUFDM0JxYSxZQUFBLEVBQWMzbUIsV0FBQSxDQUFZc00sSUFBQSxDQUFLLEVBQUU7SUFDbkM7RUFDRjtFQUNBdk4sV0FBQSxFQUFhQSxDQUFDcGdCLEtBQUEsRUFBT3dELE9BQUEsS0FBWTtJQUMvQixJQUFJdEQsSUFBQSxHQUFPNG5DLGVBQUEsQ0FBZ0I5bkMsS0FBQSxFQUFPd0QsT0FBTztJQUN6QyxJQUFJeXJCLFFBQUEsR0FBV3JOLGlCQUFBLENBQWtCMWhCLElBQUEsRUFBTXNELE9BQUEsRUFBUyxLQUFLO0lBQ3JELE9BQU9zYixXQUFBLENBQVl2RSxZQUFBLENBQWEwVSxRQUFRO0VBQzFDO0VBQ0EzTyxhQUFBLEVBQWVBLENBQUN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBQ2pDLElBQUl0RCxJQUFBLEdBQU80bkMsZUFBQSxDQUFnQjluQyxLQUFBLEVBQU93RCxPQUFPO0lBQ3pDLE9BQU91aUIsa0JBQUEsQ0FBbUI3bEIsSUFBQSxFQUFNc0QsT0FBTztFQUN6QztBQUNGLENBQUM7QUFFRCxJQUFJeWtDLGNBQUEsR0FBaUJBLENBQUNyZCxJQUFBLEVBQU1zZCxRQUFBLEVBQVVDLFFBQUEsRUFBVTNrQyxPQUFBLEVBQVM2SSxLQUFBLEVBQU9nQixLQUFBLEVBQU8rNkIsU0FBQSxLQUFjO0VBQ25GeGQsSUFBQSxHQUFPOUwsV0FBQSxDQUFZekQsUUFBQSxDQUFTLEVBQUMsRUFBRyxDQUFDdVAsSUFBSSxDQUFDO0VBQ3RDLElBQUl5ZCxvQkFBQSxHQUF1QkYsUUFBQSxJQUFZcG5DLEtBQUEsQ0FBTVosY0FBQSxDQUFlZ29DLFFBQVE7RUFDcEUsSUFBSTk1QixJQUFBO0VBQ0osSUFBSUgsSUFBQTtFQUdKLElBQUlnNkIsUUFBQSxFQUFVO0lBQ1osSUFBSXBwQyxJQUFBLEdBQU9vakIsWUFBQSxDQUFhZ21CLFFBQUEsRUFBVTFrQyxPQUFBLENBQVFpTyxXQUFBLENBQVlwRixLQUFBLENBQU03SCxHQUFBLENBQUksQ0FBQyxHQUFHaEIsT0FBTztJQUMzRTBLLElBQUEsR0FBTTtNQUNKcFAsSUFBQTtNQUNBaXZCLElBQUEsRUFBTTFyQixJQUFBLENBQUtDLEdBQUEsQ0FBSWtCLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFNUQsYUFBQSxFQUFlcEwsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUUxRCxhQUFBLEdBQWdCaFEsSUFBQSxDQUFLcU4sS0FBSztJQUN0RztFQUNGO0VBRUEsSUFBSWc4QixRQUFBLEVBQVU7SUFDWixJQUFJNXFCLEtBQUEsR0FBUTJFLFlBQUEsQ0FBYWltQixRQUFBLEVBQVUza0MsT0FBQSxDQUFRaU8sV0FBQSxDQUFZcEYsS0FBQSxDQUFNM0gsR0FBQSxDQUFJLENBQUMsR0FBR2xCLE9BQU87SUFFNUU2SyxJQUFBLEdBQU07TUFDSnZQLElBQUEsRUFBTXllLEtBQUE7TUFDTndRLElBQUEsRUFBTTFyQixJQUFBLENBQUtDLEdBQUEsQ0FBSWtCLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFM0QsYUFBQSxFQUFlckwsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUV6RCxhQUFBLEdBQWdCd08sS0FBQSxDQUFNcFYsTUFBTTtJQUN4RztFQUNGO0VBSUEsSUFBSW1nQyxVQUFBO0VBRUosSUFBSXA2QixJQUFBLElBQU9HLElBQUEsRUFBSztJQUNkLElBQUl1TyxNQUFBLEdBQVNwWixPQUFBLENBQVFnUCxXQUFBLENBQVksRUFBRXhELGFBQUEsR0FBZ0JYLElBQUEsQ0FBSXZQLElBQUEsQ0FBS3FKLE1BQUEsR0FBU2tHLElBQUEsQ0FBSXZQLElBQUEsQ0FBS3FOLEtBQUEsR0FBUWtDLElBQUEsQ0FBSTBmLElBQUEsR0FBT25ELElBQUEsQ0FBS3plLEtBQUEsR0FBUWk4QixTQUFBO0lBQzlHRSxVQUFBLEdBQWF4cEIsV0FBQSxDQUFZL0IsU0FBQSxDQUFVO01BQ2pDVCxZQUFBLEVBQWM7TUFDZE8sWUFBQSxFQUFjRCxNQUFBO01BQ2QzUSxRQUFBLEVBQVUsQ0FBQztRQUNUaE0sSUFBQSxFQUFNO1FBQ05xRSxJQUFBLEVBQU1kLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFeEQ7TUFDOUIsR0FBRztRQUNEL08sSUFBQSxFQUFNO1FBQ05uQixJQUFBLEVBQU11UCxJQUFBLENBQUl2UCxJQUFBO1FBQ1Y4ZSxVQUFBLEVBQVl0SyxNQUFBLENBQU8sQ0FBQ2pHLEtBQUs7TUFDM0IsR0FBRztRQUNEcE4sSUFBQSxFQUFNO1FBQ05xRSxJQUFBLEVBQU0rSixJQUFBLENBQUkwZjtNQUNaLEdBQUc7UUFDRDl0QixJQUFBLEVBQU07UUFDTm5CLElBQUEsRUFBTThyQjtNQUNSLEdBQUc7UUFDRDNxQixJQUFBLEVBQU07UUFDTnFFLElBQUEsRUFBTTRKLElBQUEsQ0FBSTZmO01BQ1osR0FBRztRQUNEOXRCLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNb1AsSUFBQSxDQUFJcFAsSUFBQTtRQUNWOGUsVUFBQSxFQUFZdEssTUFBQSxDQUFPakcsS0FBSztNQUMxQixHQUFHO1FBQ0RwTixJQUFBLEVBQU07UUFDTnFFLElBQUEsRUFBTWQsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUV4RDtNQUM5QixDQUFDO0lBQ0gsR0FBR3hMLE9BQU87RUFDWixXQUFXNkssSUFBQSxFQUFLO0lBQ2QsSUFBSXNQLEdBQUEsR0FBTWlOLElBQUEsQ0FBS3ppQixNQUFBLEdBQVNpZ0MsU0FBQTtJQUt4QkUsVUFBQSxHQUFheHBCLFdBQUEsQ0FBWS9CLFNBQUEsQ0FBVTtNQUNqQ1QsWUFBQSxFQUFjO01BQ2RPLFlBQUEsRUFBY2MsR0FBQTtNQUNkMVIsUUFBQSxFQUFVLENBQUM7UUFDVGhNLElBQUEsRUFBTTtRQUNOcUUsSUFBQSxFQUFNZCxPQUFBLENBQVFnUCxXQUFBLENBQVksRUFBRXhEO01BQzlCLEdBQUc7UUFDRC9PLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNdVAsSUFBQSxDQUFJdlAsSUFBQTtRQUNWOGUsVUFBQSxFQUFZdEssTUFBQSxDQUFPLENBQUNqRyxLQUFLO01BQzNCLEdBQUc7UUFDRHBOLElBQUEsRUFBTTtRQUNOcUUsSUFBQSxFQUFNK0osSUFBQSxDQUFJMGY7TUFDWixHQUFHO1FBQ0Q5dEIsSUFBQSxFQUFNO1FBQ05uQixJQUFBLEVBQU04ckI7TUFDUixDQUFDO0lBQ0gsR0FBR3BuQixPQUFPO0VBQ1osV0FBVzBLLElBQUEsRUFBSztJQUNkLElBQUlxNkIsT0FBQSxHQUFVM2QsSUFBQSxDQUFLemUsS0FBQSxHQUFRaThCLFNBQUE7SUFFM0JFLFVBQUEsR0FBYXhwQixXQUFBLENBQVkvQixTQUFBLENBQVU7TUFDakNULFlBQUEsRUFBYztNQUNkTyxZQUFBLEVBQWMwckIsT0FBQTtNQUNkdDhCLFFBQUEsRUFBVSxDQUFDO1FBQ1RoTSxJQUFBLEVBQU07UUFDTm5CLElBQUEsRUFBTThyQjtNQUNSLEdBQUc7UUFDRDNxQixJQUFBLEVBQU07UUFDTnFFLElBQUEsRUFBTTRKLElBQUEsQ0FBSTZmO01BQ1osR0FBRztRQUNEOXRCLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNb1AsSUFBQSxDQUFJcFAsSUFBQTtRQUNWOGUsVUFBQSxFQUFZdEssTUFBQSxDQUFPakcsS0FBSztNQUMxQixHQUFHO1FBQ0RwTixJQUFBLEVBQU07UUFDTnFFLElBQUEsRUFBTWQsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUV4RDtNQUM5QixDQUFDO0lBQ0gsR0FBR3hMLE9BQU87RUFDWixPQUFPO0lBSUwsT0FBT29uQixJQUFBO0VBQ1Q7RUFFQSxJQUFJdFEsS0FBQSxHQUFRLENBQUNndUIsVUFBVTtFQUV2QixJQUFJajZCLElBQUEsSUFBT2hCLEtBQUEsS0FBVSxLQUFLLENBQUNnN0Isb0JBQUEsRUFBc0I7SUFHL0MsSUFBSUcsTUFBQSxHQUFTMXBCLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLFFBQVEsR0FBRyxFQUFDLEVBQUc3WCxPQUFPO0lBQ3pEZ2xDLE1BQUEsQ0FBT244QixLQUFBLENBQU0rSSxXQUFBLEdBQWM5QixNQUFBLENBQU9qRyxLQUFLO0lBQ3ZDaU4sS0FBQSxDQUFNNkksT0FBQSxDQUFRcWxCLE1BQU07RUFDdEI7RUFFQSxPQUFPMXBCLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLE9BQU8sV0FBVyxHQUFHZixLQUFBLEVBQU85VyxPQUFPO0FBQ2xFO0FBSUEsSUFBSWlsQyxXQUFBLEdBQWMsQ0FBQyxZQUFZO0FBRy9CLElBQUlDLGFBQUEsR0FBZ0JBLENBQUNoZSxHQUFBLEVBQUtsbkIsT0FBQSxLQUFZO0VBRXBDLElBQUkwa0MsUUFBQTtFQUNKLElBQUlDLFFBQUE7RUFDSixJQUFJUSxTQUFBLEdBQVk7RUFDaEIsSUFBSTNvQyxLQUFBO0VBRUosSUFBSTBxQixHQUFBLENBQUl6cUIsSUFBQSxLQUFTLFVBQVU7SUFJekJpb0MsUUFBQSxHQUFXeGQsR0FBQSxDQUFJbG1CLEdBQUE7SUFDZjJqQyxRQUFBLEdBQVd6ZCxHQUFBLENBQUlobUIsR0FBQTtJQUNmMUUsS0FBQSxHQUFRc3NCLGNBQUEsQ0FBZTVCLEdBQUEsQ0FBSUUsSUFBQSxFQUFNLElBQUk7SUFDckMrZCxTQUFBLEdBQVk7RUFDZCxPQUFPO0lBQ0wzb0MsS0FBQSxHQUFRc3NCLGNBQUEsQ0FBZTVCLEdBQUEsRUFBSyxJQUFJO0VBQ2xDO0VBRUEsSUFBSXJlLEtBQUEsR0FBUTdJLE9BQUEsQ0FBUTZJLEtBQUE7RUFDcEIsSUFBSXU4QixLQUFBLEdBQVE7RUFFWixJQUFJdjhCLEtBQUEsQ0FBTS9ILElBQUEsS0FBU2tCLE9BQUEsQ0FBUUMsT0FBQSxDQUFRbkIsSUFBQSxJQUFRdEUsS0FBQSxDQUFNZ3dCLE1BQUEsSUFBVSxDQUFDanZCLEtBQUEsQ0FBTXBDLFFBQUEsQ0FBUzhwQyxXQUFBLEVBQWF6b0MsS0FBQSxDQUFNcEMsSUFBSSxHQUFHO0lBRW5HZ3JDLEtBQUEsR0FBUTtFQUNWO0VBRUEsSUFBSWhlLElBQUE7RUFFSixJQUFJNXFCLEtBQUEsQ0FBTWd3QixNQUFBLEVBQVE7SUFFaEIsSUFBSXZnQixRQUFBLEdBQVdtNUIsS0FBQSxHQUFRLGtCQUFrQjtJQUN6QyxJQUFJQyxLQUFBLEdBQVE7SUFFWixJQUFJN29DLEtBQUEsQ0FBTXBDLElBQUEsS0FBUyxhQUFhb0MsS0FBQSxDQUFNcEMsSUFBQSxLQUFTLFlBQVk7TUFHekRpckMsS0FBQSxHQUFRN29DLEtBQUEsQ0FBTXBDLElBQUEsQ0FBS08sS0FBQSxDQUFNLENBQUM7TUFDMUI2QixLQUFBLENBQU1wQyxJQUFBLEdBQU9pckMsS0FBQSxLQUFVLFVBQVUsV0FBVztJQUM5QztJQUVBamUsSUFBQSxHQUFPOUwsV0FBQSxDQUFZNUYsVUFBQSxDQUFXbFosS0FBQSxDQUFNcEMsSUFBQSxFQUFNNlIsUUFBQSxFQUFVLFFBQVFqTSxPQUFBLEVBQVMsQ0FBQyxPQUFPLGFBQWFvbEMsS0FBQSxHQUFRLGFBQWEsVUFBVSxDQUFDO0lBRTFILElBQUlDLEtBQUEsQ0FBTS9xQyxNQUFBLEdBQVMsR0FBRztNQUdwQixJQUFJbVMsTUFBQSxHQUFTMmEsSUFBQSxDQUFLM2EsTUFBQTtNQUNsQixJQUFJNjRCLElBQUEsR0FBT2hxQixXQUFBLENBQVlILFNBQUEsQ0FBVWtxQixLQUFBLEdBQVEsVUFBVUQsS0FBQSxHQUFRLE1BQU0sTUFBTXBsQyxPQUFPO01BQzlFb25CLElBQUEsR0FBTzlMLFdBQUEsQ0FBWS9CLFNBQUEsQ0FBVTtRQUMzQlQsWUFBQSxFQUFjO1FBQ2RyUSxRQUFBLEVBQVUsQ0FBQztVQUNUaE0sSUFBQSxFQUFNO1VBQ05uQixJQUFBLEVBQU04ckIsSUFBQTtVQUNObk8sS0FBQSxFQUFPO1FBQ1QsR0FBRztVQUNEeGMsSUFBQSxFQUFNO1VBQ05uQixJQUFBLEVBQU1ncUMsSUFBQTtVQUNOcnNCLEtBQUEsRUFBT21zQixLQUFBLEdBQVEsT0FBTztRQUN4QixDQUFDO01BQ0gsR0FBR3BsQyxPQUFPO01BQ1Z4RCxLQUFBLENBQU1wQyxJQUFBLEdBQU8sT0FBT2lyQyxLQUFBO01BQ3BCamUsSUFBQSxDQUFLMWUsT0FBQSxDQUFRaVgsT0FBQSxDQUFRLEtBQUs7TUFFMUJ5SCxJQUFBLENBQUszYSxNQUFBLEdBQVNBLE1BQUE7SUFDaEI7RUFDRixXQUFXalEsS0FBQSxDQUFNRSxJQUFBLEVBQU07SUFFckIsSUFBSTRyQixNQUFBLEdBQVFsSyxpQkFBQSxDQUFrQjVoQixLQUFBLENBQU1FLElBQUEsRUFBTXNELE9BQUEsRUFBUyxJQUFJO0lBRXZELElBQUlzb0IsTUFBQSxDQUFNaHVCLE1BQUEsS0FBVyxLQUFLZ3VCLE1BQUEsQ0FBTSxjQUFjN1csVUFBQSxFQUFZO01BQ3hEMlYsSUFBQSxHQUFPa0IsTUFBQSxDQUFNO01BQ2JsQixJQUFBLENBQUsxZSxPQUFBLENBQVEsS0FBSztJQUNwQixPQUFPO01BQ0wwZSxJQUFBLEdBQU85TCxXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxLQUFLLEdBQUd5USxNQUFBLEVBQU90b0IsT0FBTztJQUNyRDtFQUNGLE9BQU87SUFHTCxJQUFJcEMsTUFBQSxHQUFTLEVBQUM7SUFFZCxTQUFTNkUsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSWpHLEtBQUEsQ0FBTXBDLElBQUEsQ0FBS0UsTUFBQSxFQUFRbUksQ0FBQSxJQUFLO01BQzFDN0UsTUFBQSxDQUFPYSxJQUFBLENBQUs2YyxXQUFBLENBQVl4RixPQUFBLENBQVF0WixLQUFBLENBQU1wQyxJQUFBLENBQUtxSSxDQUFBLEdBQUlqRyxLQUFBLENBQU04UCxJQUFBLEVBQU10TSxPQUFPLENBQUM7SUFDckU7SUFFQW9uQixJQUFBLEdBQU85TCxXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxLQUFLLEdBQUdqYSxNQUFBLEVBQVFvQyxPQUFPO0VBQ3REO0VBR0EsSUFBSTRrQyxTQUFBLEdBQVk7RUFDaEIsSUFBSS82QixLQUFBLEdBQVE7RUFFWixLQUFLdWQsSUFBQSxZQUFnQjNWLFVBQUEsSUFBY2pWLEtBQUEsQ0FBTXBDLElBQUEsS0FBUyxhQUFhb0MsS0FBQSxDQUFNcEMsSUFBQSxLQUFTLGVBQWUsQ0FBQ29DLEtBQUEsQ0FBTWl3QixpQkFBQSxFQUFtQjtJQU9ySG1ZLFNBQUEsSUFBYXhkLElBQUEsQ0FBS3ppQixNQUFBLEdBQVN5aUIsSUFBQSxDQUFLemUsS0FBQSxJQUFTLElBQUkzSSxPQUFBLENBQVFnUCxXQUFBLENBQVksRUFBRTlELFVBQUE7SUFHbkVyQixLQUFBLEdBQVF1ZCxJQUFBLENBQUszYSxNQUFBO0VBQ2Y7RUFFQSxJQUFJMDRCLFNBQUEsRUFBVztJQUNiLE9BQU9WLGNBQUEsQ0FBZXJkLElBQUEsRUFBTXNkLFFBQUEsRUFBVUMsUUFBQSxFQUFVM2tDLE9BQUEsRUFBUzZJLEtBQUEsRUFBT2dCLEtBQUEsRUFBTys2QixTQUFTO0VBQ2xGLE9BQU87SUFDTCxJQUFJQSxTQUFBLEVBQVc7TUFDYnhkLElBQUEsQ0FBS3ZlLEtBQUEsQ0FBTXhPLFFBQUEsR0FBVztNQUN0QitzQixJQUFBLENBQUt2ZSxLQUFBLENBQU1zUixHQUFBLEdBQU1ySyxNQUFBLENBQU84MEIsU0FBUztJQUNuQztJQUVBLE9BQU94ZCxJQUFBO0VBQ1Q7QUFDRjtBQUVBLElBQUltZSxlQUFBLEdBQWtCQSxDQUFDL29DLEtBQUEsRUFBT3dELE9BQUEsS0FBWTtFQUN4QyxJQUFJMFEsSUFBQTtFQUVKLElBQUlsVSxLQUFBLENBQU1nd0IsTUFBQSxFQUFRO0lBRWhCOWIsSUFBQSxHQUFPLElBQUkyUSxRQUFBLENBQVMsTUFBTSxDQUFDSyxRQUFBLENBQVNsbEIsS0FBQSxDQUFNcEMsSUFBQSxFQUFNb0MsS0FBQSxDQUFNOFAsSUFBSSxDQUFDLENBQUM7SUFFNUQsSUFBSS9PLEtBQUEsQ0FBTXBDLFFBQUEsQ0FBUzhwQyxXQUFBLEVBQWF6b0MsS0FBQSxDQUFNcEMsSUFBSSxHQUFHO01BQzNDc1csSUFBQSxDQUFLRyxZQUFBLENBQWEsV0FBVyxPQUFPO0lBQ3RDO0VBQ0YsV0FBV3JVLEtBQUEsQ0FBTUUsSUFBQSxFQUFNO0lBRXJCZ1UsSUFBQSxHQUFPLElBQUkyUSxRQUFBLENBQVMsTUFBTVcsZ0JBQUEsQ0FBZ0J4bEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFPLENBQUM7RUFDaEUsT0FBTztJQUdMMFEsSUFBQSxHQUFPLElBQUkyUSxRQUFBLENBQVMsTUFBTSxDQUFDLElBQUlFLFFBQUEsQ0FBUy9rQixLQUFBLENBQU1wQyxJQUFBLENBQUtPLEtBQUEsQ0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRzdELElBQUk2cUMsUUFBQSxHQUFXLElBQUlua0IsUUFBQSxDQUFTLE1BQU0sQ0FBQ0ssUUFBQSxDQUFTLFVBQVUsTUFBTSxDQUFDLENBQUM7SUFFOUQsSUFBSWxsQixLQUFBLENBQU0rdkIsY0FBQSxFQUFnQjtNQUN4QjdiLElBQUEsR0FBTyxJQUFJMlEsUUFBQSxDQUFTLFFBQVEsQ0FBQzNRLElBQUEsRUFBTTgwQixRQUFRLENBQUM7SUFDOUMsT0FBTztNQUNMOTBCLElBQUEsR0FBTzBRLG1CQUFBLENBQW9CLENBQUMxUSxJQUFBLEVBQU04MEIsUUFBUSxDQUFDO0lBQzdDO0VBQ0Y7RUFFQSxPQUFPOTBCLElBQUE7QUFDVDtBQUVBLElBQUkrMEIsZ0JBQUEsR0FBbUI7RUFDckIsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0FBQ1o7QUFDQWxwQixjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLFlBQVksWUFBWSxjQUFjLGNBQWMsWUFBWSxZQUFZLFdBQVcsVUFBVSxTQUFTLGVBQWUsY0FBYyxhQUFhLGNBQWMsY0FBYyxVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsUUFBUTtFQUM5U0MsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztFQUNYO0VBQ0FMLE9BQUEsRUFBU0EsQ0FBQ0gsSUFBQSxFQUFNMk4sSUFBQSxLQUFTO0lBQ3ZCLElBQUk7TUFDRkUsTUFBQTtNQUNBRDtJQUNGLElBQUk1TixJQUFBO0lBQ0osSUFBSWtwQixLQUFBLEdBQVF0YixRQUFBO0lBRVosSUFBSXNiLEtBQUEsQ0FBTXByQyxNQUFBLEtBQVcsR0FBRztNQUN0Qm9yQyxLQUFBLEdBQVFELGdCQUFBLENBQWlCQyxLQUFBO0lBQzNCO0lBRUEsT0FBTztNQUNManBDLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiK2YsTUFBQSxFQUFRO01BQ1JFLGNBQUEsRUFBZ0I7TUFDaEJDLE1BQUEsRUFBUTtNQUNScHlCLElBQUEsRUFBTXNyQztJQUNSO0VBQ0Y7RUFDQTlvQixXQUFBLEVBQWFzb0IsYUFBQTtFQUNicG9CLGFBQUEsRUFBZXlvQjtBQUNqQixDQUFDO0FBR0RocEIsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxVQUFVO0VBQ2xCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RPLFNBQUEsRUFBVztFQUNiO0VBQ0FaLE9BQUEsRUFBU0EsQ0FBQ2MsS0FBQSxFQUFPME0sSUFBQSxLQUFTO0lBQ3hCLElBQUk7TUFDRkU7SUFDRixJQUFJNU0sS0FBQTtJQUNKLElBQUkvZ0IsSUFBQSxHQUFPeXRCLElBQUEsQ0FBSztJQUNoQixPQUFPO01BQ0wxdEIsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU0rZCxNQUFBLENBQU8vZCxJQUFBO01BQ2IrZixNQUFBLEVBQVE7TUFDUkUsY0FBQSxFQUFnQjtNQUNoQkMsTUFBQSxFQUFRO01BQ1I5dkIsSUFBQSxFQUFNbWhCLFdBQUEsQ0FBWW5oQixJQUFJO0lBQ3hCO0VBQ0Y7RUFDQWtnQixXQUFBLEVBQWFzb0IsYUFBQTtFQUNicG9CLGFBQUEsRUFBZXlvQjtBQUNqQixDQUFDO0FBSUQsSUFBSUksbUJBQUEsR0FBc0I7RUFDeEIsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0FBQ1o7QUFFQXBwQixjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLFlBQVksWUFBWSxZQUFZLFdBQVcsWUFBWSxTQUFTLFFBQVEsU0FBUyxXQUFXLFVBQVUsU0FBUyxVQUFVLFVBQVUsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFFBQVEsUUFBUSxTQUFTLFNBQVMsU0FBUyxVQUFVLFFBQVEsU0FBUyxVQUFVLFFBQVEsTUFBTTtFQUNyVEMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztFQUNYO0VBRUFMLFFBQVFzUCxLQUFBLEVBQU87SUFDYixJQUFJO01BQ0Y1QixNQUFBO01BQ0FEO0lBQ0YsSUFBSTZCLEtBQUE7SUFDSixPQUFPO01BQ0x4dkIsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU0rZCxNQUFBLENBQU8vZCxJQUFBO01BQ2IrZixNQUFBLEVBQVE7TUFDUkUsY0FBQSxFQUFnQjtNQUNoQkMsTUFBQSxFQUFRO01BQ1JweUIsSUFBQSxFQUFNZ3dCO0lBQ1I7RUFDRjtFQUVBeE4sV0FBQSxFQUFhc29CLGFBQUE7RUFDYnBvQixhQUFBLEVBQWV5b0I7QUFDakIsQ0FBQztBQUVEaHBCLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsUUFBUSxPQUFPO0VBQzdFQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0VBQ1g7RUFFQUwsUUFBUXlVLEtBQUEsRUFBTztJQUNiLElBQUk7TUFDRi9HLE1BQUE7TUFDQUQ7SUFDRixJQUFJZ0gsS0FBQTtJQUNKLE9BQU87TUFDTDMwQixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYitmLE1BQUEsRUFBUTtNQUNSRSxjQUFBLEVBQWdCO01BQ2hCQyxNQUFBLEVBQVE7TUFDUnB5QixJQUFBLEVBQU1nd0I7SUFDUjtFQUNGO0VBRUF4TixXQUFBLEVBQWFzb0IsYUFBQTtFQUNicG9CLGFBQUEsRUFBZXlvQjtBQUNqQixDQUFDO0FBRURocEIsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxTQUFTLFVBQVUsV0FBVyxVQUFVLFdBQVcsWUFBWSxVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsUUFBUTtFQUNqSUMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztFQUNYO0VBRUFMLFFBQVFzYyxLQUFBLEVBQU87SUFDYixJQUFJO01BQ0Y1TyxNQUFBO01BQ0FEO0lBQ0YsSUFBSTZPLEtBQUE7SUFDSixJQUFJeU0sS0FBQSxHQUFRdGIsUUFBQTtJQUVaLElBQUlzYixLQUFBLENBQU1wckMsTUFBQSxLQUFXLEdBQUc7TUFDdEJvckMsS0FBQSxHQUFRQyxtQkFBQSxDQUFvQkQsS0FBQTtJQUM5QjtJQUVBLE9BQU87TUFDTGpwQyxJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYitmLE1BQUEsRUFBUTtNQUNSRSxjQUFBLEVBQWdCO01BQ2hCQyxNQUFBLEVBQVE7TUFDUnB5QixJQUFBLEVBQU1zckM7SUFDUjtFQUNGO0VBRUE5b0IsV0FBQSxFQUFhc29CLGFBQUE7RUFDYnBvQixhQUFBLEVBQWV5b0I7QUFDakIsQ0FBQztBQUtELElBQUlLLGFBQUEsR0FBZ0JBLENBQUMxZSxHQUFBLEVBQUtsbkIsT0FBQSxLQUFZO0VBRXBDLElBQUkwa0MsUUFBQTtFQUNKLElBQUlDLFFBQUE7RUFDSixJQUFJUSxTQUFBLEdBQVk7RUFDaEIsSUFBSTNvQyxLQUFBO0VBRUosSUFBSTBxQixHQUFBLENBQUl6cUIsSUFBQSxLQUFTLFVBQVU7SUFJekJpb0MsUUFBQSxHQUFXeGQsR0FBQSxDQUFJbG1CLEdBQUE7SUFDZjJqQyxRQUFBLEdBQVd6ZCxHQUFBLENBQUlobUIsR0FBQTtJQUNmMUUsS0FBQSxHQUFRc3NCLGNBQUEsQ0FBZTVCLEdBQUEsQ0FBSUUsSUFBQSxFQUFNLGNBQWM7SUFDL0MrZCxTQUFBLEdBQVk7RUFDZCxPQUFPO0lBQ0wzb0MsS0FBQSxHQUFRc3NCLGNBQUEsQ0FBZTVCLEdBQUEsRUFBSyxjQUFjO0VBQzVDO0VBRUEsSUFBSUUsSUFBQTtFQUVKLElBQUk1cUIsS0FBQSxDQUFNRSxJQUFBLENBQUtwQyxNQUFBLEdBQVMsR0FBRztJQUN6QixJQUFJb0MsSUFBQSxHQUFPRixLQUFBLENBQU1FLElBQUEsQ0FBSytNLEdBQUEsQ0FBSW84QixNQUFBLElBQVM7TUFFakMsSUFBSUMsU0FBQSxHQUFZRCxNQUFBLENBQU1oc0MsSUFBQTtNQUV0QixJQUFJLE9BQU9pc0MsU0FBQSxLQUFjLFVBQVU7UUFDakMsT0FBTztVQUNMcnBDLElBQUEsRUFBTTtVQUNONlAsSUFBQSxFQUFNdTVCLE1BQUEsQ0FBTXY1QixJQUFBO1VBQ1p6UyxJQUFBLEVBQU1pc0M7UUFDUjtNQUNGLE9BQU87UUFDTCxPQUFPRCxNQUFBO01BQ1Q7SUFDRixDQUFDO0lBRUQsSUFBSXZuQixVQUFBLEdBQWFGLGlCQUFBLENBQWtCMWhCLElBQUEsRUFBTXNELE9BQUEsQ0FBUXlPLFFBQUEsQ0FBUyxRQUFRLEdBQUcsSUFBSTtJQUV6RSxTQUFTaE0sQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSTZiLFVBQUEsQ0FBV2hrQixNQUFBLEVBQVFtSSxDQUFBLElBQUs7TUFDMUMsSUFBSStHLEtBQUEsR0FBUThVLFVBQUEsQ0FBVzdiLENBQUE7TUFFdkIsSUFBSStHLEtBQUEsWUFBaUJpSSxVQUFBLEVBQVk7UUFHL0JqSSxLQUFBLENBQU0zUCxJQUFBLEdBQU8yUCxLQUFBLENBQU0zUCxJQUFBLENBQUtlLE9BQUEsQ0FBUSxVQUFVLEdBQUcsRUFBRUEsT0FBQSxDQUFRLFVBQVUsR0FBRztNQUN0RTtJQUNGO0lBRUF3c0IsSUFBQSxHQUFPOUwsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsS0FBSyxHQUFHeUcsVUFBQSxFQUFZdGUsT0FBTztFQUMxRCxPQUFPO0lBQ0xvbkIsSUFBQSxHQUFPOUwsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsS0FBSyxHQUFHLEVBQUMsRUFBRzdYLE9BQU87RUFDbEQ7RUFFQSxJQUFJbWxDLFNBQUEsRUFBVztJQUNiLE9BQU9WLGNBQUEsQ0FBZXJkLElBQUEsRUFBTXNkLFFBQUEsRUFBVUMsUUFBQSxFQUFVM2tDLE9BQUEsRUFBU0EsT0FBQSxDQUFRNkksS0FBQSxFQUFPLEdBQUcsQ0FBQztFQUM5RSxPQUFPO0lBQ0wsT0FBT3VlLElBQUE7RUFDVDtBQUNGO0FBRUEsSUFBSTJlLGNBQUEsR0FBZ0JqcEIsQ0FBQ3RnQixLQUFBLEVBQU93RCxPQUFBLEtBQVk7RUFFdEMsSUFBSXNlLFVBQUEsR0FBYTBELGdCQUFBLENBQWdCeGxCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNc0QsT0FBQSxDQUFReU8sUUFBQSxDQUFTLFFBQVEsQ0FBQztFQUV2RSxJQUFJdTNCLFdBQUEsR0FBYztFQUVsQixTQUFTdmpDLENBQUEsR0FBSSxHQUFHQSxDQUFBLEdBQUk2YixVQUFBLENBQVdoa0IsTUFBQSxFQUFRbUksQ0FBQSxJQUFLO0lBQzFDLElBQUlpTyxJQUFBLEdBQU80TixVQUFBLENBQVc3YixDQUFBO0lBRXRCLElBQUlpTyxJQUFBLFlBQWdCK1EsVUFBQSxDQUFXRCxTQUFBLEVBQVcsVUFBVzlRLElBQUEsWUFBZ0IrUSxVQUFBLENBQVdKLFFBQUEsRUFBVTtNQUN4RixRQUFRM1EsSUFBQSxDQUFLalUsSUFBQTtRQUFBLEtBQ047UUFBQSxLQUNBO1FBQUEsS0FDQTtRQUFBLEtBQ0E7UUFBQSxLQUNBO1VBQ0g7UUFBQSxLQUdHO1VBQ0g7WUFDRSxJQUFJK00sS0FBQSxHQUFRa0gsSUFBQSxDQUFLakksUUFBQSxDQUFTO1lBRTFCLElBQUlpSSxJQUFBLENBQUtqSSxRQUFBLENBQVNuTyxNQUFBLEtBQVcsS0FBS2tQLEtBQUEsWUFBaUJpWSxVQUFBLENBQVdGLFFBQUEsRUFBVTtjQUN0RS9YLEtBQUEsQ0FBTTNQLElBQUEsR0FBTzJQLEtBQUEsQ0FBTTNQLElBQUEsQ0FBS2UsT0FBQSxDQUFRLFVBQVUsR0FBRyxFQUFFQSxPQUFBLENBQVEsVUFBVSxHQUFHO1lBQ3RFLE9BQU87Y0FDTG9yQyxXQUFBLEdBQWM7WUFDaEI7WUFFQTtVQUNGO1FBQUE7VUFHQUEsV0FBQSxHQUFjO01BQUE7SUFFcEIsT0FBTztNQUNMQSxXQUFBLEdBQWM7SUFDaEI7RUFDRjtFQUVBLElBQUlBLFdBQUEsRUFBYTtJQUVmLElBQUlDLElBQUEsR0FBTzNuQixVQUFBLENBQVc3VSxHQUFBLENBQUl1VixLQUFBLElBQVFBLEtBQUEsQ0FBS3pWLE1BQUEsQ0FBTyxDQUFDLEVBQUVHLElBQUEsQ0FBSyxFQUFFO0lBQ3hENFUsVUFBQSxHQUFhLENBQUMsSUFBSW1ELFVBQUEsQ0FBV0YsUUFBQSxDQUFTMGtCLElBQUksQ0FBQztFQUM3QztFQUVBLElBQUlDLFVBQUEsR0FBYSxJQUFJemtCLFVBQUEsQ0FBV0osUUFBQSxDQUFTLE1BQU0vQyxVQUFVO0VBQ3pENG5CLFVBQUEsQ0FBV3IxQixZQUFBLENBQWEsZUFBZSxRQUFRO0VBRy9DLElBQUkyMEIsUUFBQSxHQUFXLElBQUkvakIsVUFBQSxDQUFXSixRQUFBLENBQVMsTUFBTSxDQUFDSyxRQUFBLENBQVMsVUFBVSxNQUFNLENBQUMsQ0FBQztFQUV6RSxJQUFJbGxCLEtBQUEsQ0FBTSt2QixjQUFBLEVBQWdCO0lBQ3hCLE9BQU8sSUFBSTlLLFVBQUEsQ0FBV0osUUFBQSxDQUFTLFFBQVEsQ0FBQzZrQixVQUFBLEVBQVlWLFFBQVEsQ0FBQztFQUMvRCxPQUFPO0lBQ0wsT0FBTy9qQixVQUFBLENBQVdMLG1CQUFBLENBQW9CLENBQUM4a0IsVUFBQSxFQUFZVixRQUFRLENBQUM7RUFDOUQ7QUFDRjtBQUlBanBCLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsbUJBQW1CLDBCQUEwQjtFQUNyREMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztFQUNYO0VBQ0FMLE9BQUEsRUFBU0EsQ0FBQ0gsSUFBQSxFQUFNMk4sSUFBQSxLQUFTO0lBQ3ZCLElBQUk7TUFDRkUsTUFBQTtNQUNBRDtJQUNGLElBQUk1TixJQUFBO0lBQ0osSUFBSTlmLElBQUEsR0FBT3l0QixJQUFBLENBQUs7SUFDaEIsT0FBTztNQUNMMXRCLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiNVAsSUFBQSxFQUFNbWhCLFdBQUEsQ0FBWW5oQixJQUFJO01BQ3RCNHZCLGtCQUFBLEVBQW9CbEMsUUFBQSxLQUFhO01BQ2pDaUMsTUFBQSxFQUFRO01BQ1JFLGNBQUEsRUFBZ0I7SUFDbEI7RUFDRjtFQUNBM1AsV0FBQSxFQUFhZ3BCLGFBQUE7RUFDYjlvQixhQUFBLEVBQUFpcEI7QUFDRixDQUFDO0FBQ0QxTSxXQUFBLENBQVksa0JBQWtCLGtEQUFrRDtBQUVoRjdiLHNCQUFBLENBQXVCO0VBQ3JCL2dCLElBQUEsRUFBTTtFQUVObWdCLFlBQVlwZ0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBQzFCLElBQUl4RCxLQUFBLENBQU0ycEMsVUFBQSxFQUFZO01BQ3BCLE9BQU83cUIsV0FBQSxDQUFZdkUsWUFBQSxDQUFhcUgsaUJBQUEsQ0FBa0I1aEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFBLEVBQVMsS0FBSyxDQUFDO0lBQy9FO0lBRUEsT0FBT3NiLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLE1BQU0sR0FBR3VHLGlCQUFBLENBQWtCNWhCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNc0QsT0FBQSxFQUFTLElBQUksR0FBR0EsT0FBTztFQUM3RjtFQUVBOGMsY0FBY3RnQixLQUFBLEVBQU93RCxPQUFBLEVBQVM7SUFDNUIsT0FBT3VpQixrQkFBQSxDQUFtQi9sQixLQUFBLENBQU1FLElBQUEsRUFBTXNELE9BQUEsRUFBUyxJQUFJO0VBQ3JEO0FBRUYsQ0FBQztBQUVEdWMsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxZQUFZO0VBQ3BCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0VBQ1g7RUFFQUwsUUFBUUgsSUFBQSxFQUFNMk4sSUFBQSxFQUFNO0lBQ2xCLElBQUk7TUFDRkU7SUFDRixJQUFJN04sSUFBQTtJQUNKLElBQUk5ZixJQUFBLEdBQU95dEIsSUFBQSxDQUFLO0lBQ2hCLE9BQU87TUFDTDF0QixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYjVQO0lBQ0Y7RUFDRjtFQUVBa2dCLFlBQVlwZ0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBRzFCLElBQUlzcUIsVUFBQSxHQUFhNUwsWUFBQSxDQUFhbGlCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNc0QsT0FBQSxDQUFRa08sa0JBQUEsQ0FBbUIsQ0FBQztJQUV0RSxJQUFJZ0ssSUFBQSxHQUFPb0QsV0FBQSxDQUFZdkQsWUFBQSxDQUFhLGlCQUFpQi9YLE9BQU87SUFFNUQsSUFBSW1MLG9CQUFBLEdBQXVCbkwsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUU3RCxvQkFBQTtJQUNqRCxJQUFJa1AsS0FBQSxHQUFRaUIsV0FBQSxDQUFZL0IsU0FBQSxDQUFVO01BQ2hDVCxZQUFBLEVBQWM7TUFDZHJRLFFBQUEsRUFBVSxDQUFDO1FBQ1RoTSxJQUFBLEVBQU07UUFDTm5CLElBQUEsRUFBTWd2QjtNQUNSLEdBQUc7UUFDRDd0QixJQUFBLEVBQU07UUFDTnFFLElBQUEsRUFBTSxJQUFJcUs7TUFDWixHQUFHO1FBQ0QxTyxJQUFBLEVBQU07UUFDTm5CLElBQUEsRUFBTTRjO01BQ1IsR0FBRztRQUNEemIsSUFBQSxFQUFNO1FBQ05xRSxJQUFBLEVBQU1xSztNQUNSLENBQUM7SUFDSCxHQUFHbkwsT0FBTztJQUNWLE9BQU9zYixXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxRQUFRLFVBQVUsR0FBRyxDQUFDd0MsS0FBSyxHQUFHcmEsT0FBTztFQUNwRTtFQUVBOGMsY0FBY3RnQixLQUFBLEVBQU93RCxPQUFBLEVBQVM7SUFDNUIsSUFBSXdsQyxRQUFBLEdBQVcsSUFBSS9qQixVQUFBLENBQVdKLFFBQUEsQ0FBUyxNQUFNLENBQUMsSUFBSUksVUFBQSxDQUFXRixRQUFBLENBQVMsUUFBUSxDQUFDLENBQUM7SUFDaEZpa0IsUUFBQSxDQUFTMzBCLFlBQUEsQ0FBYSxZQUFZLE1BQU07SUFDeEMsSUFBSUgsSUFBQSxHQUFPLElBQUkrUSxVQUFBLENBQVdKLFFBQUEsQ0FBUyxTQUFTLENBQUNjLFdBQUEsQ0FBVzNsQixLQUFBLENBQU1FLElBQUEsRUFBTXNELE9BQU8sR0FBR3dsQyxRQUFRLENBQUM7SUFDdkY5MEIsSUFBQSxDQUFLRyxZQUFBLENBQWEsVUFBVSxNQUFNO0lBQ2xDLE9BQU9ILElBQUE7RUFDVDtBQUVGLENBQUM7QUFFRDZMLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsV0FBVztFQUNuQkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNURyxhQUFBLEVBQWU7RUFDakI7RUFDQVIsT0FBQSxFQUFTQSxDQUFDSCxJQUFBLEVBQU0yTixJQUFBLEtBQVM7SUFDdkIsSUFBSTtNQUNGRTtJQUNGLElBQUk3TixJQUFBO0lBQ0osSUFBSTlmLElBQUEsR0FBT3l0QixJQUFBLENBQUs7SUFDaEIsT0FBTztNQUNMMXRCLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiNVAsSUFBQSxFQUFNbWhCLFdBQUEsQ0FBWW5oQixJQUFJO0lBQ3hCO0VBQ0Y7RUFDQWtnQixXQUFBLEVBQWFBLENBQUNwZ0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBQy9CLElBQUl5ckIsUUFBQSxHQUFXck4saUJBQUEsQ0FBa0I1aEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFBLENBQVF3TyxXQUFBLENBQVksR0FBRyxLQUFLO0lBR3pFLE9BQU84TSxXQUFBLENBQVl2RSxZQUFBLENBQWEwVSxRQUFRO0VBQzFDO0VBQ0EzTyxhQUFBLEVBQWVBLENBQUN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBQ2pDLElBQUlzb0IsTUFBQSxHQUFRdEcsZ0JBQUEsQ0FBZ0J4bEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFPO0lBQy9DLE9BQU8sSUFBSXloQixVQUFBLENBQVdKLFFBQUEsQ0FBUyxZQUFZaUgsTUFBSztFQUNsRDtBQUNGLENBQUM7QUFDRC9MLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsWUFBWTtFQUNwQkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNURyxhQUFBLEVBQWU7RUFDakI7RUFDQVIsT0FBQSxFQUFTQSxDQUFDYyxLQUFBLEVBQU8wTSxJQUFBLEtBQVM7SUFDeEIsSUFBSTtNQUNGRTtJQUNGLElBQUk1TSxLQUFBO0lBQ0osSUFBSS9nQixJQUFBLEdBQU95dEIsSUFBQSxDQUFLO0lBQ2hCLE9BQU87TUFDTDF0QixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYjVQO0lBQ0Y7RUFDRjtFQUNBa2dCLFdBQUEsRUFBYUEsQ0FBQ3BnQixLQUFBLEVBQU93RCxPQUFBLEtBQVk7SUFDL0IsSUFBSTBRLElBQUEsR0FBTzRLLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxFQUFDLEVBQUcsQ0FBQzZHLFlBQUEsQ0FBYWxpQixLQUFBLENBQU1FLElBQUEsRUFBTXNELE9BQUEsQ0FBUXdPLFdBQUEsQ0FBWSxDQUFDLENBQUMsQ0FBQztJQUNyRmtDLElBQUEsQ0FBSy9MLE1BQUEsR0FBUztJQUNkK0wsSUFBQSxDQUFLL0gsS0FBQSxHQUFRO0lBRWIsSUFBSStILElBQUEsQ0FBS2pJLFFBQUEsRUFBVTtNQUNqQixTQUFTaEcsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSWlPLElBQUEsQ0FBS2pJLFFBQUEsQ0FBU25PLE1BQUEsRUFBUW1JLENBQUEsSUFBSztRQUM3Q2lPLElBQUEsQ0FBS2pJLFFBQUEsQ0FBU2hHLENBQUEsRUFBR2tDLE1BQUEsR0FBUztRQUMxQitMLElBQUEsQ0FBS2pJLFFBQUEsQ0FBU2hHLENBQUEsRUFBR2tHLEtBQUEsR0FBUTtNQUMzQjtJQUNGO0lBR0ErSCxJQUFBLEdBQU80SyxXQUFBLENBQVkvQixTQUFBLENBQVU7TUFDM0JULFlBQUEsRUFBYztNQUNkclEsUUFBQSxFQUFVLENBQUM7UUFDVGhNLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNb1Y7TUFDUixDQUFDO0lBQ0gsR0FBRzFRLE9BQU87SUFFVixPQUFPc2IsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsTUFBTSxHQUFHLENBQUNuSCxJQUFJLEdBQUcxUSxPQUFPO0VBQ3ZEO0VBQ0E4YyxhQUFBLEVBQWVBLENBQUN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBQ2pDLElBQUlzb0IsTUFBQSxHQUFRdEcsZ0JBQUEsQ0FBZ0JuRSxXQUFBLENBQVlyaEIsS0FBQSxDQUFNRSxJQUFJLEdBQUdzRCxPQUFPO0lBQzVELElBQUl3TixPQUFBLEdBQVUsSUFBSWlVLFVBQUEsQ0FBV0osUUFBQSxDQUFTLFlBQVlpSCxNQUFLO0lBQ3ZELElBQUk1WCxJQUFBLEdBQU8sSUFBSStRLFVBQUEsQ0FBV0osUUFBQSxDQUFTLFdBQVcsQ0FBQzdULE9BQU8sQ0FBQztJQUN2RGtELElBQUEsQ0FBS0csWUFBQSxDQUFhLFVBQVUsS0FBSztJQUNqQ0gsSUFBQSxDQUFLRyxZQUFBLENBQWEsU0FBUyxLQUFLO0lBQ2hDLE9BQU9ILElBQUE7RUFDVDtBQUNGLENBQUM7QUFDRDZMLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsWUFBWTtFQUNwQkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNURyxhQUFBLEVBQWU7RUFDakI7RUFDQVIsT0FBQSxFQUFTQSxDQUFDc1AsS0FBQSxFQUFPOUIsSUFBQSxLQUFTO0lBQ3hCLElBQUk7TUFDRkU7SUFDRixJQUFJNEIsS0FBQTtJQUNKLElBQUl2dkIsSUFBQSxHQUFPeXRCLElBQUEsQ0FBSztJQUNoQixPQUFPO01BQ0wxdEIsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU0rZCxNQUFBLENBQU8vZCxJQUFBO01BQ2I1UDtJQUNGO0VBQ0Y7RUFDQWtnQixXQUFBLEVBQWFBLENBQUNwZ0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBQy9CLElBQUlzb0IsTUFBQSxHQUFRaE4sV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsT0FBTyxHQUFHLENBQUM2RyxZQUFBLENBQWFsaUIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFBLENBQVF3TyxXQUFBLENBQVksQ0FBQyxDQUFDLENBQUM7SUFDN0YsSUFBSTAxQixHQUFBLEdBQU01b0IsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsS0FBSyxHQUFHLEVBQUU7SUFDMUMsT0FBT3lELFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLFFBQVEsTUFBTSxHQUFHLENBQUN5USxNQUFBLEVBQU80YixHQUFHLEdBQUdsa0MsT0FBTztFQUNyRTtFQUNBOGMsYUFBQSxFQUFlQSxDQUFDdGdCLEtBQUEsRUFBT3dELE9BQUEsS0FBWTtJQUNqQyxJQUFJc29CLE1BQUEsR0FBUXRHLGdCQUFBLENBQWdCbkUsV0FBQSxDQUFZcmhCLEtBQUEsQ0FBTUUsSUFBSSxHQUFHc0QsT0FBTztJQUM1RCxJQUFJd04sT0FBQSxHQUFVLElBQUlpVSxVQUFBLENBQVdKLFFBQUEsQ0FBUyxZQUFZaUgsTUFBSztJQUN2RCxJQUFJNVgsSUFBQSxHQUFPLElBQUkrUSxVQUFBLENBQVdKLFFBQUEsQ0FBUyxXQUFXLENBQUM3VCxPQUFPLENBQUM7SUFDdkRrRCxJQUFBLENBQUtHLFlBQUEsQ0FBYSxTQUFTLEtBQUs7SUFDaEMsT0FBT0gsSUFBQTtFQUNUO0FBQ0YsQ0FBQztBQUVENkwsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxZQUFZO0VBQ3BCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RDLFFBQUEsRUFBVSxDQUFDLFFBQVEsTUFBTTtJQUN6QkUsYUFBQSxFQUFlO0VBQ2pCO0VBRUFSLFFBQVFILElBQUEsRUFBTTJOLElBQUEsRUFBTTtJQUNsQixJQUFJO01BQ0ZFO0lBQ0YsSUFBSTdOLElBQUE7SUFDSixJQUFJNHBCLE1BQUEsR0FBU3RkLGNBQUEsQ0FBZXFCLElBQUEsQ0FBSyxJQUFJLE1BQU0sRUFBRW50QixLQUFBO0lBQzdDLElBQUlOLElBQUEsR0FBT3l0QixJQUFBLENBQUs7SUFDaEIsT0FBTztNQUNMMXRCLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiKzVCLEVBQUEsRUFBSUQsTUFBQTtNQUNKMXBDO0lBQ0Y7RUFDRjtFQUVBa2dCLFlBQVlwZ0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBQzFCLElBQUl0RCxJQUFBLEdBQU9naUIsWUFBQSxDQUFhbGlCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNc0QsT0FBTztJQUMzQyxJQUFJcW1DLEVBQUEsR0FBSzkyQixhQUFBLENBQWMvUyxLQUFBLENBQU02cEMsRUFBQSxFQUFJcm1DLE9BQU87SUFDeEMsT0FBT3NiLFdBQUEsQ0FBWS9CLFNBQUEsQ0FBVTtNQUMzQlQsWUFBQSxFQUFjO01BQ2RPLFlBQUEsRUFBYyxDQUFDZ3RCLEVBQUE7TUFDZjU5QixRQUFBLEVBQVUsQ0FBQztRQUNUaE0sSUFBQSxFQUFNO1FBQ05uQixJQUFBLEVBQU1vQjtNQUNSLENBQUM7SUFDSCxHQUFHc0QsT0FBTztFQUNaO0VBRUE4YyxjQUFjdGdCLEtBQUEsRUFBT3dELE9BQUEsRUFBUztJQUM1QixJQUFJMFEsSUFBQSxHQUFPLElBQUkrUSxVQUFBLENBQVdKLFFBQUEsQ0FBUyxXQUFXLENBQUNjLFdBQUEsQ0FBVzNsQixLQUFBLENBQU1FLElBQUEsRUFBTXNELE9BQU8sQ0FBQyxDQUFDO0lBQy9FLElBQUlxbUMsRUFBQSxHQUFLN3BDLEtBQUEsQ0FBTTZwQyxFQUFBLENBQUd4MkIsTUFBQSxHQUFTclQsS0FBQSxDQUFNNnBDLEVBQUEsQ0FBRy8yQixJQUFBO0lBQ3BDb0IsSUFBQSxDQUFLRyxZQUFBLENBQWEsV0FBV3cxQixFQUFFO0lBQy9CLE9BQU8zMUIsSUFBQTtFQUNUO0FBRUYsQ0FBQztBQUVENkwsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxTQUFTO0VBQ2pCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RHLGFBQUEsRUFBZTtFQUNqQjtFQUVBUixRQUFRSCxJQUFBLEVBQU07SUFDWixJQUFJO01BQ0Y2TjtJQUNGLElBQUk3TixJQUFBO0lBQ0osT0FBTztNQUNML2YsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU0rZCxNQUFBLENBQU8vZDtJQUNmO0VBQ0Y7QUFFRixDQUFDO0FBRURpUSxjQUFBLENBQWU7RUFDYjlmLElBQUEsRUFBTTtFQUNOZ2dCLEtBQUEsRUFBTyxDQUFDLFFBQVE7RUFDaEJDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7SUFDVEssZUFBQSxFQUFpQjtJQUNqQkosUUFBQSxFQUFVLENBQUMsUUFBUSxRQUFRLE1BQU07RUFDbkM7RUFFQU4sUUFBUUgsSUFBQSxFQUFNMk4sSUFBQSxFQUFNTSxPQUFBLEVBQVM7SUFDM0IsSUFBSTtNQUNGSjtJQUNGLElBQUk3TixJQUFBO0lBQ0osSUFBSXZELEtBQUEsR0FBUXdSLE9BQUEsQ0FBUTtJQUNwQixJQUFJOWQsS0FBQSxHQUFRbWMsY0FBQSxDQUFlcUIsSUFBQSxDQUFLLElBQUksTUFBTTtJQUMxQyxJQUFJeGxCLE1BQUEsR0FBU21rQixjQUFBLENBQWVxQixJQUFBLENBQUssSUFBSSxNQUFNO0lBQzNDLE9BQU87TUFDTDF0QixJQUFBLEVBQU07TUFDTjZQLElBQUEsRUFBTStkLE1BQUEsQ0FBTy9kLElBQUE7TUFDYjJNLEtBQUEsRUFBT0EsS0FBQSxJQUFTNlAsY0FBQSxDQUFlN1AsS0FBQSxFQUFPLE1BQU0sRUFBRWpjLEtBQUE7TUFDOUMyUCxLQUFBLEVBQU9BLEtBQUEsQ0FBTTNQLEtBQUE7TUFDYjJILE1BQUEsRUFBUUEsTUFBQSxDQUFPM0g7SUFDakI7RUFDRjtFQUVBNGYsWUFBWXBnQixLQUFBLEVBQU93RCxPQUFBLEVBQVM7SUFFMUIsSUFBSTZhLElBQUEsR0FBT1MsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsUUFBUSxNQUFNLEdBQUcsRUFBQyxFQUFHN1gsT0FBTztJQUU3RCxJQUFJMk0sS0FBQSxHQUFRNEMsYUFBQSxDQUFjL1MsS0FBQSxDQUFNbVEsS0FBQSxFQUFPM00sT0FBTztJQUM5QyxJQUFJMkUsTUFBQSxHQUFTNEssYUFBQSxDQUFjL1MsS0FBQSxDQUFNbUksTUFBQSxFQUFRM0UsT0FBTztJQUNoRCxJQUFJaVosS0FBQSxHQUFRemMsS0FBQSxDQUFNeWMsS0FBQSxHQUFRMUosYUFBQSxDQUFjL1MsS0FBQSxDQUFNeWMsS0FBQSxFQUFPalosT0FBTyxJQUFJO0lBRWhFNmEsSUFBQSxDQUFLaFMsS0FBQSxDQUFNZ3dCLGdCQUFBLEdBQW1CL29CLE1BQUEsQ0FBT25ELEtBQUs7SUFDMUNrTyxJQUFBLENBQUtoUyxLQUFBLENBQU0rdkIsY0FBQSxHQUFpQjlvQixNQUFBLENBQU9uTCxNQUFNO0lBQ3pDa1csSUFBQSxDQUFLaFMsS0FBQSxDQUFNdVEsTUFBQSxHQUFTdEosTUFBQSxDQUFPbUosS0FBSztJQUVoQzRCLElBQUEsQ0FBS2xPLEtBQUEsR0FBUUEsS0FBQTtJQUNia08sSUFBQSxDQUFLbFcsTUFBQSxHQUFTQSxNQUFBLEdBQVNzVSxLQUFBO0lBQ3ZCNEIsSUFBQSxDQUFLbFMsS0FBQSxHQUFRLENBQUNzUSxLQUFBO0lBSWQ0QixJQUFBLENBQUtqUyxXQUFBLEdBQWNqRSxNQUFBLEdBQVMsUUFBUTNFLE9BQUEsQ0FBUTROLGNBQUE7SUFDNUMsT0FBT2lOLElBQUE7RUFDVDtFQUVBaUMsY0FBY3RnQixLQUFBLEVBQU93RCxPQUFBLEVBQVM7SUFDNUIsSUFBSTJNLEtBQUEsR0FBUTRDLGFBQUEsQ0FBYy9TLEtBQUEsQ0FBTW1RLEtBQUEsRUFBTzNNLE9BQU87SUFDOUMsSUFBSTJFLE1BQUEsR0FBUzRLLGFBQUEsQ0FBYy9TLEtBQUEsQ0FBTW1JLE1BQUEsRUFBUTNFLE9BQU87SUFDaEQsSUFBSWlaLEtBQUEsR0FBUXpjLEtBQUEsQ0FBTXljLEtBQUEsR0FBUTFKLGFBQUEsQ0FBYy9TLEtBQUEsQ0FBTXljLEtBQUEsRUFBT2paLE9BQU8sSUFBSTtJQUNoRSxJQUFJNUIsS0FBQSxHQUFRNEIsT0FBQSxDQUFRNUIsS0FBQSxJQUFTNEIsT0FBQSxDQUFRaVAsUUFBQSxDQUFTLEtBQUs7SUFDbkQsSUFBSTRMLElBQUEsR0FBTyxJQUFJNEcsVUFBQSxDQUFXSixRQUFBLENBQVMsUUFBUTtJQUMzQ3hHLElBQUEsQ0FBS2hLLFlBQUEsQ0FBYSxrQkFBa0J6UyxLQUFLO0lBQ3pDeWMsSUFBQSxDQUFLaEssWUFBQSxDQUFhLFNBQVNmLE1BQUEsQ0FBT25ELEtBQUssQ0FBQztJQUN4Q2tPLElBQUEsQ0FBS2hLLFlBQUEsQ0FBYSxVQUFVZixNQUFBLENBQU9uTCxNQUFNLENBQUM7SUFDMUMsSUFBSW1lLE9BQUEsR0FBVSxJQUFJckIsVUFBQSxDQUFXSixRQUFBLENBQVMsV0FBVyxDQUFDeEcsSUFBSSxDQUFDO0lBRXZELElBQUk1QixLQUFBLElBQVMsR0FBRztNQUNkNkosT0FBQSxDQUFRalMsWUFBQSxDQUFhLFVBQVVmLE1BQUEsQ0FBT21KLEtBQUssQ0FBQztJQUM5QyxPQUFPO01BQ0w2SixPQUFBLENBQVFqUyxZQUFBLENBQWEsVUFBVWYsTUFBQSxDQUFPbUosS0FBSyxDQUFDO01BQzVDNkosT0FBQSxDQUFRalMsWUFBQSxDQUFhLFNBQVNmLE1BQUEsQ0FBTyxDQUFDbUosS0FBSyxDQUFDO0lBQzlDO0lBRUE2SixPQUFBLENBQVFqUyxZQUFBLENBQWEsV0FBV2YsTUFBQSxDQUFPbUosS0FBSyxDQUFDO0lBQzdDLE9BQU82SixPQUFBO0VBQ1Q7QUFFRixDQUFDO0FBRUQsU0FBU3dqQixZQUFZdHBDLEtBQUEsRUFBT2dELE9BQUEsRUFBU3VnQixXQUFBLEVBQWE7RUFDaEQsSUFBSStILE1BQUEsR0FBUWxLLGlCQUFBLENBQWtCcGhCLEtBQUEsRUFBT2dELE9BQUEsRUFBUyxLQUFLO0VBQ25ELElBQUl5Z0IsVUFBQSxHQUFhemdCLE9BQUEsQ0FBUTROLGNBQUEsR0FBaUIyUyxXQUFBLENBQVkzUyxjQUFBO0VBR3RELFNBQVNuTCxDQUFBLEdBQUksR0FBR0EsQ0FBQSxHQUFJNmxCLE1BQUEsQ0FBTWh1QixNQUFBLEVBQVFtSSxDQUFBLElBQUs7SUFDckMsSUFBSSs0QixHQUFBLEdBQU1sVCxNQUFBLENBQU03bEIsQ0FBQSxFQUFHaUcsT0FBQSxDQUFRbk4sT0FBQSxDQUFRLFFBQVE7SUFFM0MsSUFBSWlnQyxHQUFBLEdBQU0sR0FBRztNQUNYMzdCLEtBQUEsQ0FBTTNFLFNBQUEsQ0FBVXVELElBQUEsQ0FBSzhuQyxLQUFBLENBQU1qZSxNQUFBLENBQU03bEIsQ0FBQSxFQUFHaUcsT0FBQSxFQUFTMUksT0FBQSxDQUFRNk8sYUFBQSxDQUFjMFIsV0FBVyxDQUFDO0lBQ2pGLFdBQVcrSCxNQUFBLENBQU03bEIsQ0FBQSxFQUFHaUcsT0FBQSxDQUFROHlCLEdBQUEsR0FBTSxPQUFPLGVBQWV4N0IsT0FBQSxDQUFRYyxJQUFBLEVBQU07TUFJcEV3bkIsTUFBQSxDQUFNN2xCLENBQUEsRUFBR2lHLE9BQUEsQ0FBUTh5QixHQUFBLEdBQU0sS0FBSyxlQUFlamIsV0FBQSxDQUFZemYsSUFBQTtJQUN6RDtJQUVBd25CLE1BQUEsQ0FBTTdsQixDQUFBLEVBQUdrQyxNQUFBLElBQVU4YixVQUFBO0lBQ25CNkgsTUFBQSxDQUFNN2xCLENBQUEsRUFBR2tHLEtBQUEsSUFBUzhYLFVBQUE7RUFDcEI7RUFFQSxPQUFPbkYsV0FBQSxDQUFZdkUsWUFBQSxDQUFhdVIsTUFBSztBQUN2QztBQUNBLElBQUlrZSxTQUFBLEdBQVksQ0FBQyxVQUFVLGVBQWUsZ0JBQWdCLGtCQUFrQixXQUFXLGdCQUFnQixXQUFXLFdBQVcsV0FBVyxVQUFVLFFBQVE7QUFDMUosSUFBSUMsWUFBQSxHQUFjN3BCLENBQUNwZ0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0VBSXBDLElBQUkycUIsVUFBQSxHQUFhM3FCLE9BQUEsQ0FBUW1PLFVBQUEsQ0FBVzNSLEtBQUEsQ0FBTXNFLElBQUk7RUFDOUMsT0FBT3dsQyxXQUFBLENBQVk5cEMsS0FBQSxDQUFNRSxJQUFBLEVBQU1pdUIsVUFBQSxFQUFZM3FCLE9BQU87QUFDcEQ7QUFDQXVjLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPK3BCLFNBQUE7RUFDUDlwQixLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RHLGFBQUEsRUFBZTtFQUNqQjtFQUNBUixPQUFBLEVBQVNBLENBQUNILElBQUEsRUFBTTJOLElBQUEsS0FBUztJQUN2QixJQUFJO01BQ0Z3RixnQkFBQTtNQUNBdkYsUUFBQTtNQUNBQztJQUNGLElBQUk3TixJQUFBO0lBQ0osSUFBSTlmLElBQUEsR0FBTzJ0QixNQUFBLENBQU8yRCxlQUFBLENBQWdCLE9BQU8yQixnQkFBZ0I7SUFDekQsT0FBTztNQUNMbHpCLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUVieEwsSUFBQSxFQUFNMGxDLFNBQUEsQ0FBVWpyQyxPQUFBLENBQVE2dUIsUUFBUSxJQUFJO01BQ3BDMXRCO0lBQ0Y7RUFDRjtFQUNBa2dCLFdBQUEsRUFBQTZwQixZQUFBO0VBQ0EzcEIsYUFBQSxFQUFlQSxDQUFDdGdCLEtBQUEsRUFBT3dELE9BQUEsS0FBWTtJQUNqQyxJQUFJMnFCLFVBQUEsR0FBYTNxQixPQUFBLENBQVFtTyxVQUFBLENBQVczUixLQUFBLENBQU1zRSxJQUFJO0lBQzlDLElBQUl3bkIsTUFBQSxHQUFRdEcsZ0JBQUEsQ0FBZ0J4bEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1pdUIsVUFBVTtJQUNsRCxJQUFJamEsSUFBQSxHQUFPLElBQUkrUSxVQUFBLENBQVdKLFFBQUEsQ0FBUyxVQUFVaUgsTUFBSztJQU1sRDVYLElBQUEsQ0FBS0csWUFBQSxDQUFhLFlBQVlmLE1BQUEsQ0FBTzZhLFVBQUEsQ0FBVy9jLGNBQWMsQ0FBQztJQUMvRCxPQUFPOEMsSUFBQTtFQUNUO0FBQ0YsQ0FBQztBQUdENkwsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxTQUFTO0VBQ2pCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RLLGVBQUEsRUFBaUI7SUFDakJGLGFBQUEsRUFBZTtFQUNqQjtFQUNBUixPQUFBLEVBQVNBLENBQUNILElBQUEsRUFBTTJOLElBQUEsRUFBTU0sT0FBQSxLQUFZO0lBQ2hDLElBQUk7TUFDRko7SUFDRixJQUFJN04sSUFBQTtJQUNKLElBQUlrcUIsV0FBQSxHQUFjO0lBQ2xCLElBQUlDLFVBQUEsR0FBYTtJQUNqQixJQUFJQyxLQUFBLEdBQVFuYyxPQUFBLENBQVEsTUFBTTNCLGNBQUEsQ0FBZTJCLE9BQUEsQ0FBUSxJQUFJLFVBQVU7SUFFL0QsSUFBSW1jLEtBQUEsRUFBTztNQUlULElBQUlDLE1BQUEsR0FBUztNQUViLFNBQVNwa0MsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSW1rQyxLQUFBLENBQU1scUMsSUFBQSxDQUFLcEMsTUFBQSxFQUFRLEVBQUVtSSxDQUFBLEVBQUc7UUFDMUMsSUFBSWlPLElBQUEsR0FBT2syQixLQUFBLENBQU1scUMsSUFBQSxDQUFLK0YsQ0FBQTtRQUV0Qm9rQyxNQUFBLEdBQVNuMkIsSUFBQSxDQUFLN1csSUFBQTtRQUVkLElBQUlndEMsTUFBQSxLQUFXLEtBQUs7VUFDbEJILFdBQUEsR0FBYztRQUNoQixXQUFXRyxNQUFBLEtBQVcsS0FBSztVQUN6QkYsVUFBQSxHQUFhO1FBQ2YsT0FBTztVQUNMRCxXQUFBLEdBQWM7VUFDZEMsVUFBQSxHQUFhO1VBQ2I7UUFDRjtNQUNGO0lBQ0YsT0FBTztNQUNMRCxXQUFBLEdBQWM7TUFDZEMsVUFBQSxHQUFhO0lBQ2Y7SUFFQSxJQUFJanFDLElBQUEsR0FBT3l0QixJQUFBLENBQUs7SUFDaEIsT0FBTztNQUNMMXRCLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiNVAsSUFBQTtNQUNBZ3FDLFdBQUE7TUFDQUM7SUFDRjtFQUNGO0VBQ0EvcEIsV0FBQSxFQUFhQSxDQUFDcGdCLEtBQUEsRUFBT3dELE9BQUEsS0FBWTtJQUMvQixJQUFJMFEsSUFBQSxHQUFPNEssV0FBQSxDQUFZekQsUUFBQSxDQUFTLEVBQUMsRUFBRyxDQUFDNkcsWUFBQSxDQUFhbGlCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNc0QsT0FBTyxDQUFDLENBQUM7SUFFdkUsSUFBSSxDQUFDeEQsS0FBQSxDQUFNa3FDLFdBQUEsSUFBZSxDQUFDbHFDLEtBQUEsQ0FBTW1xQyxVQUFBLEVBQVk7TUFDM0MsT0FBT2oyQixJQUFBO0lBQ1Q7SUFFQSxJQUFJbFUsS0FBQSxDQUFNa3FDLFdBQUEsRUFBYTtNQUNyQmgyQixJQUFBLENBQUsvTCxNQUFBLEdBQVM7TUFFZCxJQUFJK0wsSUFBQSxDQUFLakksUUFBQSxFQUFVO1FBQ2pCLFNBQVNoRyxDQUFBLEdBQUksR0FBR0EsQ0FBQSxHQUFJaU8sSUFBQSxDQUFLakksUUFBQSxDQUFTbk8sTUFBQSxFQUFRbUksQ0FBQSxJQUFLO1VBQzdDaU8sSUFBQSxDQUFLakksUUFBQSxDQUFTaEcsQ0FBQSxFQUFHa0MsTUFBQSxHQUFTO1FBQzVCO01BQ0Y7SUFDRjtJQUVBLElBQUluSSxLQUFBLENBQU1tcUMsVUFBQSxFQUFZO01BQ3BCajJCLElBQUEsQ0FBSy9ILEtBQUEsR0FBUTtNQUViLElBQUkrSCxJQUFBLENBQUtqSSxRQUFBLEVBQVU7UUFDakIsU0FBUzlGLEVBQUEsR0FBSyxHQUFHQSxFQUFBLEdBQUsrTixJQUFBLENBQUtqSSxRQUFBLENBQVNuTyxNQUFBLEVBQVFxSSxFQUFBLElBQU07VUFDaEQrTixJQUFBLENBQUtqSSxRQUFBLENBQVM5RixFQUFBLEVBQUlnRyxLQUFBLEdBQVE7UUFDNUI7TUFDRjtJQUNGO0lBTUEsSUFBSW0rQixXQUFBLEdBQWN4ckIsV0FBQSxDQUFZL0IsU0FBQSxDQUFVO01BQ3RDVCxZQUFBLEVBQWM7TUFDZHJRLFFBQUEsRUFBVSxDQUFDO1FBQ1RoTSxJQUFBLEVBQU07UUFDTm5CLElBQUEsRUFBTW9WO01BQ1IsQ0FBQztJQUNILEdBQUcxUSxPQUFPO0lBRVYsT0FBT3NiLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDaXZCLFdBQVcsR0FBRzltQyxPQUFPO0VBQzlEO0VBQ0E4YyxhQUFBLEVBQWVBLENBQUN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0lBQ2pDLElBQUkwUSxJQUFBLEdBQU8sSUFBSStRLFVBQUEsQ0FBV0osUUFBQSxDQUFTLFdBQVcsQ0FBQ2MsV0FBQSxDQUFXM2xCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNc0QsT0FBTyxDQUFDLENBQUM7SUFFL0UsSUFBSXhELEtBQUEsQ0FBTWtxQyxXQUFBLEVBQWE7TUFDckJoMkIsSUFBQSxDQUFLRyxZQUFBLENBQWEsVUFBVSxLQUFLO0lBQ25DO0lBRUEsSUFBSXJVLEtBQUEsQ0FBTW1xQyxVQUFBLEVBQVk7TUFDcEJqMkIsSUFBQSxDQUFLRyxZQUFBLENBQWEsU0FBUyxLQUFLO0lBQ2xDO0lBRUEsT0FBT0gsSUFBQTtFQUNUO0FBQ0YsQ0FBQztBQUVENkwsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxRQUFRO0VBQ2hCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RLLGVBQUEsRUFBaUI7RUFDbkI7RUFFQVYsUUFBUUgsSUFBQSxFQUFNMk4sSUFBQSxFQUFNTSxPQUFBLEVBQVM7SUFDM0IsSUFBSTtNQUNGSjtJQUNGLElBQUk3TixJQUFBO0lBQ0osSUFBSW9ELEtBQUEsR0FBUTZLLE9BQUEsQ0FBUTtJQUNwQixJQUFJL3RCLElBQUEsR0FBT3l0QixJQUFBLENBQUs7SUFDaEIsT0FBTztNQUNMMXRCLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiNVAsSUFBQTtNQUNBa2pCO0lBQ0Y7RUFDRjtFQUVBaEQsWUFBWXBnQixLQUFBLEVBQU93RCxPQUFBLEVBQVM7SUFJMUIsSUFBSXNvQixNQUFBLEdBQVE1SixZQUFBLENBQWFsaUIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFBLENBQVFrTyxrQkFBQSxDQUFtQixDQUFDO0lBRWpFLElBQUlvYSxNQUFBLENBQU0zakIsTUFBQSxLQUFXLEdBQUc7TUFFdEIyakIsTUFBQSxDQUFNM2pCLE1BQUEsR0FBUzNFLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWSxFQUFFL0UsT0FBQTtJQUN2QztJQUlBcWUsTUFBQSxHQUFRaE4sV0FBQSxDQUFZN0MsWUFBQSxDQUFhNlAsTUFBQSxFQUFPdG9CLE9BQU87SUFFL0MsSUFBSWtNLE9BQUEsR0FBVWxNLE9BQUEsQ0FBUWdQLFdBQUEsQ0FBWTtJQUNsQyxJQUFJKzNCLEtBQUEsR0FBUTc2QixPQUFBLENBQVFmLG9CQUFBO0lBQ3BCLElBQUk2N0IsR0FBQSxHQUFNRCxLQUFBO0lBRVYsSUFBSS9tQyxPQUFBLENBQVE2SSxLQUFBLENBQU1oSSxFQUFBLEdBQUttQixPQUFBLENBQVFFLElBQUEsQ0FBS3JCLEVBQUEsRUFBSTtNQUN0Q21tQyxHQUFBLEdBQU1obkMsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUUvRSxPQUFBO0lBQzlCO0lBR0EsSUFBSWc5QixhQUFBLEdBQWdCRixLQUFBLEdBQVFDLEdBQUEsR0FBTTtJQUNsQyxJQUFJRSxrQkFBQSxHQUFxQjVlLE1BQUEsQ0FBTTNqQixNQUFBLEdBQVMyakIsTUFBQSxDQUFNM2YsS0FBQSxHQUFRcytCLGFBQUEsR0FBZ0JGLEtBQUE7SUFFdEUsSUFBSTtNQUNGcDFCLElBQUEsRUFBTThXLEdBQUE7TUFDTjhNLFNBQUE7TUFDQUY7SUFDRixJQUFJdUIsU0FBQSxDQUFVQyxTQUFBLENBQVVxUSxrQkFBQSxFQUFvQmxuQyxPQUFPO0lBQ25ELElBQUltbkMsVUFBQSxHQUFhMWUsR0FBQSxDQUFJOWpCLE1BQUEsR0FBUzR3QixTQUFBO0lBRTlCLElBQUk0UixVQUFBLEdBQWE3ZSxNQUFBLENBQU0zakIsTUFBQSxHQUFTMmpCLE1BQUEsQ0FBTTNmLEtBQUEsR0FBUXMrQixhQUFBLEVBQWU7TUFDM0RBLGFBQUEsSUFBaUJBLGFBQUEsR0FBZ0JFLFVBQUEsR0FBYTdlLE1BQUEsQ0FBTTNqQixNQUFBLEdBQVMyakIsTUFBQSxDQUFNM2YsS0FBQSxJQUFTO0lBQzlFO0lBR0EsSUFBSXl2QixRQUFBLEdBQVczUCxHQUFBLENBQUk5akIsTUFBQSxHQUFTMmpCLE1BQUEsQ0FBTTNqQixNQUFBLEdBQVNzaUMsYUFBQSxHQUFnQjFSLFNBQUE7SUFDM0RqTixNQUFBLENBQU16ZixLQUFBLENBQU0ydkIsV0FBQSxHQUFjMW9CLE1BQUEsQ0FBT3VsQixZQUFZO0lBRTdDLElBQUkzNEIsSUFBQSxHQUFPNGUsV0FBQSxDQUFZL0IsU0FBQSxDQUFVO01BQy9CVCxZQUFBLEVBQWM7TUFDZHJRLFFBQUEsRUFBVSxDQUFDO1FBQ1RoTSxJQUFBLEVBQU07UUFDTm5CLElBQUEsRUFBTWd0QixNQUFBO1FBQ050TyxjQUFBLEVBQWdCLENBQUMsV0FBVztNQUM5QixHQUFHO1FBQ0R2ZCxJQUFBLEVBQU07UUFDTnFFLElBQUEsRUFBTSxFQUFFd25CLE1BQUEsQ0FBTTNqQixNQUFBLEdBQVN5ekIsUUFBQTtNQUN6QixHQUFHO1FBQ0QzN0IsSUFBQSxFQUFNO1FBQ05uQixJQUFBLEVBQU1tdEI7TUFDUixHQUFHO1FBQ0Roc0IsSUFBQSxFQUFNO1FBQ05xRSxJQUFBLEVBQU15MEI7TUFDUixDQUFDO0lBQ0gsR0FBR3YxQixPQUFPO0lBRVYsSUFBSSxDQUFDeEQsS0FBQSxDQUFNb2pCLEtBQUEsRUFBTztNQUNoQixPQUFPdEUsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUMsUUFBUSxNQUFNLEdBQUcsQ0FBQ25iLElBQUksR0FBR3NELE9BQU87SUFDL0QsT0FBTztNQUdMLElBQUkycUIsVUFBQSxHQUFhM3FCLE9BQUEsQ0FBUWlPLFdBQUEsQ0FBWWpNLE9BQUEsQ0FBUUksWUFBWTtNQUN6RCxJQUFJZ2xDLEtBQUEsR0FBUTFvQixZQUFBLENBQWFsaUIsS0FBQSxDQUFNb2pCLEtBQUEsRUFBTytLLFVBQUEsRUFBWTNxQixPQUFPO01BR3pELElBQUlxbkMsT0FBQSxHQUFVLE9BQU8zcUMsSUFBQSxDQUFLaUksTUFBQSxHQUFTakksSUFBQSxDQUFLaU0sS0FBQTtNQUV4QyxJQUFJMitCLFNBQUEsR0FBWWhzQixXQUFBLENBQVkvQixTQUFBLENBQVU7UUFDcENULFlBQUEsRUFBYztRQUNkTyxZQUFBLEVBQWMsQ0FBQ2d1QixPQUFBO1FBQ2Y1K0IsUUFBQSxFQUFVLENBQUM7VUFDVGhNLElBQUEsRUFBTTtVQUNObkIsSUFBQSxFQUFNOHJDO1FBQ1IsQ0FBQztNQUNILEdBQUdwbkMsT0FBTztNQUdWLElBQUl1bkMsYUFBQSxHQUFnQmpzQixXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQ3l2QixTQUFTLENBQUM7TUFDOUQsT0FBT2hzQixXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxRQUFRLE1BQU0sR0FBRyxDQUFDMHZCLGFBQUEsRUFBZTdxQyxJQUFJLEdBQUdzRCxPQUFPO0lBQzlFO0VBQ0Y7RUFFQThjLGNBQWN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBQzVCLElBQUk7TUFDRnRELElBQUE7TUFDQWtqQjtJQUNGLElBQUlwakIsS0FBQTtJQUNKLE9BQU9vakIsS0FBQSxHQUFRLElBQUk2QixVQUFBLENBQVdKLFFBQUEsQ0FBUyxTQUFTLENBQUNjLFdBQUEsQ0FBV3psQixJQUFBLEVBQU1zRCxPQUFPLEdBQUdtaUIsV0FBQSxDQUFXdkMsS0FBQSxFQUFPNWYsT0FBTyxDQUFDLENBQUMsSUFBSSxJQUFJeWhCLFVBQUEsQ0FBV0osUUFBQSxDQUFTLFNBQVMsQ0FBQ2MsV0FBQSxDQUFXemxCLElBQUEsRUFBTXNELE9BQU8sQ0FBQyxDQUFDO0VBQ3pLO0FBRUYsQ0FBQztBQUVELElBQUl3bkMsUUFBQSxHQUFXO0VBQ2IsV0FBV3hsQyxPQUFBLENBQVFDLE9BQUE7RUFDbkIsUUFBUUQsT0FBQSxDQUFRRSxJQUFBO0VBQ2hCLFVBQVVGLE9BQUEsQ0FBUUcsTUFBQTtFQUNsQixnQkFBZ0JILE9BQUEsQ0FBUUk7QUFDMUI7QUFDQW1hLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsa0JBQWtCLGVBQWUsaUJBQWlCLHFCQUFxQjtFQUMvRUMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNURyxhQUFBLEVBQWU7SUFDZkksU0FBQSxFQUFXO0VBQ2I7RUFFQVosUUFBUUgsSUFBQSxFQUFNMk4sSUFBQSxFQUFNO0lBQ2xCLElBQUk7TUFDRndGLGdCQUFBO01BQ0F2RixRQUFBO01BQ0FDO0lBQ0YsSUFBSTdOLElBQUE7SUFFSixJQUFJOWYsSUFBQSxHQUFPMnRCLE1BQUEsQ0FBTzJELGVBQUEsQ0FBZ0IsTUFBTTJCLGdCQUFnQjtJQUl4RCxJQUFJOW1CLEtBQUEsR0FBUXVoQixRQUFBLENBQVN6dkIsS0FBQSxDQUFNLEdBQUd5dkIsUUFBQSxDQUFTOXZCLE1BQUEsR0FBUyxDQUFDO0lBQ2pELE9BQU87TUFDTG1DLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUdiekQsS0FBQTtNQUNBbk07SUFDRjtFQUNGO0VBRUFrZ0IsWUFBWXBnQixLQUFBLEVBQU93RCxPQUFBLEVBQVM7SUFFMUIsSUFBSXluQyxRQUFBLEdBQVdELFFBQUEsQ0FBU2hyQyxLQUFBLENBQU1xTSxLQUFBO0lBQzlCLElBQUk4aEIsVUFBQSxHQUFhM3FCLE9BQUEsQ0FBUWlPLFdBQUEsQ0FBWXc1QixRQUFRLEVBQUVoNUIsUUFBQSxDQUFTLEVBQUU7SUFDMUQsT0FBTzYzQixXQUFBLENBQVk5cEMsS0FBQSxDQUFNRSxJQUFBLEVBQU1pdUIsVUFBQSxFQUFZM3FCLE9BQU87RUFDcEQ7RUFFQThjLGNBQWN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBRTVCLElBQUl5bkMsUUFBQSxHQUFXRCxRQUFBLENBQVNockMsS0FBQSxDQUFNcU0sS0FBQTtJQUM5QixJQUFJOGhCLFVBQUEsR0FBYTNxQixPQUFBLENBQVFpTyxXQUFBLENBQVl3NUIsUUFBUTtJQUM3QyxJQUFJbmYsTUFBQSxHQUFRdEcsZ0JBQUEsQ0FBZ0J4bEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1pdUIsVUFBVTtJQUNsRCxJQUFJamEsSUFBQSxHQUFPLElBQUkrUSxVQUFBLENBQVdKLFFBQUEsQ0FBUyxVQUFVaUgsTUFBSztJQUNsRCxJQUFJb2YsZUFBQSxHQUFrQjtNQUNwQixXQUFXLENBQUMsS0FBSyxNQUFNO01BQ3ZCLFFBQVEsQ0FBQyxLQUFLLE9BQU87TUFDckIsVUFBVSxDQUFDLEtBQUssT0FBTztNQUN2QixnQkFBZ0IsQ0FBQyxLQUFLLE9BQU87SUFDL0I7SUFDQSxJQUFJOTJCLElBQUEsR0FBTzgyQixlQUFBLENBQWdCbHJDLEtBQUEsQ0FBTXFNLEtBQUE7SUFDakM2SCxJQUFBLENBQUtHLFlBQUEsQ0FBYSxlQUFlRCxJQUFBLENBQUssRUFBRTtJQUN4Q0YsSUFBQSxDQUFLRyxZQUFBLENBQWEsZ0JBQWdCRCxJQUFBLENBQUssRUFBRTtJQUN6QyxPQUFPRixJQUFBO0VBQ1Q7QUFFRixDQUFDO0FBU0QsSUFBSWkzQixtQkFBQSxHQUFzQixTQUFTQyxxQkFBb0JwckMsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0VBQ3JFLElBQUlvbkIsSUFBQSxHQUFPNXFCLEtBQUEsQ0FBTTRxQixJQUFBO0VBRWpCLElBQUksQ0FBQ0EsSUFBQSxFQUFNO0lBQ1QsT0FBTztFQUNULFdBQVdBLElBQUEsQ0FBSzNxQixJQUFBLEtBQVMsTUFBTTtJQUc3QixJQUFJb3JDLFFBQUEsR0FBV3pnQixJQUFBLENBQUtpRixNQUFBLEtBQVdyc0IsT0FBQSxDQUFRNkksS0FBQSxDQUFNL0gsSUFBQSxLQUFTa0IsT0FBQSxDQUFRQyxPQUFBLENBQVFuQixJQUFBLElBQVFzbUIsSUFBQSxDQUFLa0Ysa0JBQUE7SUFDbkYsT0FBT3ViLFFBQUEsR0FBVzNDLGFBQUEsR0FBZ0I7RUFDcEMsV0FBVzlkLElBQUEsQ0FBSzNxQixJQUFBLEtBQVMsZ0JBQWdCO0lBQ3ZDLElBQUlxckMsU0FBQSxHQUFZMWdCLElBQUEsQ0FBS2tGLGtCQUFBLEtBQXVCdHNCLE9BQUEsQ0FBUTZJLEtBQUEsQ0FBTS9ILElBQUEsS0FBU2tCLE9BQUEsQ0FBUUMsT0FBQSxDQUFRbkIsSUFBQSxJQUFRc21CLElBQUEsQ0FBS2lGLE1BQUE7SUFFaEcsT0FBT3liLFNBQUEsR0FBWWxDLGFBQUEsR0FBZ0I7RUFDckMsV0FBV3hlLElBQUEsQ0FBSzNxQixJQUFBLEtBQVMsVUFBVTtJQUNqQyxPQUFPYyxLQUFBLENBQU1aLGNBQUEsQ0FBZXlxQixJQUFBLENBQUtBLElBQUksSUFBSThCLGFBQUEsR0FBZ0I7RUFDM0QsV0FBVzlCLElBQUEsQ0FBSzNxQixJQUFBLEtBQVMsY0FBYztJQUNyQyxJQUFJc3JDLEtBQUEsR0FBUSxDQUFDdnJDLEtBQUEsQ0FBTTBFLEdBQUE7SUFDbkIsT0FBTzZtQyxLQUFBLEtBQVUzZ0IsSUFBQSxDQUFLd2IsTUFBQSxHQUFTRixhQUFBLEdBQWdCO0VBQ2pELE9BQU87SUFDTCxPQUFPO0VBQ1Q7QUFDRjtBQUlBbGxCLHNCQUFBLENBQXVCO0VBQ3JCL2dCLElBQUEsRUFBTTtFQUVObWdCLFlBQVlwZ0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBSzFCLElBQUlnb0MsZUFBQSxHQUFrQkwsbUJBQUEsQ0FBb0JuckMsS0FBQSxFQUFPd0QsT0FBTztJQUV4RCxJQUFJZ29DLGVBQUEsRUFBaUI7TUFDbkIsT0FBT0EsZUFBQSxDQUFnQnhyQyxLQUFBLEVBQU93RCxPQUFPO0lBQ3ZDO0lBRUEsSUFBSTtNQUNGb25CLElBQUEsRUFBTTZnQixTQUFBO01BQ05qbkMsR0FBQSxFQUFLa25DLFFBQUE7TUFDTGhuQyxHQUFBLEVBQUtpbkM7SUFDUCxJQUFJM3JDLEtBQUE7SUFDSixJQUFJNHFCLElBQUEsR0FBTzFJLFlBQUEsQ0FBYXVwQixTQUFBLEVBQVdqb0MsT0FBTztJQUMxQyxJQUFJb29DLElBQUE7SUFDSixJQUFJQyxJQUFBO0lBQ0osSUFBSW44QixPQUFBLEdBQVVsTSxPQUFBLENBQVFnUCxXQUFBLENBQVk7SUFFbEMsSUFBSXM1QixRQUFBLEdBQVc7SUFDZixJQUFJQyxRQUFBLEdBQVc7SUFDZixJQUFJbEksZUFBQSxHQUFpQjRILFNBQUEsSUFBYTFxQyxLQUFBLENBQU1aLGNBQUEsQ0FBZXNyQyxTQUFTO0lBRWhFLElBQUlDLFFBQUEsRUFBVTtNQUNaLElBQUl2ZCxVQUFBLEdBQWEzcUIsT0FBQSxDQUFRaU8sV0FBQSxDQUFZak8sT0FBQSxDQUFRNkksS0FBQSxDQUFNN0gsR0FBQSxDQUFJLENBQUM7TUFDeERvbkMsSUFBQSxHQUFPMXBCLFlBQUEsQ0FBYXdwQixRQUFBLEVBQVV2ZCxVQUFBLEVBQVkzcUIsT0FBTztNQUVqRCxJQUFJLENBQUNxZ0MsZUFBQSxFQUFnQjtRQUNuQmlJLFFBQUEsR0FBV2xoQixJQUFBLENBQUt6aUIsTUFBQSxHQUFTZ21CLFVBQUEsQ0FBVzNiLFdBQUEsQ0FBWSxFQUFFbEUsT0FBQSxHQUFVNmYsVUFBQSxDQUFXL2MsY0FBQSxHQUFpQjVOLE9BQUEsQ0FBUTROLGNBQUE7TUFDbEc7SUFDRjtJQUVBLElBQUl1NkIsUUFBQSxFQUFVO01BQ1osSUFBSUssV0FBQSxHQUFjeG9DLE9BQUEsQ0FBUWlPLFdBQUEsQ0FBWWpPLE9BQUEsQ0FBUTZJLEtBQUEsQ0FBTTNILEdBQUEsQ0FBSSxDQUFDO01BRXpEbW5DLElBQUEsR0FBTzNwQixZQUFBLENBQWF5cEIsUUFBQSxFQUFVSyxXQUFBLEVBQWF4b0MsT0FBTztNQUVsRCxJQUFJLENBQUNxZ0MsZUFBQSxFQUFnQjtRQUNuQmtJLFFBQUEsR0FBV25oQixJQUFBLENBQUt6ZSxLQUFBLEdBQVE2L0IsV0FBQSxDQUFZeDVCLFdBQUEsQ0FBWSxFQUFFakUsT0FBQSxHQUFVeTlCLFdBQUEsQ0FBWTU2QixjQUFBLEdBQWlCNU4sT0FBQSxDQUFRNE4sY0FBQTtNQUNuRztJQUNGO0lBR0EsSUFBSTY2QixXQUFBO0lBRUosSUFBSXpvQyxPQUFBLENBQVE2SSxLQUFBLEtBQVU3RyxPQUFBLENBQVFDLE9BQUEsRUFBUztNQUNyQ3dtQyxXQUFBLEdBQWN2OEIsT0FBQSxDQUFRekIsSUFBQTtJQUN4QixXQUFXekssT0FBQSxDQUFRNkksS0FBQSxDQUFNOUgsT0FBQSxFQUFTO01BQ2hDMG5DLFdBQUEsR0FBY3Y4QixPQUFBLENBQVF2QixJQUFBO0lBQ3hCLE9BQU87TUFDTDg5QixXQUFBLEdBQWN2OEIsT0FBQSxDQUFReEIsSUFBQTtJQUN4QjtJQUlBLElBQUkrVixVQUFBLEdBQWF6Z0IsT0FBQSxDQUFRNE4sY0FBQTtJQUN6QixJQUFJZ0UsV0FBQSxHQUFjOUIsTUFBQSxDQUFPLE1BQU01RCxPQUFBLENBQVFSLE9BQUEsR0FBVStVLFVBQVU7SUFDM0QsSUFBSXJHLFVBQUEsR0FBYTtJQUVqQixJQUFJaXVCLElBQUEsRUFBTTtNQUlSLElBQUlLLE9BQUEsR0FBVWxzQyxLQUFBLENBQU00cUIsSUFBQSxJQUFRNXFCLEtBQUEsQ0FBTTRxQixJQUFBLENBQUszcUIsSUFBQSxLQUFTLFFBQVFELEtBQUEsQ0FBTTRxQixJQUFBLENBQUtodEIsSUFBQSxLQUFTb0MsS0FBQSxDQUFNNHFCLElBQUEsQ0FBS2h0QixJQUFBLEtBQVMsYUFBYW9DLEtBQUEsQ0FBTTRxQixJQUFBLENBQUtodEIsSUFBQSxLQUFTO01BRWpJLElBQUlndEIsSUFBQSxZQUFnQjNWLFVBQUEsSUFBY2kzQixPQUFBLEVBQVM7UUFFekN0dUIsVUFBQSxHQUFhdEssTUFBQSxDQUFPLENBQUNzWCxJQUFBLENBQUszYSxNQUFNO01BQ2xDO0lBQ0Y7SUFFQSxJQUFJaWdCLE1BQUE7SUFFSixJQUFJMGIsSUFBQSxJQUFRQyxJQUFBLEVBQU07TUFDaEJDLFFBQUEsR0FBV3pwQyxJQUFBLENBQUtDLEdBQUEsQ0FBSXdwQyxRQUFBLEVBQVVHLFdBQUEsRUFBYUwsSUFBQSxDQUFLei9CLEtBQUEsR0FBUSxPQUFPdUQsT0FBQSxDQUFRakMsT0FBTztNQUM5RXMrQixRQUFBLEdBQVcxcEMsSUFBQSxDQUFLQyxHQUFBLENBQUl5cEMsUUFBQSxFQUFVcjhCLE9BQUEsQ0FBUXJCLElBQUk7TUFDMUMsSUFBSTBxQixTQUFBLEdBQVlycEIsT0FBQSxDQUFRZixvQkFBQTtNQUV4QixJQUFJdzlCLFFBQUEsR0FBVyxJQUFJcFQsU0FBQTtNQUVuQixJQUFJK1MsUUFBQSxHQUFXRixJQUFBLENBQUt6L0IsS0FBQSxJQUFTMC9CLElBQUEsQ0FBSzFqQyxNQUFBLEdBQVM0akMsUUFBQSxJQUFZSSxRQUFBLEVBQVU7UUFDL0RKLFFBQUEsR0FBV0ksUUFBQSxJQUFZTCxRQUFBLEdBQVdGLElBQUEsQ0FBS3ovQixLQUFBLElBQVMwL0IsSUFBQSxDQUFLMWpDLE1BQUE7UUFDckQsSUFBSWlrQyxHQUFBLEdBQU0sTUFBTTE4QixPQUFBLENBQVFqQyxPQUFBLElBQVdxK0IsUUFBQSxHQUFXRixJQUFBLENBQUt6L0IsS0FBQTtRQUVuRCxJQUFJaWdDLEdBQUEsR0FBTSxHQUFHO1VBQ1hOLFFBQUEsSUFBWU0sR0FBQTtVQUNaTCxRQUFBLElBQVlLLEdBQUE7UUFDZDtNQUNGO01BRUEsSUFBSUMsU0FBQSxHQUFZLENBQUM7UUFDZnBzQyxJQUFBLEVBQU07UUFDTm5CLElBQUEsRUFBTStzQyxJQUFBO1FBQ05wdkIsS0FBQSxFQUFPc3ZCLFFBQUE7UUFDUDMyQixXQUFBO1FBQ0F3STtNQUNGLEdBQUc7UUFDRDNkLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNOHNDLElBQUE7UUFDTm52QixLQUFBLEVBQU8sQ0FBQ3F2QixRQUFBO1FBQ1IxMkI7TUFDRixDQUFDO01BQ0Q4YSxNQUFBLEdBQVNwUixXQUFBLENBQVkvQixTQUFBLENBQVU7UUFDN0JULFlBQUEsRUFBYztRQUNkclEsUUFBQSxFQUFVb2dDO01BQ1osR0FBRzdvQyxPQUFPO0lBQ1osV0FBV3FvQyxJQUFBLEVBQU07TUFFZkUsUUFBQSxHQUFXMXBDLElBQUEsQ0FBS0MsR0FBQSxDQUFJeXBDLFFBQUEsRUFBVXI4QixPQUFBLENBQVF0QixJQUFBLEVBQU15OUIsSUFBQSxDQUFLMWpDLE1BQUEsR0FBUyxNQUFNdUgsT0FBQSxDQUFRakMsT0FBTztNQUMvRSxJQUFJNitCLFVBQUEsR0FBYSxDQUFDO1FBQ2hCcnNDLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNK3NDLElBQUE7UUFDTmp1QixVQUFBO1FBQ0F4STtNQUNGLENBQUM7TUFDRDhhLE1BQUEsR0FBU3BSLFdBQUEsQ0FBWS9CLFNBQUEsQ0FBVTtRQUM3QlQsWUFBQSxFQUFjO1FBQ2RPLFlBQUEsRUFBY2t2QixRQUFBO1FBQ2Q5L0IsUUFBQSxFQUFVcWdDO01BQ1osR0FBRzlvQyxPQUFPO0lBQ1osV0FBV29vQyxJQUFBLEVBQU07TUFFZkUsUUFBQSxHQUFXenBDLElBQUEsQ0FBS0MsR0FBQSxDQUFJd3BDLFFBQUEsRUFBVUcsV0FBQSxFQUFhTCxJQUFBLENBQUt6L0IsS0FBQSxHQUFRLE9BQU91RCxPQUFBLENBQVFqQyxPQUFPO01BQzlFeWlCLE1BQUEsR0FBU3BSLFdBQUEsQ0FBWS9CLFNBQUEsQ0FBVTtRQUM3QlQsWUFBQSxFQUFjO1FBQ2RPLFlBQUEsRUFBYyxDQUFDaXZCLFFBQUE7UUFDZjcvQixRQUFBLEVBQVUsQ0FBQztVQUNUaE0sSUFBQSxFQUFNO1VBQ05uQixJQUFBLEVBQU04c0MsSUFBQTtVQUNOeDJCO1FBQ0YsQ0FBQztNQUNILEdBQUc1UixPQUFPO0lBQ1osT0FBTztNQUNMLE1BQU0sSUFBSWhGLEtBQUEsQ0FBTSxxQ0FBcUM7SUFDdkQ7SUFHQSxJQUFJMHdCLE1BQUEsR0FBU3hNLGdCQUFBLENBQWlCa0ksSUFBQSxFQUFNLE9BQU8sS0FBSztJQUNoRCxPQUFPOUwsV0FBQSxDQUFZekQsUUFBQSxDQUFTLENBQUM2VCxNQUFNLEdBQUcsQ0FBQ3RFLElBQUEsRUFBTTlMLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLFNBQVMsR0FBRyxDQUFDNlUsTUFBTSxDQUFDLENBQUMsR0FBRzFzQixPQUFPO0VBQ3BHO0VBRUE4YyxjQUFjdGdCLEtBQUEsRUFBT3dELE9BQUEsRUFBUztJQUU1QixJQUFJK29DLE9BQUEsR0FBVTtJQUNkLElBQUluRyxNQUFBO0lBQ0osSUFBSW1GLEtBQUE7SUFFSixJQUFJdnJDLEtBQUEsQ0FBTTRxQixJQUFBLElBQVE1cUIsS0FBQSxDQUFNNHFCLElBQUEsQ0FBSzNxQixJQUFBLEtBQVMsY0FBYztNQUNsRHNyQyxLQUFBLEdBQVEsQ0FBQyxDQUFDdnJDLEtBQUEsQ0FBTXdFLEdBQUE7TUFFaEIsSUFBSSttQyxLQUFBLEtBQVV2ckMsS0FBQSxDQUFNNHFCLElBQUEsQ0FBS3diLE1BQUEsRUFBUTtRQUMvQm1HLE9BQUEsR0FBVTtRQUNWbkcsTUFBQSxHQUFTcG1DLEtBQUEsQ0FBTTRxQixJQUFBLENBQUt3YixNQUFBO01BQ3RCO0lBQ0Y7SUFFQSxJQUFJcG1DLEtBQUEsQ0FBTTRxQixJQUFBLEtBQVM1cUIsS0FBQSxDQUFNNHFCLElBQUEsQ0FBSzNxQixJQUFBLEtBQVMsUUFBUUQsS0FBQSxDQUFNNHFCLElBQUEsQ0FBSzNxQixJQUFBLEtBQVMsaUJBQWlCO01BQ2xGRCxLQUFBLENBQU00cUIsSUFBQSxDQUFLbUYsY0FBQSxHQUFpQjtJQUM5QjtJQUVBLElBQUk5akIsUUFBQSxHQUFXLENBQUMwWixXQUFBLENBQVczbEIsS0FBQSxDQUFNNHFCLElBQUEsRUFBTXBuQixPQUFPLENBQUM7SUFFL0MsSUFBSXhELEtBQUEsQ0FBTTBFLEdBQUEsRUFBSztNQUNidUgsUUFBQSxDQUFTaEssSUFBQSxDQUFLMGpCLFdBQUEsQ0FBVzNsQixLQUFBLENBQU0wRSxHQUFBLEVBQUtsQixPQUFPLENBQUM7SUFDOUM7SUFFQSxJQUFJeEQsS0FBQSxDQUFNd0UsR0FBQSxFQUFLO01BQ2J5SCxRQUFBLENBQVNoSyxJQUFBLENBQUswakIsV0FBQSxDQUFXM2xCLEtBQUEsQ0FBTXdFLEdBQUEsRUFBS2hCLE9BQU8sQ0FBQztJQUM5QztJQUVBLElBQUlncEMsUUFBQTtJQUVKLElBQUlELE9BQUEsRUFBUztNQUNYQyxRQUFBLEdBQVdwRyxNQUFBLEdBQVMsVUFBVTtJQUNoQyxXQUFXLENBQUNwbUMsS0FBQSxDQUFNMEUsR0FBQSxFQUFLO01BQ3JCLElBQUlrbUIsSUFBQSxHQUFPNXFCLEtBQUEsQ0FBTTRxQixJQUFBO01BRWpCLElBQUlBLElBQUEsSUFBUUEsSUFBQSxDQUFLM3FCLElBQUEsS0FBUyxRQUFRMnFCLElBQUEsQ0FBS2lGLE1BQUEsS0FBV3JzQixPQUFBLENBQVE2SSxLQUFBLEtBQVU3RyxPQUFBLENBQVFDLE9BQUEsSUFBV21sQixJQUFBLENBQUtrRixrQkFBQSxHQUFxQjtRQUMvRzBjLFFBQUEsR0FBVztNQUNiLFdBQVc1aEIsSUFBQSxJQUFRQSxJQUFBLENBQUszcUIsSUFBQSxLQUFTLGtCQUFrQjJxQixJQUFBLENBQUtrRixrQkFBQSxLQUF1QmxGLElBQUEsQ0FBS2lGLE1BQUEsSUFBVXJzQixPQUFBLENBQVE2SSxLQUFBLEtBQVU3RyxPQUFBLENBQVFDLE9BQUEsR0FBVTtRQUNoSSttQyxRQUFBLEdBQVc7TUFDYixPQUFPO1FBQ0xBLFFBQUEsR0FBVztNQUNiO0lBQ0YsV0FBVyxDQUFDeHNDLEtBQUEsQ0FBTXdFLEdBQUEsRUFBSztNQUNyQixJQUFJaW9DLEtBQUEsR0FBUXpzQyxLQUFBLENBQU00cUIsSUFBQTtNQUVsQixJQUFJNmhCLEtBQUEsSUFBU0EsS0FBQSxDQUFNeHNDLElBQUEsS0FBUyxRQUFRd3NDLEtBQUEsQ0FBTTVjLE1BQUEsS0FBV3JzQixPQUFBLENBQVE2SSxLQUFBLEtBQVU3RyxPQUFBLENBQVFDLE9BQUEsSUFBV2duQyxLQUFBLENBQU0zYyxrQkFBQSxHQUFxQjtRQUNuSDBjLFFBQUEsR0FBVztNQUNiLFdBQVdDLEtBQUEsSUFBU0EsS0FBQSxDQUFNeHNDLElBQUEsS0FBUyxrQkFBa0J3c0MsS0FBQSxDQUFNM2Msa0JBQUEsS0FBdUIyYyxLQUFBLENBQU01YyxNQUFBLElBQVVyc0IsT0FBQSxDQUFRNkksS0FBQSxLQUFVN0csT0FBQSxDQUFRQyxPQUFBLEdBQVU7UUFDcEkrbUMsUUFBQSxHQUFXO01BQ2IsT0FBTztRQUNMQSxRQUFBLEdBQVc7TUFDYjtJQUNGLE9BQU87TUFDTCxJQUFJRSxNQUFBLEdBQVMxc0MsS0FBQSxDQUFNNHFCLElBQUE7TUFFbkIsSUFBSThoQixNQUFBLElBQVVBLE1BQUEsQ0FBT3pzQyxJQUFBLEtBQVMsUUFBUXlzQyxNQUFBLENBQU83YyxNQUFBLElBQVVyc0IsT0FBQSxDQUFRNkksS0FBQSxLQUFVN0csT0FBQSxDQUFRQyxPQUFBLEVBQVM7UUFDeEYrbUMsUUFBQSxHQUFXO01BQ2IsV0FBV0UsTUFBQSxJQUFVQSxNQUFBLENBQU96c0MsSUFBQSxLQUFTLGtCQUFrQnlzQyxNQUFBLENBQU81YyxrQkFBQSxLQUF1QnRzQixPQUFBLENBQVE2SSxLQUFBLEtBQVU3RyxPQUFBLENBQVFDLE9BQUEsSUFBV2luQyxNQUFBLENBQU83YyxNQUFBLEdBQVM7UUFDeEkyYyxRQUFBLEdBQVc7TUFDYixPQUFPO1FBQ0xBLFFBQUEsR0FBVztNQUNiO0lBQ0Y7SUFFQSxPQUFPLElBQUl2bkIsVUFBQSxDQUFXSixRQUFBLENBQVMybkIsUUFBQSxFQUFVdmdDLFFBQVE7RUFDbkQ7QUFFRixDQUFDO0FBRUQrVSxzQkFBQSxDQUF1QjtFQUNyQi9nQixJQUFBLEVBQU07RUFFTm1nQixZQUFZcGdCLEtBQUEsRUFBT3dELE9BQUEsRUFBUztJQUMxQixPQUFPc2IsV0FBQSxDQUFZeEYsT0FBQSxDQUFRdFosS0FBQSxDQUFNM0MsSUFBQSxFQUFNMkMsS0FBQSxDQUFNOFAsSUFBQSxFQUFNdE0sT0FBQSxFQUFTLENBQUMsTUFBTXhELEtBQUEsQ0FBTXd2QixNQUFNLENBQUM7RUFDbEY7RUFFQWxQLGNBQWN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBQzVCLElBQUkwUSxJQUFBLEdBQU8sSUFBSStRLFVBQUEsQ0FBV0osUUFBQSxDQUFTLE1BQU0sQ0FBQ0ssUUFBQSxDQUFTbGxCLEtBQUEsQ0FBTTNDLElBQUEsRUFBTTJDLEtBQUEsQ0FBTThQLElBQUksQ0FBQyxDQUFDO0lBRTNFLElBQUk5UCxLQUFBLENBQU13dkIsTUFBQSxLQUFXLE9BQU87TUFDMUIsSUFBSS9RLE9BQUEsR0FBVTZHLFVBQUEsQ0FBV3RsQixLQUFBLEVBQU93RCxPQUFPO01BRXZDLElBQUlpYixPQUFBLEtBQVksZUFBZTtRQUM3QnZLLElBQUEsQ0FBS0csWUFBQSxDQUFhLGVBQWVvSyxPQUFPO01BQzFDO0lBQ0YsV0FBV3plLEtBQUEsQ0FBTXd2QixNQUFBLEtBQVcsU0FBUztNQUNuQ3RiLElBQUEsQ0FBS0csWUFBQSxDQUFhLGFBQWEsTUFBTTtJQUN2QyxXQUFXclUsS0FBQSxDQUFNd3ZCLE1BQUEsS0FBVyxVQUFVeHZCLEtBQUEsQ0FBTXd2QixNQUFBLEtBQVcsU0FBUztNQUc5RHRiLElBQUEsQ0FBS0csWUFBQSxDQUFhLFlBQVksT0FBTztJQUN2QztJQUVBLE9BQU9ILElBQUE7RUFDVDtBQUVGLENBQUM7QUFJRCxJQUFJeTRCLGNBQUEsR0FBaUI7RUFDbkIsTUFBTTtFQUNOLE1BQU07RUFDTixTQUFTO0FBQ1g7QUFDQTNyQixzQkFBQSxDQUF1QjtFQUNyQi9nQixJQUFBLEVBQU07RUFFTm1nQixZQUFZcGdCLEtBQUEsRUFBT3dELE9BQUEsRUFBUztJQUMxQixPQUFPc2IsV0FBQSxDQUFZbEYsT0FBQSxDQUFRNVosS0FBQSxFQUFPd0QsT0FBQSxFQUFTLFNBQVM7RUFDdEQ7RUFFQThjLGNBQWN0Z0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBQzVCLElBQUkwUSxJQUFBLEdBQU8sSUFBSStRLFVBQUEsQ0FBV0osUUFBQSxDQUFTLE1BQU0sQ0FBQ0ssUUFBQSxDQUFTbGxCLEtBQUEsQ0FBTTNDLElBQUEsRUFBTTJDLEtBQUEsQ0FBTThQLElBQUEsRUFBTXRNLE9BQU8sQ0FBQyxDQUFDO0lBQ3BGLElBQUlpYixPQUFBLEdBQVU2RyxVQUFBLENBQVd0bEIsS0FBQSxFQUFPd0QsT0FBTyxLQUFLO0lBRTVDLElBQUlpYixPQUFBLEtBQVlrdUIsY0FBQSxDQUFlejRCLElBQUEsQ0FBS2pVLElBQUEsR0FBTztNQUN6Q2lVLElBQUEsQ0FBS0csWUFBQSxDQUFhLGVBQWVvSyxPQUFPO0lBQzFDO0lBRUEsT0FBT3ZLLElBQUE7RUFDVDtBQUVGLENBQUM7QUFDRDhNLHNCQUFBLENBQXVCO0VBQ3JCL2dCLElBQUEsRUFBTTtFQUVObWdCLFlBQVlwZ0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBQzFCLE9BQU9zYixXQUFBLENBQVlsRixPQUFBLENBQVE1WixLQUFBLEVBQU93RCxPQUFBLEVBQVMsU0FBUztFQUN0RDtFQUVBOGMsY0FBY3RnQixLQUFBLEVBQU93RCxPQUFBLEVBQVM7SUFDNUIsSUFBSXBHLEtBQUEsR0FBTzhuQixRQUFBLENBQVNsbEIsS0FBQSxDQUFNM0MsSUFBQSxFQUFNMkMsS0FBQSxDQUFNOFAsSUFBQSxFQUFNdE0sT0FBTztJQUNuRCxJQUFJaWIsT0FBQSxHQUFVNkcsVUFBQSxDQUFXdGxCLEtBQUEsRUFBT3dELE9BQU8sS0FBSztJQUM1QyxJQUFJMFEsSUFBQTtJQUVKLElBQUlsVSxLQUFBLENBQU04UCxJQUFBLEtBQVMsUUFBUTtNQUN6Qm9FLElBQUEsR0FBTyxJQUFJK1EsVUFBQSxDQUFXSixRQUFBLENBQVMsU0FBUyxDQUFDem5CLEtBQUksQ0FBQztJQUNoRCxXQUFXLFFBQVEwRCxJQUFBLENBQUtkLEtBQUEsQ0FBTTNDLElBQUksR0FBRztNQUNuQzZXLElBQUEsR0FBTyxJQUFJK1EsVUFBQSxDQUFXSixRQUFBLENBQVMsTUFBTSxDQUFDem5CLEtBQUksQ0FBQztJQUM3QyxXQUFXNEMsS0FBQSxDQUFNM0MsSUFBQSxLQUFTLFdBQVc7TUFDbkM2VyxJQUFBLEdBQU8sSUFBSStRLFVBQUEsQ0FBV0osUUFBQSxDQUFTLE1BQU0sQ0FBQ3puQixLQUFJLENBQUM7SUFDN0MsT0FBTztNQUNMOFcsSUFBQSxHQUFPLElBQUkrUSxVQUFBLENBQVdKLFFBQUEsQ0FBUyxNQUFNLENBQUN6bkIsS0FBSSxDQUFDO0lBQzdDO0lBRUEsSUFBSXFoQixPQUFBLEtBQVlrdUIsY0FBQSxDQUFlejRCLElBQUEsQ0FBS2pVLElBQUEsR0FBTztNQUN6Q2lVLElBQUEsQ0FBS0csWUFBQSxDQUFhLGVBQWVvSyxPQUFPO0lBQzFDO0lBRUEsT0FBT3ZLLElBQUE7RUFDVDtBQUVGLENBQUM7QUFFRCxJQUFJMDRCLFFBQUEsR0FBVztFQUNiLGFBQWE7RUFDYixnQkFBZ0I7QUFDbEI7QUFNQSxJQUFJQyxZQUFBLEdBQWU7RUFDakIsS0FBSyxDQUFDO0VBQ04sT0FBTyxDQUFDO0VBQ1IsS0FBSztJQUNIdGdDLFNBQUEsRUFBVztFQUNiO0VBQ0EsV0FBVyxDQUFDO0VBQ1osa0JBQWtCO0lBQ2hCQSxTQUFBLEVBQVc7RUFDYjtBQUNGO0FBR0F5VSxzQkFBQSxDQUF1QjtFQUNyQi9nQixJQUFBLEVBQU07RUFFTm1nQixZQUFZcGdCLEtBQUEsRUFBT3dELE9BQUEsRUFBUztJQUMxQixJQUFJcXBDLFlBQUEsQ0FBYW5wQyxjQUFBLENBQWUxRCxLQUFBLENBQU0zQyxJQUFJLEdBQUc7TUFDM0MsSUFBSWtQLFNBQUEsR0FBWXNnQyxZQUFBLENBQWE3c0MsS0FBQSxDQUFNM0MsSUFBQSxFQUFNa1AsU0FBQSxJQUFhO01BSXRELElBQUl2TSxLQUFBLENBQU04UCxJQUFBLEtBQVMsUUFBUTtRQUN6QixJQUFJZzlCLEdBQUEsR0FBTWh1QixXQUFBLENBQVlsRixPQUFBLENBQVE1WixLQUFBLEVBQU93RCxPQUFBLEVBQVMsU0FBUztRQUN2RHNwQyxHQUFBLENBQUk1Z0MsT0FBQSxDQUFRakssSUFBQSxDQUFLc0ssU0FBUztRQUMxQixPQUFPdWdDLEdBQUE7TUFDVCxPQUFPO1FBQ0wsT0FBT2h1QixXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxVQUFVOU8sU0FBUyxHQUFHLENBQUN1UyxXQUFBLENBQVl4RixPQUFBLENBQVF0WixLQUFBLENBQU0zQyxJQUFBLEVBQU0yQyxLQUFBLENBQU04UCxJQUFBLEVBQU10TSxPQUFPLENBQUMsR0FBR0EsT0FBTztNQUNwSDtJQUNGLFdBQVdvcEMsUUFBQSxDQUFTbHBDLGNBQUEsQ0FBZTFELEtBQUEsQ0FBTTNDLElBQUksR0FBRztNQUU5QyxPQUFPeWhCLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLFVBQVV1eEIsUUFBQSxDQUFTNXNDLEtBQUEsQ0FBTTNDLElBQUEsQ0FBSyxHQUFHLEVBQUMsRUFBR21HLE9BQU87SUFDM0UsT0FBTztNQUNMLE1BQU0sSUFBSS9GLFVBQUEsQ0FBVyw0QkFBNkJ1QyxLQUFBLENBQU0zQyxJQUFBLEdBQU8sR0FBSTtJQUNyRTtFQUNGO0VBRUFpakIsY0FBY3RnQixLQUFBLEVBQU93RCxPQUFBLEVBQVM7SUFDNUIsSUFBSTBRLElBQUE7SUFFSixJQUFJMjRCLFlBQUEsQ0FBYW5wQyxjQUFBLENBQWUxRCxLQUFBLENBQU0zQyxJQUFJLEdBQUc7TUFDM0M2VyxJQUFBLEdBQU8sSUFBSStRLFVBQUEsQ0FBV0osUUFBQSxDQUFTLFNBQVMsQ0FBQyxJQUFJSSxVQUFBLENBQVdGLFFBQUEsQ0FBUyxNQUFRLENBQUMsQ0FBQztJQUM3RSxXQUFXNm5CLFFBQUEsQ0FBU2xwQyxjQUFBLENBQWUxRCxLQUFBLENBQU0zQyxJQUFJLEdBQUc7TUFFOUMsT0FBTyxJQUFJNG5CLFVBQUEsQ0FBV0osUUFBQSxDQUFTLFFBQVE7SUFDekMsT0FBTztNQUNMLE1BQU0sSUFBSXBuQixVQUFBLENBQVcsNEJBQTZCdUMsS0FBQSxDQUFNM0MsSUFBQSxHQUFPLEdBQUk7SUFDckU7SUFFQSxPQUFPNlcsSUFBQTtFQUNUO0FBRUYsQ0FBQztBQUVELElBQUk2NEIsR0FBQSxHQUFNQSxDQUFBLEtBQU07RUFDZCxJQUFJQyxPQUFBLEdBQVUsSUFBSS9uQixVQUFBLENBQVdKLFFBQUEsQ0FBUyxPQUFPLEVBQUU7RUFDL0Ntb0IsT0FBQSxDQUFRMzRCLFlBQUEsQ0FBYSxTQUFTLEtBQUs7RUFDbkMsT0FBTzI0QixPQUFBO0FBQ1Q7QUFFQWhzQixzQkFBQSxDQUF1QjtFQUNyQi9nQixJQUFBLEVBQU07RUFFTnFnQixjQUFjdGdCLEtBQUEsRUFBT3dELE9BQUEsRUFBUztJQUM1QixJQUFJNDlCLEtBQUEsR0FBUSxJQUFJbmMsVUFBQSxDQUFXSixRQUFBLENBQVMsVUFBVSxDQUFDLElBQUlJLFVBQUEsQ0FBV0osUUFBQSxDQUFTLE9BQU8sQ0FBQ2tvQixHQUFBLENBQUksR0FBRyxJQUFJOW5CLFVBQUEsQ0FBV0osUUFBQSxDQUFTLE9BQU8sQ0FBQ2tCLGtCQUFBLENBQW1CL2xCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNc0QsT0FBTyxDQUFDLENBQUMsR0FBR3VwQyxHQUFBLENBQUksR0FBRyxJQUFJOW5CLFVBQUEsQ0FBV0osUUFBQSxDQUFTLE9BQU8sQ0FBQ2tCLGtCQUFBLENBQW1CL2xCLEtBQUEsQ0FBTXVrQixHQUFBLEVBQUsvZ0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuUDQ5QixLQUFBLENBQU0vc0IsWUFBQSxDQUFhLFNBQVMsTUFBTTtJQUNsQyxPQUFPK3NCLEtBQUE7RUFPVDtBQUVGLENBQUM7QUFFRCxJQUFJNkwsZ0JBQUEsR0FBbUI7RUFDckIsVUFBVTtFQUNWLFlBQVk7RUFDWixZQUFZO0VBQ1osWUFBWTtFQUNaLGdCQUFnQjtBQUNsQjtBQUNBLElBQUlDLGVBQUEsR0FBa0I7RUFDcEIsWUFBWTtFQUNaLFlBQVk7QUFDZDtBQUNBLElBQUlDLGNBQUEsR0FBaUI7RUFDbkIsWUFBWTtFQUNaLFlBQVk7QUFDZDtBQUVBLElBQUlDLGVBQUEsR0FBa0JBLENBQUNwdEMsS0FBQSxFQUFPd0QsT0FBQSxLQUFZO0VBQ3hDLElBQUlxTSxJQUFBLEdBQU83UCxLQUFBLENBQU02UCxJQUFBO0VBRWpCLElBQUksQ0FBQ0EsSUFBQSxFQUFNO0lBQ1QsT0FBT3JNLE9BQUE7RUFDVCxXQUFXeXBDLGdCQUFBLENBQWlCcDlCLElBQUEsR0FBTztJQUNqQyxPQUFPck0sT0FBQSxDQUFRME8sa0JBQUEsQ0FBbUIrNkIsZ0JBQUEsQ0FBaUJwOUIsSUFBQSxDQUFLO0VBQzFELFdBQVdxOUIsZUFBQSxDQUFnQnI5QixJQUFBLEdBQU87SUFDaEMsT0FBT3JNLE9BQUEsQ0FBUTJPLGtCQUFBLENBQW1CKzZCLGVBQUEsQ0FBZ0JyOUIsSUFBQSxDQUFLO0VBQ3pELFdBQVdBLElBQUEsS0FBUyxVQUFVO0lBQzVCLE9BQU9yTSxPQUFBLENBQVEyTixTQUFBLEtBQWMsV0FBVzNOLE9BQUEsQ0FBUTRPLGlCQUFBLENBQWtCLFFBQVEsSUFBSTVPLE9BQUEsQ0FBUTRPLGlCQUFBLENBQWtCLFFBQVE7RUFDbEg7RUFFQSxPQUFPNU8sT0FBQSxDQUFRNE8saUJBQUEsQ0FBa0IrNkIsY0FBQSxDQUFldDlCLElBQUEsQ0FBSztBQUN2RDtBQUVBa1EsY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FDUCxVQUFVLFlBQVksWUFBWSxZQUFZLGdCQUM5QyxZQUFZLFlBQ1osWUFBWSxZQUFZLFNBQVE7RUFDaENDLEtBQUEsRUFBTztJQUNMTSxPQUFBLEVBQVM7SUFDVEMsUUFBQSxFQUFVLENBQUMsTUFBTTtJQUNqQkMsaUJBQUEsRUFBbUI7SUFDbkJDLGFBQUEsRUFBZTtFQUNqQjtFQUVBUixRQUFRSCxJQUFBLEVBQU0yTixJQUFBLEVBQU07SUFDbEIsSUFBSTtNQUNGRSxNQUFBO01BQ0FEO0lBQ0YsSUFBSTVOLElBQUE7SUFDSixJQUFJOWYsSUFBQSxHQUFPeXRCLElBQUEsQ0FBSztJQUNoQixPQUFPO01BQ0wxdEIsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU0rZCxNQUFBLENBQU8vZCxJQUFBO01BQ2I1UCxJQUFBLEVBQU1taEIsV0FBQSxDQUFZbmhCLElBQUk7TUFDdEIyUCxJQUFBLEVBQU0rZDtJQUNSO0VBQ0Y7RUFFQXhOLFlBQVlwZ0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBQzFCLElBQUkycUIsVUFBQSxHQUFhaWYsZUFBQSxDQUFnQnB0QyxLQUFBLEVBQU93RCxPQUFPO0lBQy9DLElBQUlzb0IsTUFBQSxHQUFRbEssaUJBQUEsQ0FBa0I1aEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1pdUIsVUFBQSxFQUFZLElBQUk7SUFDMUQsT0FBT3JQLFdBQUEsQ0FBWXpELFFBQUEsQ0FBUyxDQUFDLFFBQVEsTUFBTSxHQUFHeVEsTUFBQSxFQUFPcUMsVUFBVTtFQUNqRTtFQUVBN04sY0FBY3RnQixLQUFBLEVBQU93RCxPQUFBLEVBQVM7SUFDNUIsSUFBSTJxQixVQUFBLEdBQWFpZixlQUFBLENBQWdCcHRDLEtBQUEsRUFBT3dELE9BQU87SUFDL0MsT0FBT3VpQixrQkFBQSxDQUFtQi9sQixLQUFBLENBQU1FLElBQUEsRUFBTWl1QixVQUFVO0VBQ2xEO0FBRUYsQ0FBQztBQUVEcE8sY0FBQSxDQUFlO0VBQ2I5ZixJQUFBLEVBQU07RUFDTmdnQixLQUFBLEVBQU8sQ0FBQyxhQUFhO0VBQ3JCQyxLQUFBLEVBQU87SUFDTE0sT0FBQSxFQUFTO0lBQ1RHLGFBQUEsRUFBZTtFQUNqQjtFQUVBUixRQUFRSCxJQUFBLEVBQU0yTixJQUFBLEVBQU07SUFDbEIsSUFBSTtNQUNGRTtJQUNGLElBQUk3TixJQUFBO0lBQ0osT0FBTztNQUNML2YsSUFBQSxFQUFNO01BQ042UCxJQUFBLEVBQU0rZCxNQUFBLENBQU8vZCxJQUFBO01BQ2I1UCxJQUFBLEVBQU15dEIsSUFBQSxDQUFLO0lBQ2I7RUFDRjtFQUVBdk4sWUFBWXBnQixLQUFBLEVBQU93RCxPQUFBLEVBQVM7SUFHMUIsSUFBSXNxQixVQUFBLEdBQWE1TCxZQUFBLENBQWFsaUIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFPO0lBRWpELElBQUlrWSxJQUFBLEdBQU9vRCxXQUFBLENBQVl2RCxZQUFBLENBQWEsa0JBQWtCL1gsT0FBTztJQUU3RCxJQUFJbUwsb0JBQUEsR0FBdUJuTCxPQUFBLENBQVFnUCxXQUFBLENBQVksRUFBRTdELG9CQUFBO0lBQ2pELElBQUlrUCxLQUFBLEdBQVFpQixXQUFBLENBQVkvQixTQUFBLENBQVU7TUFDaENULFlBQUEsRUFBYztNQUNkTyxZQUFBLEVBQWNpUixVQUFBLENBQVczbEIsTUFBQTtNQUN6QjhELFFBQUEsRUFBVSxDQUFDO1FBQ1RoTSxJQUFBLEVBQU07UUFDTnFFLElBQUEsRUFBTXFLO01BQ1IsR0FBRztRQUNEMU8sSUFBQSxFQUFNO1FBQ05uQixJQUFBLEVBQU00YztNQUNSLEdBQUc7UUFDRHpiLElBQUEsRUFBTTtRQUNOcUUsSUFBQSxFQUFNLElBQUlxSztNQUNaLEdBQUc7UUFDRDFPLElBQUEsRUFBTTtRQUNObkIsSUFBQSxFQUFNZ3ZCO01BQ1IsQ0FBQztJQUNILEdBQUd0cUIsT0FBTztJQUNWLE9BQU9zYixXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxRQUFRLFdBQVcsR0FBRyxDQUFDd0MsS0FBSyxHQUFHcmEsT0FBTztFQUNyRTtFQUVBOGMsY0FBY3RnQixLQUFBLEVBQU93RCxPQUFBLEVBQVM7SUFDNUIsSUFBSXdsQyxRQUFBLEdBQVcsSUFBSS9qQixVQUFBLENBQVdKLFFBQUEsQ0FBUyxNQUFNLENBQUMsSUFBSUksVUFBQSxDQUFXRixRQUFBLENBQVMsUUFBUSxDQUFDLENBQUM7SUFDaEZpa0IsUUFBQSxDQUFTMzBCLFlBQUEsQ0FBYSxZQUFZLE1BQU07SUFDeEMsSUFBSUgsSUFBQSxHQUFPLElBQUkrUSxVQUFBLENBQVdKLFFBQUEsQ0FBUyxVQUFVLENBQUNjLFdBQUEsQ0FBVzNsQixLQUFBLENBQU1FLElBQUEsRUFBTXNELE9BQU8sR0FBR3dsQyxRQUFRLENBQUM7SUFDeEY5MEIsSUFBQSxDQUFLRyxZQUFBLENBQWEsZUFBZSxNQUFNO0lBQ3ZDLE9BQU9ILElBQUE7RUFDVDtBQUVGLENBQUM7QUFFRDZMLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsV0FBVztFQUNuQkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNUQyxRQUFBLEVBQVUsQ0FBQyxVQUFVO0lBRXJCRSxhQUFBLEVBQWU7RUFDakI7RUFFQVIsUUFBUUgsSUFBQSxFQUFNMk4sSUFBQSxFQUFNO0lBQ2xCLElBQUk7TUFDRkU7SUFDRixJQUFJN04sSUFBQTtJQUNKLE9BQU87TUFDTC9mLElBQUEsRUFBTTtNQUNONlAsSUFBQSxFQUFNK2QsTUFBQSxDQUFPL2QsSUFBQTtNQUNiNVAsSUFBQSxFQUFNeXRCLElBQUEsQ0FBSztJQUNiO0VBQ0Y7RUFFQXZOLFlBQVlwZ0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBQzFCLElBQUl0RCxJQUFBLEdBQU9naUIsWUFBQSxDQUFhbGlCLEtBQUEsQ0FBTUUsSUFBQSxFQUFNc0QsT0FBTztJQUMzQyxJQUFJa0wsVUFBQSxHQUFhbEwsT0FBQSxDQUFRZ1AsV0FBQSxDQUFZLEVBQUU5RCxVQUFBO0lBQ3ZDLElBQUltN0IsRUFBQSxHQUFLLE9BQU8zcEMsSUFBQSxDQUFLaUksTUFBQSxHQUFTdUcsVUFBQSxJQUFjeE8sSUFBQSxDQUFLaU0sS0FBQSxHQUFRdUMsVUFBQTtJQUN6RCxPQUFPb1EsV0FBQSxDQUFZL0IsU0FBQSxDQUFVO01BQzNCVCxZQUFBLEVBQWM7TUFDZE8sWUFBQSxFQUFjZ3RCLEVBQUE7TUFDZDU5QixRQUFBLEVBQVUsQ0FBQztRQUNUaE0sSUFBQSxFQUFNO1FBQ05uQixJQUFBLEVBQU1vQjtNQUNSLENBQUM7SUFDSCxHQUFHc0QsT0FBTztFQUNaO0VBRUE4YyxjQUFjdGdCLEtBQUEsRUFBT3dELE9BQUEsRUFBUztJQUk1QixPQUFPLElBQUl5aEIsVUFBQSxDQUFXSixRQUFBLENBQVMsV0FBVyxDQUFDYyxXQUFBLENBQVczbEIsS0FBQSxDQUFNRSxJQUFBLEVBQU1zRCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztFQUMxRjtBQUVGLENBQUM7QUFFRHVjLGNBQUEsQ0FBZTtFQUNiOWYsSUFBQSxFQUFNO0VBQ05nZ0IsS0FBQSxFQUFPLENBQUMsUUFBUTtFQUNoQkMsS0FBQSxFQUFPO0lBQ0xNLE9BQUEsRUFBUztJQUNURyxhQUFBLEVBQWU7RUFDakI7RUFFQVIsUUFBUWpjLE9BQUEsRUFBU3lwQixJQUFBLEVBQU1NLE9BQUEsRUFBUztJQUs5QixNQUFNLElBQUl4d0IsVUFBQSxDQUFXLDJEQUEyRDtFQUNsRjtFQUVBMmlCLFlBQVlwZ0IsS0FBQSxFQUFPd0QsT0FBQSxFQUFTO0lBQzFCLElBQUlwRyxLQUFBLEdBQU9pd0MsUUFBQSxDQUFTcnRDLEtBQUs7SUFDekIsSUFBSUUsSUFBQSxHQUFPLEVBQUM7SUFFWixJQUFJaXVCLFVBQUEsR0FBYTNxQixPQUFBLENBQVFpTyxXQUFBLENBQVlqTyxPQUFBLENBQVE2SSxLQUFBLENBQU1oUCxJQUFBLENBQUssQ0FBQztJQUV6RCxTQUFTNEksQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSTdJLEtBQUEsQ0FBS1UsTUFBQSxFQUFRbUksQ0FBQSxJQUFLO01BQ3BDLElBQUlpNEIsQ0FBQSxHQUFJOWdDLEtBQUEsQ0FBSzZJLENBQUE7TUFFYixJQUFJaTRCLENBQUEsS0FBTSxLQUFLO1FBQ2JBLENBQUEsR0FBSTtNQUNOO01BRUFoK0IsSUFBQSxDQUFLK0IsSUFBQSxDQUFLNmMsV0FBQSxDQUFZNUYsVUFBQSxDQUFXZ2xCLENBQUEsRUFBRyxzQkFBc0JsK0IsS0FBQSxDQUFNOFAsSUFBQSxFQUFNcWUsVUFBQSxFQUFZLENBQUMsUUFBUSxRQUFRLENBQUMsQ0FBQztJQUN2RztJQUVBLE9BQU9yUCxXQUFBLENBQVl6RCxRQUFBLENBQVMsQ0FBQyxRQUFRLE1BQU0sRUFBRTdCLE1BQUEsQ0FBTzJVLFVBQUEsQ0FBVzliLGFBQUEsQ0FBYzdPLE9BQU8sQ0FBQyxHQUFHc2IsV0FBQSxDQUFZL0QsZUFBQSxDQUFnQjdhLElBQUksR0FBR2l1QixVQUFVO0VBQ3ZJO0VBRUE3TixjQUFjdGdCLEtBQUEsRUFBT3dELE9BQUEsRUFBUztJQUM1QixJQUFJcEcsS0FBQSxHQUFPLElBQUk2bkIsVUFBQSxDQUFXRixRQUFBLENBQVNzb0IsUUFBQSxDQUFTcnRDLEtBQUssQ0FBQztJQUNsRCxJQUFJa1UsSUFBQSxHQUFPLElBQUkrUSxVQUFBLENBQVdKLFFBQUEsQ0FBUyxTQUFTLENBQUN6bkIsS0FBSSxDQUFDO0lBQ2xEOFcsSUFBQSxDQUFLRyxZQUFBLENBQWEsZUFBZSxXQUFXO0lBQzVDLE9BQU9ILElBQUE7RUFDVDtBQUVGLENBQUM7QUFRRCxJQUFJbTVCLFFBQUEsR0FBV3J0QyxLQUFBLElBQVNBLEtBQUEsQ0FBTUUsSUFBQSxDQUFLOUIsT0FBQSxDQUFRLE1BQU00QixLQUFBLENBQU1zdEMsSUFBQSxHQUFPLFdBQVcsTUFBTTtBQUcvRSxJQUFJQyxTQUFBLEdBQVkzdEIsVUFBQTtBQXNDaEIsSUFBSTR0QixnQkFBQSxHQUFtQjtBQUN2QixJQUFJQyxzQkFBQSxHQUF5QjtBQUM3QixJQUFJQyx3QkFBQSxHQUEyQjtBQUMvQixJQUFJQyxnQ0FBQSxHQUFtQyxNQUFNRixzQkFBQSxHQUF5QixNQUFNRCxnQkFBQSxHQUFtQjtBQUMvRixJQUFJSSx1QkFBQSxHQUEwQjtBQUM5QixJQUFJQyw4QkFBQSxHQUFpQztBQUNyQyxJQUFJQyxpQ0FBQSxHQUFvQyxJQUFJcGdCLE1BQUEsQ0FBT21nQiw4QkFBQSxHQUFpQyxJQUFJO0FBQ3hGLElBQUlFLGdCQUFBLEdBQW1CLE1BQU1QLGdCQUFBLEdBQW1CLFNBQ2hESSx1QkFBQSxHQUEwQixPQUMxQixrREFDQUMsOEJBQUEsR0FBaUMsT0FDakMscUNBQ0FBLDhCQUFBLEdBQWlDLE9BQ2pDLHdEQUVBLE1BQU1GLGdDQUFBLEtBQ04sTUFBTUQsd0JBQUEsR0FBMkI7QUFJakMsSUFBTU0sS0FBQSxHQUFOLE1BQVk7RUFHVnJ4QyxZQUFZc0IsS0FBQSxFQUFPNG9CLFFBQUEsRUFBVTtJQUMzQixLQUFLNW9CLEtBQUEsR0FBUTtJQUNiLEtBQUs0b0IsUUFBQSxHQUFXO0lBQ2hCLEtBQUtvbkIsVUFBQSxHQUFhO0lBQ2xCLEtBQUtDLFFBQUEsR0FBVztJQUVoQixLQUFLandDLEtBQUEsR0FBUUEsS0FBQTtJQUNiLEtBQUs0b0IsUUFBQSxHQUFXQSxRQUFBO0lBQ2hCLEtBQUtvbkIsVUFBQSxHQUFhLElBQUl2Z0IsTUFBQSxDQUFPcWdCLGdCQUFBLEVBQWtCLEdBQUc7SUFDbEQsS0FBS0csUUFBQSxHQUFXO01BQ2QsS0FBSztNQUVMLEtBQUs7SUFFUDtFQUNGO0VBRUFDLFdBQVdDLElBQUEsRUFBTXJiLElBQUEsRUFBTTtJQUNyQixLQUFLbWIsUUFBQSxDQUFTRSxJQUFBLElBQVFyYixJQUFBO0VBQ3hCO0VBTUFzYixJQUFBLEVBQU07SUFDSixJQUFJcHdDLEtBQUEsR0FBUSxLQUFLQSxLQUFBO0lBQ2pCLElBQUkrZ0MsR0FBQSxHQUFNLEtBQUtpUCxVQUFBLENBQVdLLFNBQUE7SUFFMUIsSUFBSXRQLEdBQUEsS0FBUS9nQyxLQUFBLENBQU1ILE1BQUEsRUFBUTtNQUN4QixPQUFPLElBQUlYLEtBQUEsQ0FBTSxPQUFPLElBQUlULGNBQUEsQ0FBZSxNQUFNc2lDLEdBQUEsRUFBS0EsR0FBRyxDQUFDO0lBQzVEO0lBRUEsSUFBSW4vQixLQUFBLEdBQVEsS0FBS291QyxVQUFBLENBQVdwdEMsSUFBQSxDQUFLNUMsS0FBSztJQUV0QyxJQUFJNEIsS0FBQSxLQUFVLFFBQVFBLEtBQUEsQ0FBTXVqQixLQUFBLEtBQVU0YixHQUFBLEVBQUs7TUFDekMsTUFBTSxJQUFJdmhDLFVBQUEsQ0FBVyw0QkFBNEJRLEtBQUEsQ0FBTStnQyxHQUFBLElBQU8sS0FBSyxJQUFJN2hDLEtBQUEsQ0FBTWMsS0FBQSxDQUFNK2dDLEdBQUEsR0FBTSxJQUFJdGlDLGNBQUEsQ0FBZSxNQUFNc2lDLEdBQUEsRUFBS0EsR0FBQSxHQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2xJO0lBRUEsSUFBSTVoQyxLQUFBLEdBQU95QyxLQUFBLENBQU0sTUFBTUEsS0FBQSxDQUFNLE9BQU9BLEtBQUEsQ0FBTSxLQUFLLFFBQVE7SUFFdkQsSUFBSSxLQUFLcXVDLFFBQUEsQ0FBUzl3QyxLQUFBLE1BQVUsSUFBSTtNQUU5QixJQUFJbXhDLE9BQUEsR0FBVXR3QyxLQUFBLENBQU1jLE9BQUEsQ0FBUSxNQUFNLEtBQUtrdkMsVUFBQSxDQUFXSyxTQUFTO01BRTNELElBQUlDLE9BQUEsS0FBWSxJQUFJO1FBQ2xCLEtBQUtOLFVBQUEsQ0FBV0ssU0FBQSxHQUFZcndDLEtBQUEsQ0FBTUgsTUFBQTtRQUVsQyxLQUFLK29CLFFBQUEsQ0FBU2xqQixlQUFBLENBQWdCLGdCQUFnQiw0R0FBaUg7TUFDakssT0FBTztRQUNMLEtBQUtzcUMsVUFBQSxDQUFXSyxTQUFBLEdBQVlDLE9BQUEsR0FBVTtNQUN4QztNQUVBLE9BQU8sS0FBS0YsR0FBQSxDQUFJO0lBQ2xCO0lBRUEsT0FBTyxJQUFJbHhDLEtBQUEsQ0FBTUMsS0FBQSxFQUFNLElBQUlWLGNBQUEsQ0FBZSxNQUFNc2lDLEdBQUEsRUFBSyxLQUFLaVAsVUFBQSxDQUFXSyxTQUFTLENBQUM7RUFDakY7QUFFRjtBQVNBLElBQU1FLFNBQUEsR0FBTixNQUFnQjtFQU9kN3hDLFlBQVk4eEMsUUFBQSxFQUFVQyxZQUFBLEVBQWM7SUFDbEMsSUFBSUQsUUFBQSxLQUFhLFFBQVE7TUFDdkJBLFFBQUEsR0FBVyxDQUFDO0lBQ2Q7SUFFQSxJQUFJQyxZQUFBLEtBQWlCLFFBQVE7TUFDM0JBLFlBQUEsR0FBZSxDQUFDO0lBQ2xCO0lBRUEsS0FBS0MsT0FBQSxHQUFVO0lBQ2YsS0FBS0YsUUFBQSxHQUFXO0lBQ2hCLEtBQUtHLFVBQUEsR0FBYTtJQUNsQixLQUFLRCxPQUFBLEdBQVVELFlBQUE7SUFDZixLQUFLRCxRQUFBLEdBQVdBLFFBQUE7SUFDaEIsS0FBS0csVUFBQSxHQUFhLEVBQUM7RUFDckI7RUFNQXRkLFdBQUEsRUFBYTtJQUNYLEtBQUtzZCxVQUFBLENBQVczc0MsSUFBQSxDQUFLLENBQUMsQ0FBQztFQUN6QjtFQU1Bd3ZCLFNBQUEsRUFBVztJQUNULElBQUksS0FBS21kLFVBQUEsQ0FBVzl3QyxNQUFBLEtBQVcsR0FBRztNQUNoQyxNQUFNLElBQUlMLFVBQUEsQ0FBVyxnR0FBcUc7SUFDNUg7SUFFQSxJQUFJb3hDLE1BQUEsR0FBUyxLQUFLRCxVQUFBLENBQVd2ckIsR0FBQSxDQUFJO0lBRWpDLFNBQVN5ckIsS0FBQSxJQUFTRCxNQUFBLEVBQVE7TUFDeEIsSUFBSUEsTUFBQSxDQUFPbnJDLGNBQUEsQ0FBZW9yQyxLQUFLLEdBQUc7UUFDaEMsSUFBSUQsTUFBQSxDQUFPQyxLQUFBLEtBQVUsTUFBTTtVQUN6QixPQUFPLEtBQUtILE9BQUEsQ0FBUUcsS0FBQTtRQUN0QixPQUFPO1VBQ0wsS0FBS0gsT0FBQSxDQUFRRyxLQUFBLElBQVNELE1BQUEsQ0FBT0MsS0FBQTtRQUMvQjtNQUNGO0lBQ0Y7RUFDRjtFQU9BQyxVQUFBLEVBQVk7SUFDVixPQUFPLEtBQUtILFVBQUEsQ0FBVzl3QyxNQUFBLEdBQVMsR0FBRztNQUNqQyxLQUFLMnpCLFFBQUEsQ0FBUztJQUNoQjtFQUNGO0VBT0F1ZCxJQUFJcHhDLElBQUEsRUFBTTtJQUNSLE9BQU8sS0FBSyt3QyxPQUFBLENBQVFqckMsY0FBQSxDQUFlOUYsSUFBSSxLQUFLLEtBQUs2d0MsUUFBQSxDQUFTL3FDLGNBQUEsQ0FBZTlGLElBQUk7RUFDL0U7RUFXQW8yQixJQUFJcDJCLElBQUEsRUFBTTtJQUNSLElBQUksS0FBSyt3QyxPQUFBLENBQVFqckMsY0FBQSxDQUFlOUYsSUFBSSxHQUFHO01BQ3JDLE9BQU8sS0FBSyt3QyxPQUFBLENBQVEvd0MsSUFBQTtJQUN0QixPQUFPO01BQ0wsT0FBTyxLQUFLNndDLFFBQUEsQ0FBUzd3QyxJQUFBO0lBQ3ZCO0VBQ0Y7RUFVQTJ6QixJQUFJM3pCLElBQUEsRUFBTTRDLEtBQUEsRUFBT3N6QixNQUFBLEVBQVE7SUFDdkIsSUFBSUEsTUFBQSxLQUFXLFFBQVE7TUFDckJBLE1BQUEsR0FBUztJQUNYO0lBRUEsSUFBSUEsTUFBQSxFQUFRO01BS1YsU0FBUzd0QixDQUFBLEdBQUksR0FBR0EsQ0FBQSxHQUFJLEtBQUsyb0MsVUFBQSxDQUFXOXdDLE1BQUEsRUFBUW1JLENBQUEsSUFBSztRQUMvQyxPQUFPLEtBQUsyb0MsVUFBQSxDQUFXM29DLENBQUEsRUFBR3JJLElBQUE7TUFDNUI7TUFFQSxJQUFJLEtBQUtneEMsVUFBQSxDQUFXOXdDLE1BQUEsR0FBUyxHQUFHO1FBQzlCLEtBQUs4d0MsVUFBQSxDQUFXLEtBQUtBLFVBQUEsQ0FBVzl3QyxNQUFBLEdBQVMsR0FBR0YsSUFBQSxJQUFRNEMsS0FBQTtNQUN0RDtJQUNGLE9BQU87TUFJTCxJQUFJbWQsR0FBQSxHQUFNLEtBQUtpeEIsVUFBQSxDQUFXLEtBQUtBLFVBQUEsQ0FBVzl3QyxNQUFBLEdBQVM7TUFFbkQsSUFBSTZmLEdBQUEsSUFBTyxDQUFDQSxHQUFBLENBQUlqYSxjQUFBLENBQWU5RixJQUFJLEdBQUc7UUFDcEMrZixHQUFBLENBQUkvZixJQUFBLElBQVEsS0FBSyt3QyxPQUFBLENBQVEvd0MsSUFBQTtNQUMzQjtJQUNGO0lBRUEsSUFBSTRDLEtBQUEsSUFBUyxNQUFNO01BQ2pCLE9BQU8sS0FBS211QyxPQUFBLENBQVEvd0MsSUFBQTtJQUN0QixPQUFPO01BQ0wsS0FBSyt3QyxPQUFBLENBQVEvd0MsSUFBQSxJQUFRNEMsS0FBQTtJQUN2QjtFQUNGO0FBRUY7QUFNQSxJQUFJcUIsTUFBQSxHQUFTKzZCLE9BQUE7QUFHYkMsV0FBQSxDQUFZLGNBQWMsVUFBVTM0QixPQUFBLEVBQVM7RUFJM0MsSUFBSTlCLENBQUEsR0FBSThCLE9BQUEsQ0FBUTB2QixRQUFBLENBQVM7RUFFekIsSUFBSTF2QixPQUFBLENBQVFpd0IsWUFBQSxDQUFhL3hCLENBQUEsQ0FBRS9FLElBQUksR0FBRztJQUNoQytFLENBQUEsQ0FBRTlFLFFBQUEsR0FBVztJQUNiOEUsQ0FBQSxDQUFFN0UsWUFBQSxHQUFlO0VBQ25CO0VBRUEsT0FBTztJQUNMMDJCLE1BQUEsRUFBUSxDQUFDN3hCLENBQUM7SUFDVm9lLE9BQUEsRUFBUztFQUNYO0FBQ0YsQ0FBQztBQUNEcWMsV0FBQSxDQUFZLGlCQUFpQixVQUFVMzRCLE9BQUEsRUFBUztFQU05QyxJQUFJOUIsQ0FBQSxHQUFJOEIsT0FBQSxDQUFRMHZCLFFBQUEsQ0FBUztFQUN6QjF2QixPQUFBLENBQVErcUMsVUFBQSxDQUFXLElBQUk7RUFFdkIsT0FBTztJQUNMaGIsTUFBQSxFQUFRLENBQUM3eEIsQ0FBQztJQUNWb2UsT0FBQSxFQUFTO0VBQ1g7QUFDRixDQUFDO0FBR0RxYyxXQUFBLENBQVksaUJBQWlCLFVBQVUzNEIsT0FBQSxFQUFTO0VBQzlDLElBQUl5cEIsSUFBQSxHQUFPenBCLE9BQUEsQ0FBUWdyQyxXQUFBLENBQVksQ0FBQztFQUNoQyxPQUFPO0lBQ0xqYixNQUFBLEVBQVF0RyxJQUFBLENBQUs7SUFDYm5OLE9BQUEsRUFBUztFQUNYO0FBQ0YsQ0FBQztBQUdEcWMsV0FBQSxDQUFZLGtCQUFrQixVQUFVMzRCLE9BQUEsRUFBUztFQUMvQyxJQUFJeXBCLElBQUEsR0FBT3pwQixPQUFBLENBQVFnckMsV0FBQSxDQUFZLENBQUM7RUFDaEMsT0FBTztJQUNMamIsTUFBQSxFQUFRdEcsSUFBQSxDQUFLO0lBQ2JuTixPQUFBLEVBQVM7RUFDWDtBQUNGLENBQUM7QUFLRHFjLFdBQUEsQ0FBWSxpQkFBaUIsVUFBVTM0QixPQUFBLEVBQVM7RUFDOUMsSUFBSXlwQixJQUFBLEdBQU96cEIsT0FBQSxDQUFRZ3JDLFdBQUEsQ0FBWSxDQUFDO0VBRWhDaHJDLE9BQUEsQ0FBUWt3QixhQUFBLENBQWM7RUFDdEIsSUFBSXhDLFNBQUEsR0FBWTF0QixPQUFBLENBQVFrdkIsTUFBQSxDQUFPO0VBRS9CLElBQUl6RixJQUFBLENBQUssR0FBRzd2QixNQUFBLEtBQVcsS0FBSzZ2QixJQUFBLENBQUssR0FBRyxHQUFHdHdCLElBQUEsS0FBU3UwQixTQUFBLENBQVV2MEIsSUFBQSxFQUFNO0lBQzlELE9BQU87TUFDTDQyQixNQUFBLEVBQVF0RyxJQUFBLENBQUs7TUFDYm5OLE9BQUEsRUFBUztJQUNYO0VBQ0YsT0FBTztJQUNMLE9BQU87TUFDTHlULE1BQUEsRUFBUXRHLElBQUEsQ0FBSztNQUNibk4sT0FBQSxFQUFTO0lBQ1g7RUFDRjtBQUNGLENBQUM7QUFLRHFjLFdBQUEsQ0FBWSxhQUFhLG9DQUFvQztBQUU3REEsV0FBQSxDQUFZLGdCQUFnQixVQUFVMzRCLE9BQUEsRUFBUztFQUM3QyxJQUFJeXBCLElBQUEsR0FBT3pwQixPQUFBLENBQVFnckMsV0FBQSxDQUFZLENBQUM7RUFFaEMsSUFBSWhyQyxPQUFBLENBQVE0TCxJQUFBLEtBQVMsUUFBUTtJQUMzQixPQUFPO01BQ0xta0IsTUFBQSxFQUFRdEcsSUFBQSxDQUFLO01BQ2JuTixPQUFBLEVBQVM7SUFDWDtFQUNGLE9BQU87SUFDTCxPQUFPO01BQ0x5VCxNQUFBLEVBQVF0RyxJQUFBLENBQUs7TUFDYm5OLE9BQUEsRUFBUztJQUNYO0VBQ0Y7QUFDRixDQUFDO0FBRUQsSUFBSTJ1QixhQUFBLEdBQWdCO0VBQ2xCLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7QUFDUDtBQVVBdFMsV0FBQSxDQUFZLFVBQVUsVUFBVTM0QixPQUFBLEVBQVM7RUFDdkMsSUFBSXZHLEtBQUEsR0FBUXVHLE9BQUEsQ0FBUTB2QixRQUFBLENBQVM7RUFDN0IsSUFBSWhKLElBQUE7RUFDSixJQUFJdlgsTUFBQSxHQUFTO0VBRWIsSUFBSTFWLEtBQUEsQ0FBTU4sSUFBQSxLQUFTLEtBQUs7SUFDdEJ1dEIsSUFBQSxHQUFPO0lBQ1BqdEIsS0FBQSxHQUFRdUcsT0FBQSxDQUFRMHZCLFFBQUEsQ0FBUztFQUMzQixXQUFXajJCLEtBQUEsQ0FBTU4sSUFBQSxLQUFTLEtBQUs7SUFDN0J1dEIsSUFBQSxHQUFPO0lBQ1BqdEIsS0FBQSxHQUFRdUcsT0FBQSxDQUFRMHZCLFFBQUEsQ0FBUztFQUMzQixXQUFXajJCLEtBQUEsQ0FBTU4sSUFBQSxLQUFTLEtBQUs7SUFDN0JNLEtBQUEsR0FBUXVHLE9BQUEsQ0FBUTB2QixRQUFBLENBQVM7SUFFekIsSUFBSWoyQixLQUFBLENBQU1OLElBQUEsQ0FBSyxPQUFPLE1BQU07TUFDMUJnVyxNQUFBLEdBQVMxVixLQUFBLENBQU1OLElBQUEsQ0FBSzJTLFVBQUEsQ0FBVyxDQUFDO0lBQ2xDLFdBQVdyUyxLQUFBLENBQU1OLElBQUEsS0FBUyxPQUFPO01BQy9CLE1BQU0sSUFBSUksVUFBQSxDQUFXLDBCQUEwQjtJQUNqRCxPQUFPO01BQ0w0VixNQUFBLEdBQVMxVixLQUFBLENBQU1OLElBQUEsQ0FBSzJTLFVBQUEsQ0FBVyxDQUFDO0lBQ2xDO0VBQ0YsT0FBTztJQUNMNGEsSUFBQSxHQUFPO0VBQ1Q7RUFFQSxJQUFJQSxJQUFBLEVBQU07SUFFUnZYLE1BQUEsR0FBUzg3QixhQUFBLENBQWN4eEMsS0FBQSxDQUFNTixJQUFBO0lBRTdCLElBQUlnVyxNQUFBLElBQVUsUUFBUUEsTUFBQSxJQUFVdVgsSUFBQSxFQUFNO01BQ3BDLE1BQU0sSUFBSW50QixVQUFBLENBQVcsa0JBQWtCbXRCLElBQUEsR0FBTyxZQUFZanRCLEtBQUEsQ0FBTU4sSUFBSTtJQUN0RTtJQUVBLElBQUkreEMsS0FBQTtJQUVKLFFBQVFBLEtBQUEsR0FBUUQsYUFBQSxDQUFjanJDLE9BQUEsQ0FBUWt2QixNQUFBLENBQU8sRUFBRS8xQixJQUFBLE1BQVUsUUFBUSt4QyxLQUFBLEdBQVF4a0IsSUFBQSxFQUFNO01BQzdFdlgsTUFBQSxJQUFVdVgsSUFBQTtNQUNWdlgsTUFBQSxJQUFVKzdCLEtBQUE7TUFDVmxyQyxPQUFBLENBQVEwdkIsUUFBQSxDQUFTO0lBQ25CO0VBQ0Y7RUFFQSxPQUFPLGFBQWF2Z0IsTUFBQSxHQUFTO0FBQy9CLENBQUM7QUFJRCxJQUFJZzhCLFVBQUEsR0FBYUEsQ0FBQ25yQyxPQUFBLEVBQVNvckMsUUFBQSxFQUFVQyxXQUFBLEtBQWdCO0VBQ25ELElBQUludUIsR0FBQSxHQUFNbGQsT0FBQSxDQUFRc3dCLFVBQUEsQ0FBVyxFQUFFUCxNQUFBO0VBRS9CLElBQUk3UyxHQUFBLENBQUl0akIsTUFBQSxLQUFXLEdBQUc7SUFDcEIsTUFBTSxJQUFJTCxVQUFBLENBQVcsb0RBQW9EO0VBQzNFO0VBRUEsSUFBSUcsSUFBQSxHQUFPd2pCLEdBQUEsQ0FBSSxHQUFHL2pCLElBQUE7RUFDbEIsSUFBSW15QyxNQUFBLEdBQVN0ckMsT0FBQSxDQUFRdXJDLFNBQUEsQ0FBVTd4QyxJQUFJO0VBRW5DLElBQUk0eEMsTUFBQSxJQUFVLENBQUNGLFFBQUEsRUFBVTtJQUN2QixNQUFNLElBQUk3eEMsVUFBQSxDQUFXLGtCQUFrQkcsSUFBQSxHQUFPLCtCQUErQkEsSUFBQSxHQUFPLHVCQUF1QjtFQUM3RztFQUVBLElBQUksQ0FBQzR4QyxNQUFBLElBQVUsQ0FBQ0QsV0FBQSxFQUFhO0lBQzNCLE1BQU0sSUFBSTl4QyxVQUFBLENBQVcsb0JBQW9CRyxJQUFBLEdBQU8sb0JBQW9CQSxJQUFBLEdBQU8sdUNBQTRDO0VBQ3pIO0VBRUEsSUFBSTRpQixPQUFBLEdBQVU7RUFDZFksR0FBQSxHQUFNbGQsT0FBQSxDQUFRc3dCLFVBQUEsQ0FBVyxFQUFFUCxNQUFBO0VBRTNCLElBQUk3UyxHQUFBLENBQUl0akIsTUFBQSxLQUFXLEtBQUtzakIsR0FBQSxDQUFJLEdBQUcvakIsSUFBQSxLQUFTLEtBQUs7SUFDM0MsSUFBSXF5QyxPQUFBLEdBQVU7SUFDZCxJQUFJL3hDLEtBQUEsR0FBUXVHLE9BQUEsQ0FBUXlyQyxlQUFBLENBQWdCO0lBRXBDLE9BQU9oeUMsS0FBQSxDQUFNTixJQUFBLEtBQVMsT0FBT00sS0FBQSxDQUFNTixJQUFBLEtBQVMsT0FBTztNQUVqRHF5QyxPQUFBLElBQVcveEMsS0FBQSxDQUFNTixJQUFBO01BQ2pCTSxLQUFBLEdBQVF1RyxPQUFBLENBQVF5ckMsZUFBQSxDQUFnQjtJQUNsQztJQUVBLElBQUksQ0FBQ0QsT0FBQSxDQUFRN3ZDLEtBQUEsQ0FBTSxnQkFBZ0IsR0FBRztNQUNwQyxNQUFNLElBQUlwQyxVQUFBLENBQVcsa0NBQWtDaXlDLE9BQU87SUFDaEU7SUFFQWx2QixPQUFBLEdBQVUxZCxRQUFBLENBQVM0c0MsT0FBTztJQUMxQnR1QixHQUFBLEdBQU1sZCxPQUFBLENBQVFzd0IsVUFBQSxDQUFXLEVBQUVQLE1BQUE7RUFDN0I7RUFHQS92QixPQUFBLENBQVFyQyxNQUFBLENBQU8wdkIsR0FBQSxDQUFJM3pCLElBQUEsRUFBTTtJQUN2QnEyQixNQUFBLEVBQVE3UyxHQUFBO0lBQ1JaO0VBQ0YsQ0FBQztFQUNELE9BQU87QUFDVDtBQUVBcWMsV0FBQSxDQUFZLGdCQUFnQjM0QixPQUFBLElBQVdtckMsVUFBQSxDQUFXbnJDLE9BQUEsRUFBUyxPQUFPLElBQUksQ0FBQztBQUN2RTI0QixXQUFBLENBQVksa0JBQWtCMzRCLE9BQUEsSUFBV21yQyxVQUFBLENBQVduckMsT0FBQSxFQUFTLE1BQU0sS0FBSyxDQUFDO0FBQ3pFMjRCLFdBQUEsQ0FBWSxvQkFBb0IzNEIsT0FBQSxJQUFXbXJDLFVBQUEsQ0FBV25yQyxPQUFBLEVBQVMsTUFBTSxJQUFJLENBQUM7QUFFMUUyNEIsV0FBQSxDQUFZLGFBQWEzNEIsT0FBQSxJQUFXO0VBQ2xDLElBQUlrZCxHQUFBLEdBQU1sZCxPQUFBLENBQVFnckMsV0FBQSxDQUFZLENBQUMsRUFBRTtFQUVqQ3ByQyxPQUFBLENBQVE4ckMsR0FBQSxDQUFJeHVCLEdBQUEsQ0FBSXNULE9BQUEsQ0FBUSxFQUFFem5CLEdBQUEsQ0FBSXRQLEtBQUEsSUFBU0EsS0FBQSxDQUFNTixJQUFJLEVBQUU2UCxJQUFBLENBQUssRUFBRSxDQUFDO0VBQzNELE9BQU87QUFDVCxDQUFDO0FBQ0QydkIsV0FBQSxDQUFZLGdCQUFnQjM0QixPQUFBLElBQVc7RUFDckMsSUFBSWtkLEdBQUEsR0FBTWxkLE9BQUEsQ0FBUWdyQyxXQUFBLENBQVksQ0FBQyxFQUFFO0VBRWpDcHJDLE9BQUEsQ0FBUTlGLEtBQUEsQ0FBTW9qQixHQUFBLENBQUlzVCxPQUFBLENBQVEsRUFBRXpuQixHQUFBLENBQUl0UCxLQUFBLElBQVNBLEtBQUEsQ0FBTU4sSUFBSSxFQUFFNlAsSUFBQSxDQUFLLEVBQUUsQ0FBQztFQUM3RCxPQUFPO0FBQ1QsQ0FBQztBQUNEMnZCLFdBQUEsQ0FBWSxVQUFVMzRCLE9BQUEsSUFBVztFQUMvQixJQUFJd3ZCLEdBQUEsR0FBTXh2QixPQUFBLENBQVEwdkIsUUFBQSxDQUFTO0VBQzNCLElBQUloMkIsSUFBQSxHQUFPODFCLEdBQUEsQ0FBSXIyQixJQUFBO0VBRWZ5RyxPQUFBLENBQVE4ckMsR0FBQSxDQUFJbGMsR0FBQSxFQUFLeHZCLE9BQUEsQ0FBUXJDLE1BQUEsQ0FBT215QixHQUFBLENBQUlwMkIsSUFBSSxHQUFHMnZDLFNBQUEsQ0FBVTN2QyxJQUFBLEdBQU91WSxPQUFBLENBQVFHLElBQUEsQ0FBSzFZLElBQUEsR0FBT3VZLE9BQUEsQ0FBUTlZLElBQUEsQ0FBS08sSUFBQSxDQUFLO0VBQ2xHLE9BQU87QUFDVCxDQUFDO0FBSURpL0IsV0FBQSxDQUFZLFlBQVksR0FBRztBQUMzQkEsV0FBQSxDQUFZLFlBQVksR0FBRztBQU8zQkEsV0FBQSxDQUFZLEtBQUssZ0JBQWdCO0FBQ2pDQSxXQUFBLENBQVksUUFBUSxHQUFHO0FBQ3ZCQSxXQUFBLENBQVksUUFBUSxHQUFHO0FBQ3ZCQSxXQUFBLENBQVksUUFBUSxPQUFPO0FBQzNCQSxXQUFBLENBQVksUUFBUSxPQUFPO0FBTzNCQSxXQUFBLENBQVksbUJBQW1CLDhDQUEyQztBQUMxRUEsV0FBQSxDQUFZLGVBQWUsd0RBQXdEO0FBQ25GQSxXQUFBLENBQVksb0JBQW9CLDJEQUF3RDtBQUV4RkEsV0FBQSxDQUFZLFVBQVUsY0FBYztBQUVwQ0EsV0FBQSxDQUFZLFVBQVUsY0FBYztBQUNwQ0EsV0FBQSxDQUFZLFVBQVUsY0FBYztBQUNwQ0EsV0FBQSxDQUFZLFVBQVUsY0FBYztBQUNwQ0EsV0FBQSxDQUFZLFVBQVUsY0FBYztBQUNwQ0EsV0FBQSxDQUFZLFVBQVUsY0FBYztBQUNwQ0EsV0FBQSxDQUFZLFVBQVUsY0FBYztBQUNwQ0EsV0FBQSxDQUFZLFVBQVUsY0FBYztBQUNwQ0EsV0FBQSxDQUFZLFVBQVUsZUFBZTtBQUVyQ0EsV0FBQSxDQUFZLFVBQVUsZUFBZTtBQUNyQ0EsV0FBQSxDQUFZLFVBQVUsZUFBZTtBQUVyQ0EsV0FBQSxDQUFZLFVBQVUsVUFBVTtBQUloQ0EsV0FBQSxDQUFZLFFBQVUsU0FBUztBQUUvQkEsV0FBQSxDQUFZLFVBQVUsMEJBQTBCO0FBQ2hEQSxXQUFBLENBQVksVUFBVSwwQkFBMEI7QUFDaERBLFdBQUEsQ0FBWSxVQUFVLDBCQUEwQjtBQUVoREEsV0FBQSxDQUFZLGVBQWUsZUFBZTtBQUUxQ0EsV0FBQSxDQUFZLGNBQWMseUJBQXlCO0FBTW5EQSxXQUFBLENBQVksU0FBUyx3REFBd0Q7QUFNN0VBLFdBQUEsQ0FBWSxTQUFTLDREQUF1RDtBQUM1RUEsV0FBQSxDQUFZLFFBQVEsT0FBTztBQUMzQkEsV0FBQSxDQUFZLFVBQVUsT0FBTztBQUM3QkEsV0FBQSxDQUFZLFdBQVcsbUZBQW1GO0FBQzFHQSxXQUFBLENBQVksVUFBVSxTQUFTO0FBRS9CQSxXQUFBLENBQVksVUFBVSwyR0FBcUg7QUFDM0lBLFdBQUEsQ0FBWSxVQUFVLHVFQUF1RTtBQUM3RkEsV0FBQSxDQUFZLFVBQVUscUVBQXFFO0FBQzNGQSxXQUFBLENBQVksVUFBVSw0RUFBaUY7QUFDdkdBLFdBQUEsQ0FBWSxVQUFVLDZFQUFrRjtBQUN4R0EsV0FBQSxDQUFZLFVBQVUsMkVBQWdGO0FBQ3RHQSxXQUFBLENBQVksVUFBVSxpRUFBaUU7QUFFdkZBLFdBQUEsQ0FBWSxVQUFVLFFBQVE7QUFDOUJBLFdBQUEsQ0FBWSxVQUFVLDhCQUE4QjtBQUNwREEsV0FBQSxDQUFZLFVBQVUsU0FBUztBQUMvQkEsV0FBQSxDQUFZLFVBQVUsWUFBWTtBQUNsQ0EsV0FBQSxDQUFZLFVBQVUsWUFBWTtBQUNsQ0EsV0FBQSxDQUFZLFVBQVUsWUFBWTtBQUNsQ0EsV0FBQSxDQUFZLFVBQVUsWUFBWTtBQUNsQ0EsV0FBQSxDQUFZLFFBQVUsYUFBYTtBQUNuQ0EsV0FBQSxDQUFZLFFBQVUsa0JBQWtCO0FBQ3hDQSxXQUFBLENBQVksVUFBVSxrQkFBa0I7QUFHeENBLFdBQUEsQ0FBWSxjQUFjLG1EQUFvRDtBQUM5RUEsV0FBQSxDQUFZLGNBQWMsbURBQW9EO0FBQzlFQSxXQUFBLENBQVksY0FBYyxtREFBb0Q7QUFDOUVBLFdBQUEsQ0FBWSxjQUFjLG1EQUFvRDtBQU85RUEsV0FBQSxDQUFZLFdBQVcsd0NBQXdDO0FBQy9EQSxXQUFBLENBQVksVUFBVSxTQUFTO0FBTS9CQSxXQUFBLENBQVksY0FBYyxtQkFBbUI7QUFDN0NBLFdBQUEsQ0FBWSxjQUFjLG1CQUFtQjtBQUM3Q0EsV0FBQSxDQUFZLGNBQWMsbUJBQW1CO0FBQzdDQSxXQUFBLENBQVksZUFBZSxvQkFBb0I7QUFDL0NBLFdBQUEsQ0FBWSxXQUFXLGdCQUFnQjtBQUN2Q0EsV0FBQSxDQUFZLFdBQVcsZ0JBQWdCO0FBQ3ZDQSxXQUFBLENBQVksY0FBYyxtQkFBbUI7QUFDN0NBLFdBQUEsQ0FBWSxnQkFBZ0IscUJBQXFCO0FBQ2pEQSxXQUFBLENBQVksWUFBWSxpQkFBaUI7QUFDekNBLFdBQUEsQ0FBWSxZQUFZLGlCQUFpQjtBQUN6Q0EsV0FBQSxDQUFZLGNBQWMsbUJBQW1CO0FBRTdDQSxXQUFBLENBQVksY0FBYyx1Q0FBdUM7QUFHakVBLFdBQUEsQ0FBWSxXQUFXLGdHQUFxRztBQUU1SEEsV0FBQSxDQUFZLFdBQVcsOEJBQThCO0FBSXJEQSxXQUFBLENBQVksU0FBUyxtQ0FBbUM7QUFDeERBLFdBQUEsQ0FBWSxhQUFhLCtCQUErQjtBQUN4REEsV0FBQSxDQUFZLGVBQWUsOEJBQThCO0FBRXpELElBQUlnVCxXQUFBLEdBQWM7RUFDaEIsS0FBSztFQUNMLFNBQVM7RUFFVCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBRUwsV0FBVztFQUNYLFlBQVk7RUFDWixZQUFZO0VBQ1osY0FBYztFQUNkLGNBQWM7RUFDZCxZQUFZO0VBQ1osWUFBWTtFQUNaLFVBQVU7RUFDVixTQUFTO0VBQ1QsZUFBZTtFQUNmLGNBQWM7RUFDZCxhQUFhO0VBQ2IsY0FBYztFQUNkLFNBQVM7RUFDVCxvQkFBb0I7RUFDcEIsb0JBQW9CO0VBQ3BCLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsd0JBQXdCO0VBQ3hCLHdCQUF3QjtFQUN4QixZQUFZO0VBQ1osZ0JBQWdCO0VBQ2hCLG9CQUFvQjtFQUNwQixXQUFXO0VBRVgsYUFBYTtFQUViLGFBQWE7RUFDYixZQUFZO0VBQ1osWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFFaEIsV0FBVztFQUNYLFNBQVM7RUFDVCxVQUFVO0VBQ1YsVUFBVTtFQUNWLFdBQVc7RUFDWCxZQUFZO0VBQ1osY0FBYztFQUVkLFdBQVc7QUFDYjtBQUNBaFQsV0FBQSxDQUFZLFVBQVUsVUFBVTM0QixPQUFBLEVBQVM7RUFNdkMsSUFBSTRyQyxPQUFBLEdBQVU7RUFDZCxJQUFJajFCLElBQUEsR0FBTzNXLE9BQUEsQ0FBUTZyQyxpQkFBQSxDQUFrQixFQUFFMXlDLElBQUE7RUFFdkMsSUFBSXdkLElBQUEsSUFBUWcxQixXQUFBLEVBQWE7SUFDdkJDLE9BQUEsR0FBVUQsV0FBQSxDQUFZaDFCLElBQUE7RUFDeEIsV0FBV0EsSUFBQSxDQUFLMWMsS0FBQSxDQUFNLEdBQUcsQ0FBQyxNQUFNLFNBQVM7SUFDdkMyeEMsT0FBQSxHQUFVO0VBQ1osV0FBV2oxQixJQUFBLElBQVExRSxPQUFBLENBQVFHLElBQUEsRUFBTTtJQUMvQixJQUFJdlYsS0FBQSxDQUFNcEMsUUFBQSxDQUFTLENBQUMsT0FBTyxLQUFLLEdBQUd3WCxPQUFBLENBQVFHLElBQUEsQ0FBS3VFLElBQUEsRUFBTTdhLEtBQUssR0FBRztNQUM1RDh2QyxPQUFBLEdBQVU7SUFDWjtFQUNGO0VBRUEsT0FBT0EsT0FBQTtBQUNULENBQUM7QUFDRCxJQUFJRSxjQUFBLEdBQWlCO0VBRW5CLEtBQUs7RUFDTCxLQUFLO0VBQ0wsWUFBWTtFQUNaLE9BQU87RUFDUCxZQUFZO0VBQ1osWUFBWTtFQUNaLFdBQVc7RUFDWCxZQUFZO0VBQ1osWUFBWTtFQUNaLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gsVUFBVTtFQUNWLFdBQVc7RUFDWCxVQUFVO0VBQ1YsV0FBVztFQUVYLEtBQUs7RUFFTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7QUFDUDtBQUNBblQsV0FBQSxDQUFZLFdBQVcsVUFBVTM0QixPQUFBLEVBQVM7RUFDeEMsSUFBSTJXLElBQUEsR0FBTzNXLE9BQUEsQ0FBUWt2QixNQUFBLENBQU8sRUFBRS8xQixJQUFBO0VBRTVCLElBQUl3ZCxJQUFBLElBQVFtMUIsY0FBQSxFQUFnQjtJQUMxQixPQUFPO0VBQ1QsT0FBTztJQUNMLE9BQU87RUFDVDtBQUNGLENBQUM7QUFDRG5ULFdBQUEsQ0FBWSxXQUFXLFVBQVUzNEIsT0FBQSxFQUFTO0VBQ3hDLElBQUkyVyxJQUFBLEdBQU8zVyxPQUFBLENBQVFrdkIsTUFBQSxDQUFPLEVBQUUvMUIsSUFBQTtFQUc1QixJQUFJd2QsSUFBQSxJQUFRbTFCLGNBQUEsSUFBa0JuMUIsSUFBQSxLQUFTLEtBQUs7SUFDMUMsT0FBTztFQUNULE9BQU87SUFDTCxPQUFPO0VBQ1Q7QUFDRixDQUFDO0FBQ0RnaUIsV0FBQSxDQUFZLFdBQVcsVUFBVTM0QixPQUFBLEVBQVM7RUFDeEMsSUFBSTJXLElBQUEsR0FBTzNXLE9BQUEsQ0FBUWt2QixNQUFBLENBQU8sRUFBRS8xQixJQUFBO0VBRTVCLElBQUl3ZCxJQUFBLElBQVFtMUIsY0FBQSxFQUFnQjtJQUMxQixPQUFPO0VBQ1QsT0FBTztJQUNMLE9BQU87RUFDVDtBQUNGLENBQUM7QUFDRG5ULFdBQUEsQ0FBWSxXQUFXLFNBQVM7QUFDaENBLFdBQUEsQ0FBWSxXQUFXLFNBQVM7QUFDaENBLFdBQUEsQ0FBWSxXQUFXLFlBQVk7QUFJbkNBLFdBQUEsQ0FBWSxXQUFXLFlBQVk7QUFJbkNBLFdBQUEsQ0FBWSxXQUFXLFNBQVM7QUFDaENBLFdBQUEsQ0FBWSxXQUFXLFNBQVM7QUFDaENBLFdBQUEsQ0FBWSxXQUFXLFNBQVM7QUFJaENBLFdBQUEsQ0FBWSxhQUFhLDhDQUE4QztBQUd2RUEsV0FBQSxDQUFZLE9BQU8sMEJBQTBCO0FBRTdDQSxXQUFBLENBQVksZUFBZSxLQUFLO0FBSWhDQSxXQUFBLENBQVksT0FBTyxjQUFjO0FBQ2pDQSxXQUFBLENBQVksT0FBTywwQkFBMEI7QUFFN0NBLFdBQUEsQ0FBWSxjQUFjLEtBQUs7QUFHL0JBLFdBQUEsQ0FBWSxPQUFPLDBCQUEwQjtBQUU3Q0EsV0FBQSxDQUFZLGdCQUFnQixLQUFLO0FBR2pDQSxXQUFBLENBQVksT0FBTywwQkFBMEI7QUFFN0NBLFdBQUEsQ0FBWSxrQkFBa0IsS0FBSztBQUduQ0EsV0FBQSxDQUFZLGlCQUFpQiwwQkFBMEI7QUFHdkRBLFdBQUEsQ0FBWSxtQkFBbUIseUJBQXlCO0FBRXhEQSxXQUFBLENBQVksYUFBYSxhQUFhO0FBRXRDQSxXQUFBLENBQVksWUFBWSxvQkFBb0I7QUFFNUNBLFdBQUEsQ0FBWSxVQUFVLG1CQUFtQjtBQUV6Q0EsV0FBQSxDQUFZLFdBQVcsbUJBQW1CO0FBRTFDQSxXQUFBLENBQVksU0FBUyxtQ0FBbUM7QUFDeERBLFdBQUEsQ0FBWSxlQUFlLHVCQUF1QjtBQUNsREEsV0FBQSxDQUFZLGlCQUFpQjM0QixPQUFBLElBQVc7RUFDdEMsSUFBSUEsT0FBQSxDQUFRckMsTUFBQSxDQUFPbXlCLEdBQUEsQ0FBSSxVQUFVLEdBQUc7SUFDbEMsTUFBTSxJQUFJdjJCLFVBQUEsQ0FBVyxnQkFBZ0I7RUFDdkM7RUFFQSxPQUFPO0FBQ1QsQ0FBQztBQVVEby9CLFdBQUEsQ0FBWSxVQUFVLDZJQUF1SjtBQUM3S0EsV0FBQSxDQUFZLFNBQVMsK0VBQW9GO0FBQ3pHQSxXQUFBLENBQVksVUFBVSwrQkFBK0I7QUFDckRBLFdBQUEsQ0FBWSxTQUFTLGdHQUEwRztBQU0vSEEsV0FBQSxDQUFZLGFBQWEsYUFBYTtBQUt0Q0EsV0FBQSxDQUFZLFNBQVMsaUZBQTJGO0FBZWhILElBQUlvVCxXQUFBLEdBQWMzOEIsTUFBQSxDQUFPbkcsZUFBQSxDQUFnQixnQkFBZ0IsSUFBSTZDLFVBQUEsQ0FBVyxDQUFDLEdBQUcsS0FBSyxNQUFNN0MsZUFBQSxDQUFnQixnQkFBZ0IsSUFBSTZDLFVBQUEsQ0FBVyxDQUFDLEdBQUcsRUFBRTtBQUM1STZzQixXQUFBLENBQVksV0FBVyw2QkFBNkIsNkJBQTZCb1QsV0FBQSxHQUFjLHdCQUF3Qiw0QkFBNEI7QUFFbkpwVCxXQUFBLENBQVksV0FBVyw2QkFBNkIsNkJBQTZCb1QsV0FBQSxHQUFjLHdCQUF3Qiw0QkFBNEI7QUFLbkpwVCxXQUFBLENBQVksWUFBWSw4QkFBOEI7QUFDdERBLFdBQUEsQ0FBWSxhQUFhLG1CQUFtQjtBQUM1Q0EsV0FBQSxDQUFZLGNBQWMsbUNBQW1DO0FBSTdEQSxXQUFBLENBQVksbUJBQW1CLEdBQUc7QUFHbENBLFdBQUEsQ0FBWSxnQkFBZ0Isb0NBQW9DO0FBRWhFQSxXQUFBLENBQVksY0FBYyxrR0FBNkc7QUFFdklBLFdBQUEsQ0FBWSxjQUFjLHdGQUFtRztBQUc3SEEsV0FBQSxDQUFZLGNBQWMsK0ZBQTJHO0FBRXJJQSxXQUFBLENBQVksYUFBYSw0R0FBd0g7QUFFakpBLFdBQUEsQ0FBWSxhQUFhLDRHQUF3SDtBQUVqSkEsV0FBQSxDQUFZLGNBQWMsd0ZBQW1HO0FBRzdIQSxXQUFBLENBQVksY0FBYywrRkFBMkc7QUFFcklBLFdBQUEsQ0FBWSxhQUFhLG1HQUE4RztBQUV2SUEsV0FBQSxDQUFZLGFBQWEsNEdBQXdIO0FBRWpKQSxXQUFBLENBQVksaUJBQWlCLHdHQUFvSDtBQUVqSkEsV0FBQSxDQUFZLGlCQUFpQix3R0FBb0g7QUFFakpBLFdBQUEsQ0FBWSxjQUFjLHFHQUFpSDtBQUUzSUEsV0FBQSxDQUFZLGNBQWMscUdBQWlIO0FBRTNJQSxXQUFBLENBQVksVUFBVSxZQUFZO0FBRWxDQSxXQUFBLENBQVksVUFBVSxXQUFXO0FBRWpDQSxXQUFBLENBQVksVUFBVSxZQUFZO0FBRWxDQSxXQUFBLENBQVksVUFBVSxZQUFZO0FBRWxDQSxXQUFBLENBQVksVUFBVSxZQUFZO0FBS2xDQSxXQUFBLENBQVksV0FBVyxjQUFjO0FBQ3JDQSxXQUFBLENBQVksZ0JBQWdCLFlBQVk7QUFDeENBLFdBQUEsQ0FBWSxpQkFBaUIsWUFBWTtBQUN6Q0EsV0FBQSxDQUFZLHNCQUFzQixZQUFZO0FBQzlDQSxXQUFBLENBQVksaUJBQWlCLFlBQVk7QUFDekNBLFdBQUEsQ0FBWSxzQkFBc0IsWUFBWTtBQUM5Q0EsV0FBQSxDQUFZLGdCQUFnQixXQUFXO0FBQ3ZDQSxXQUFBLENBQVkscUJBQXFCLFdBQVc7QUFDNUNBLFdBQUEsQ0FBWSxnQkFBZ0IsV0FBVztBQUN2Q0EsV0FBQSxDQUFZLHFCQUFxQixXQUFXO0FBRTVDQSxXQUFBLENBQVksc0JBQXNCLGVBQWU7QUFFakRBLFdBQUEsQ0FBWSxtQkFBbUIsWUFBWTtBQUUzQ0EsV0FBQSxDQUFZLGNBQWMsc0RBQXNEO0FBQ2hGQSxXQUFBLENBQVksbUJBQW1CLG9EQUFvRDtBQUNuRkEsV0FBQSxDQUFZLGlCQUFpQix5REFBeUQ7QUFDdEZBLFdBQUEsQ0FBWSxzQkFBc0IsdURBQXVEO0FBRXpGQSxXQUFBLENBQVksV0FBVyxvREFBb0Q7QUFDM0VBLFdBQUEsQ0FBWSxZQUFZLG1DQUFtQztBQUMzREEsV0FBQSxDQUFZLFlBQVksbUNBQW1DO0FBRzNEQSxXQUFBLENBQVksWUFBWSxtQ0FBbUM7QUFDM0RBLFdBQUEsQ0FBWSxhQUFhLG9DQUFvQztBQUM3REEsV0FBQSxDQUFZLGVBQWUseUNBQXlDO0FBQ3BFQSxXQUFBLENBQVksZUFBZSwwQ0FBMEM7QUFDckVBLFdBQUEsQ0FBWSxlQUFlLGdEQUFnRDtBQUMzRUEsV0FBQSxDQUFZLGdCQUFnQiwrQ0FBK0M7QUFHM0VBLFdBQUEsQ0FBWSxlQUFlLHFDQUFxQztBQUNoRUEsV0FBQSxDQUFZLGVBQWUscUNBQXFDO0FBQ2hFQSxXQUFBLENBQVksV0FBVyxpQ0FBaUM7QUFDeERBLFdBQUEsQ0FBWSxlQUFlLHFDQUFxQztBQUNoRUEsV0FBQSxDQUFZLFdBQVcsaUNBQWlDO0FBQ3hEQSxXQUFBLENBQVksZUFBZSxxQ0FBcUM7QUFDaEVBLFdBQUEsQ0FBWSxlQUFlLHFDQUFnQztBQUMzREEsV0FBQSxDQUFZLG9CQUFvQiwwQ0FBcUM7QUFDckVBLFdBQUEsQ0FBWSxnQkFBZ0Isc0NBQXNDO0FBQ2xFQSxXQUFBLENBQVksZ0JBQWdCLHNDQUFzQztBQUNsRUEsV0FBQSxDQUFZLGtCQUFrQix3Q0FBbUM7QUFDakVBLFdBQUEsQ0FBWSxtQkFBbUIseUNBQW9DO0FBQ25FQSxXQUFBLENBQVksa0JBQWtCLHdDQUFtQztBQUNqRUEsV0FBQSxDQUFZLG1CQUFtQix5Q0FBb0M7QUFDbkVBLFdBQUEsQ0FBWSxXQUFXLGlDQUFpQztBQUN4REEsV0FBQSxDQUFZLFdBQVcsaUNBQWlDO0FBS3hEQSxXQUFBLENBQVksZUFBZSx1RUFBaUY7QUFDNUdBLFdBQUEsQ0FBWSxlQUFlLHlFQUFtRjtBQUM5R0EsV0FBQSxDQUFZLFVBQVUsYUFBYTtBQUVuQ0EsV0FBQSxDQUFZLFVBQVUsYUFBYTtBQUVuQ0EsV0FBQSxDQUFZLFlBQVkseUVBQW1GO0FBQzNHQSxXQUFBLENBQVksWUFBWSwyRUFBcUY7QUFDN0dBLFdBQUEsQ0FBWSxVQUFVLFVBQVU7QUFFaENBLFdBQUEsQ0FBWSxVQUFVLFVBQVU7QUFNaENBLFdBQUEsQ0FBWSxZQUFZLG9KQUE4SjtBQUN0TEEsV0FBQSxDQUFZLFVBQUssVUFBVTtBQU8zQkEsV0FBQSxDQUFZLFVBQVUsYUFBYTtBQUNuQ0EsV0FBQSxDQUFZLFVBQVUsYUFBYTtBQUNuQ0EsV0FBQSxDQUFZLFVBQVUsYUFBYTtBQUNuQ0EsV0FBQSxDQUFZLFVBQVUsVUFBVTtBQUNoQ0EsV0FBQSxDQUFZLFVBQVUsVUFBVTtBQUNoQ0EsV0FBQSxDQUFZLFVBQVUsV0FBVztBQUNqQ0EsV0FBQSxDQUFZLFVBQVUsV0FBVztBQUNqQ0EsV0FBQSxDQUFZLFVBQVUsV0FBVztBQUNqQ0EsV0FBQSxDQUFZLE9BQU8sYUFBYTtBQUNoQ0EsV0FBQSxDQUFZLE9BQU8sYUFBYTtBQUNoQ0EsV0FBQSxDQUFZLE9BQU8sYUFBYTtBQUNoQ0EsV0FBQSxDQUFZLFVBQVUsU0FBUztBQUMvQkEsV0FBQSxDQUFZLGFBQWEsU0FBUztBQUNsQ0EsV0FBQSxDQUFZLFdBQVcsYUFBYTtBQUNwQ0EsV0FBQSxDQUFZLFVBQVUsYUFBYTtBQUNuQ0EsV0FBQSxDQUFZLFVBQVUsVUFBVTtBQUNoQ0EsV0FBQSxDQUFZLFNBQVMsYUFBYTtBQUNsQ0EsV0FBQSxDQUFZLFdBQVcsWUFBWTtBQUNuQ0EsV0FBQSxDQUFZLFdBQVcsYUFBYTtBQUNwQ0EsV0FBQSxDQUFZLGFBQWEsYUFBYTtBQUN0Q0EsV0FBQSxDQUFZLFlBQVksV0FBVztBQUNuQ0EsV0FBQSxDQUFZLGNBQWMsZUFBZTtBQUN6Q0EsV0FBQSxDQUFZLFdBQVcsWUFBWTtBQUNuQ0EsV0FBQSxDQUFZLGFBQWEsYUFBYTtBQUN0Q0EsV0FBQSxDQUFZLFNBQVMsYUFBYTtBQUNsQ0EsV0FBQSxDQUFZLFdBQVcsVUFBVTtBQUNqQ0EsV0FBQSxDQUFZLFVBQVUsa0JBQWtCO0FBQ3hDQSxXQUFBLENBQVksVUFBVSxrQkFBa0I7QUFDeENBLFdBQUEsQ0FBWSxVQUFVLGtCQUFrQjtBQUN4Q0EsV0FBQSxDQUFZLFlBQVksYUFBYTtBQUNyQ0EsV0FBQSxDQUFZLFdBQVcsTUFBTTtBQUM3QkEsV0FBQSxDQUFZLFdBQVcsU0FBUztBQUNoQ0EsV0FBQSxDQUFZLFVBQVUsYUFBYTtBQUNuQ0EsV0FBQSxDQUFZLFVBQVUsTUFBTTtBQUM1QkEsV0FBQSxDQUFZLFdBQVcsYUFBYTtBQUNwQ0EsV0FBQSxDQUFZLFVBQVUsYUFBYTtBQUNuQ0EsV0FBQSxDQUFZLFVBQVUsYUFBYTtBQUNuQ0EsV0FBQSxDQUFZLFVBQVUsYUFBYTtBQUNuQ0EsV0FBQSxDQUFZLFdBQVcsa0JBQWtCO0FBQ3pDQSxXQUFBLENBQVksV0FBVyxrQkFBa0I7QUFDekNBLFdBQUEsQ0FBWSxXQUFXLGtCQUFrQjtBQUN6Q0EsV0FBQSxDQUFZLFFBQVEsYUFBYTtBQUNqQ0EsV0FBQSxDQUFZLGFBQWEsYUFBYTtBQUN0Q0EsV0FBQSxDQUFZLFFBQVEsYUFBYTtBQUNqQ0EsV0FBQSxDQUFZLGFBQWEsYUFBYTtBQUN0Q0EsV0FBQSxDQUFZLFlBQVksTUFBTTtBQUM5QkEsV0FBQSxDQUFZLFVBQVUsY0FBYztBQUNwQ0EsV0FBQSxDQUFZLFVBQVUsY0FBYztBQUNwQ0EsV0FBQSxDQUFZLFVBQVUsY0FBYztBQUNwQ0EsV0FBQSxDQUFZLFVBQVUsTUFBTTtBQUM1QkEsV0FBQSxDQUFZLFdBQVcsYUFBYTtBQUNwQ0EsV0FBQSxDQUFZLFdBQVcsYUFBYTtBQUNwQ0EsV0FBQSxDQUFZLFNBQVMsYUFBYTtBQUNsQ0EsV0FBQSxDQUFZLFVBQVUsUUFBUTtBQUM5QkEsV0FBQSxDQUFZLFVBQVUsS0FBSztBQUMzQkEsV0FBQSxDQUFZLFlBQVksYUFBYTtBQUNyQ0EsV0FBQSxDQUFZLFNBQVMsVUFBVTtBQUMvQkEsV0FBQSxDQUFZLFVBQVUsWUFBWTtBQUNsQ0EsV0FBQSxDQUFZLFVBQVUsWUFBWTtBQUNsQ0EsV0FBQSxDQUFZLFNBQVMsYUFBYTtBQUNsQ0EsV0FBQSxDQUFZLGNBQWMsWUFBWTtBQUV0Q0EsV0FBQSxDQUFZLFlBQVksTUFBTTtBQUM5QkEsV0FBQSxDQUFZLFVBQVUsYUFBYTtBQUluQ0EsV0FBQSxDQUFZLFlBQVksbUNBQW1DO0FBQzNEQSxXQUFBLENBQVksWUFBWSxtQ0FBbUM7QUFDM0RBLFdBQUEsQ0FBWSxVQUFVLCtDQUErQztBQUlyRUEsV0FBQSxDQUFZLFNBQVMsNEJBQTRCO0FBQ2pEQSxXQUFBLENBQVksU0FBUyw0QkFBNEI7QUFDakRBLFdBQUEsQ0FBWSxZQUFZLG1DQUFtQztBQUMzREEsV0FBQSxDQUFZLFNBQVMsMEJBQTBCO0FBQy9DQSxXQUFBLENBQVksU0FBUywwQkFBMEI7QUFFL0MsSUFBSXFULFlBQUEsR0FBZUMsR0FBQSxJQUFPanNDLE9BQUEsSUFBVztFQUNuQyxJQUFJN0YsSUFBQSxHQUFPNkYsT0FBQSxDQUFRc3dCLFVBQUEsQ0FBVyxFQUFFUCxNQUFBO0VBQ2hDLElBQUlZLE1BQUEsR0FBUzN3QixPQUFBLENBQVFzd0IsVUFBQSxDQUFXLEVBQUVQLE1BQUE7RUFDbEMsSUFBSW1jLFlBQUEsR0FBZWxzQyxPQUFBLENBQVFzd0IsVUFBQSxDQUFXLEVBQUVQLE1BQUE7RUFDeEMsSUFBSTMxQixLQUFBLEdBQVE0RixPQUFBLENBQVFzd0IsVUFBQSxDQUFXLEVBQUVQLE1BQUE7RUFDakMsSUFBSW9jLFNBQUEsR0FBWW5zQyxPQUFBLENBQVFyQyxNQUFBLENBQU9teUIsR0FBQSxDQUFJLEdBQUc7RUFDdEMsSUFBSXNjLGVBQUEsR0FBa0Jwc0MsT0FBQSxDQUFRckMsTUFBQSxDQUFPbXlCLEdBQUEsQ0FBSSxLQUFLO0VBQzlDOXZCLE9BQUEsQ0FBUXJDLE1BQUEsQ0FBT3l2QixVQUFBLENBQVc7RUFFMUIsSUFBSWlmLFFBQUEsR0FBV0MsTUFBQSxJQUFVQyxRQUFBLElBQVc7SUFDbEMsSUFBSU4sR0FBQSxFQUFLO01BRVBNLFFBQUEsQ0FBUTV1QyxNQUFBLENBQU8wdkIsR0FBQSxDQUFJLEtBQUs4ZSxTQUFTO01BRWpDLElBQUlELFlBQUEsQ0FBYXR5QyxNQUFBLEVBQVE7UUFDdkIyeUMsUUFBQSxDQUFRNXVDLE1BQUEsQ0FBTzB2QixHQUFBLENBQUksT0FBTytlLGVBQWU7TUFDM0M7SUFDRjtJQUVBLElBQUlJLE9BQUEsR0FBVUYsTUFBQTtJQUVkLElBQUksQ0FBQ0EsTUFBQSxJQUFVSixZQUFBLENBQWF0eUMsTUFBQSxFQUFRO01BRWxDLElBQUk4ekIsU0FBQSxHQUFZNmUsUUFBQSxDQUFRcmQsTUFBQSxDQUFPO01BRS9CLElBQUl4QixTQUFBLENBQVV2MEIsSUFBQSxLQUFTLEtBQUs7UUFDMUJvekMsUUFBQSxDQUFRN2MsUUFBQSxDQUFTO1FBQ2pCOGMsT0FBQSxHQUFVO01BQ1o7SUFDRjtJQUVBLE9BQU87TUFDTHpjLE1BQUEsRUFBUXljLE9BQUEsR0FBVU4sWUFBQSxHQUFldmIsTUFBQTtNQUNqQ3JVLE9BQUEsRUFBUztJQUNYO0VBQ0Y7RUFFQXRjLE9BQUEsQ0FBUXJDLE1BQUEsQ0FBTzB2QixHQUFBLENBQUksS0FBS2dmLFFBQUEsQ0FBUyxLQUFLLENBQUM7RUFFdkMsSUFBSUgsWUFBQSxDQUFhdHlDLE1BQUEsRUFBUTtJQUN2Qm9HLE9BQUEsQ0FBUXJDLE1BQUEsQ0FBTzB2QixHQUFBLENBQUksT0FBT2dmLFFBQUEsQ0FBUyxJQUFJLENBQUM7RUFDMUM7RUFFQSxJQUFJbnZCLEdBQUEsR0FBTWxkLE9BQUEsQ0FBUXN3QixVQUFBLENBQVcsRUFBRVAsTUFBQTtFQUMvQixJQUFJMGMsUUFBQSxHQUFXenNDLE9BQUEsQ0FBUXV3QixZQUFBLENBQWEsQ0FBQyxHQUFHbjJCLEtBQUEsRUFBTyxHQUFHOGlCLEdBQUEsRUFBSyxHQUFHL2lCLElBQUEsQ0FDekQ7RUFDRDZGLE9BQUEsQ0FBUXJDLE1BQUEsQ0FBTzR2QixRQUFBLENBQVM7RUFDeEIsT0FBTztJQUNMd0MsTUFBQSxFQUFRMGMsUUFBQSxDQUFTamMsT0FBQSxDQUFRO0lBQ3pCbFUsT0FBQSxFQUFTO0VBQ1g7QUFDRjtBQUVBcWMsV0FBQSxDQUFZLGFBQWFxVCxZQUFBLENBQWEsS0FBSyxDQUFDO0FBQzVDclQsV0FBQSxDQUFZLGFBQWFxVCxZQUFBLENBQWEsSUFBSSxDQUFDO0FBQzNDclQsV0FBQSxDQUFZLFlBQVksd0ZBQTZGO0FBQ3JIQSxXQUFBLENBQVksU0FBUyxvRkFBeUY7QUFDOUdBLFdBQUEsQ0FBWSxTQUFTLG9DQUFvQztBQUl6REEsV0FBQSxDQUFZLFdBQVcsWUFBWTtBQUVuQ0EsV0FBQSxDQUFZLFVBQVUsMkJBQTJCO0FBQ2pEQSxXQUFBLENBQVksWUFBWSwyQkFBMkI7QUFDbkRBLFdBQUEsQ0FBWSxVQUFVLDJCQUEyQjtBQUNqREEsV0FBQSxDQUFZLFNBQVMsMkJBQTJCO0FBQ2hEQSxXQUFBLENBQVksV0FBVywyQkFBMkI7QUFDbERBLFdBQUEsQ0FBWSxVQUFVLHVCQUF1QjtBQUM3Q0EsV0FBQSxDQUFZLFlBQVksMkJBQTJCO0FBQ25EQSxXQUFBLENBQVksV0FBVywyQkFBMkI7QUFDbERBLFdBQUEsQ0FBWSxXQUFXLDJCQUEyQjtBQUNsREEsV0FBQSxDQUFZLFdBQVcsMkJBQTJCO0FBQ2xEQSxXQUFBLENBQVksV0FBVywyQkFBMkI7QUFDbERBLFdBQUEsQ0FBWSxXQUFXLDJCQUEyQjtBQUNsREEsV0FBQSxDQUFZLFdBQVcsMkJBQTJCO0FBQ2xEQSxXQUFBLENBQVksV0FBVywyQkFBMkI7QUFDbERBLFdBQUEsQ0FBWSxXQUFXLDJCQUEyQjtBQUNsREEsV0FBQSxDQUFZLFdBQVcsMkJBQTJCO0FBQ2xEQSxXQUFBLENBQVksV0FBVywyQkFBMkI7QUFDbERBLFdBQUEsQ0FBWSxZQUFZLDJCQUEyQjtBQUNuREEsV0FBQSxDQUFZLFlBQVksMkJBQTJCO0FBQ25EQSxXQUFBLENBQVksWUFBWSwyQkFBMkI7QUFDbkRBLFdBQUEsQ0FBWSxZQUFZLDJCQUEyQjtBQUNuREEsV0FBQSxDQUFZLFlBQVksMkJBQTJCO0FBQ25EQSxXQUFBLENBQVksV0FBVywyQkFBMkI7QUFDbERBLFdBQUEsQ0FBWSxXQUFXLDJCQUEyQjtBQUNsREEsV0FBQSxDQUFZLFdBQVcsMkJBQTJCO0FBQ2xEQSxXQUFBLENBQVksV0FBVywyQkFBMkI7QUFDbERBLFdBQUEsQ0FBWSxXQUFXLDJCQUEyQjtBQUNsREEsV0FBQSxDQUFZLFVBQVUsMkJBQTJCO0FBQ2pEQSxXQUFBLENBQVksVUFBVSwyQkFBMkI7QUFDakRBLFdBQUEsQ0FBWSxVQUFVLDJCQUEyQjtBQUNqREEsV0FBQSxDQUFZLFVBQVUsMkJBQTJCO0FBQ2pEQSxXQUFBLENBQVksVUFBVSwyQkFBMkI7QUFDakRBLFdBQUEsQ0FBWSxhQUFhLDJCQUEyQjtBQUNwREEsV0FBQSxDQUFZLGFBQWEsMkJBQTJCO0FBQ3BEQSxXQUFBLENBQVksYUFBYSwyQkFBMkI7QUFDcERBLFdBQUEsQ0FBWSxhQUFhLDJCQUEyQjtBQUNwREEsV0FBQSxDQUFZLGFBQWEsMkJBQTJCO0FBQ3BEQSxXQUFBLENBQVksYUFBYSwyQkFBMkI7QUFDcERBLFdBQUEsQ0FBWSxhQUFhLDJCQUEyQjtBQUNwREEsV0FBQSxDQUFZLGFBQWEsMkJBQTJCO0FBQ3BEQSxXQUFBLENBQVksYUFBYSwyQkFBMkI7QUFDcERBLFdBQUEsQ0FBWSxhQUFhLDJCQUEyQjtBQUNwREEsV0FBQSxDQUFZLFdBQVcsMkJBQTJCO0FBQ2xEQSxXQUFBLENBQVksV0FBVywyQkFBMkI7QUFDbERBLFdBQUEsQ0FBWSxXQUFXLDJCQUEyQjtBQUNsREEsV0FBQSxDQUFZLFdBQVcsMkJBQTJCO0FBQ2xEQSxXQUFBLENBQVksV0FBVywyQkFBMkI7QUFDbERBLFdBQUEsQ0FBWSxXQUFXLDJCQUEyQjtBQUNsREEsV0FBQSxDQUFZLFdBQVcsMkJBQTJCO0FBQ2xEQSxXQUFBLENBQVksV0FBVywyQkFBMkI7QUFDbERBLFdBQUEsQ0FBWSxXQUFXLDJCQUEyQjtBQUNsREEsV0FBQSxDQUFZLFdBQVcsMkJBQTJCO0FBQ2xEQSxXQUFBLENBQVksV0FBVywyQkFBMkI7QUFDbERBLFdBQUEsQ0FBWSxXQUFXLDJCQUEyQjtBQUNsREEsV0FBQSxDQUFZLFlBQVksMkJBQTJCO0FBQ25EQSxXQUFBLENBQVksYUFBYSwyQkFBMkI7QUFRcEQsSUFBSStULGdCQUFBLEdBQW1CO0VBQ3JCLEtBQUs7RUFFTCxLQUFLO0VBRUwsWUFBWTtFQUVaLGNBQWM7QUFFaEI7QUFDQSxJQUFNQyxhQUFBLEdBQU4sTUFBb0I7RUFDbEJsMEMsWUFBWXNCLEtBQUEsRUFBTzRvQixRQUFBLEVBQVUvVyxJQUFBLEVBQU07SUFDakMsS0FBSytXLFFBQUEsR0FBVztJQUNoQixLQUFLaXFCLGNBQUEsR0FBaUI7SUFDdEIsS0FBS2wwQyxLQUFBLEdBQVE7SUFDYixLQUFLaUYsTUFBQSxHQUFTO0lBQ2QsS0FBSysxQixLQUFBLEdBQVE7SUFDYixLQUFLOW5CLElBQUEsR0FBTztJQUNaLEtBQUsrVyxRQUFBLEdBQVdBLFFBQUE7SUFDaEIsS0FBS2lxQixjQUFBLEdBQWlCO0lBQ3RCLEtBQUtDLElBQUEsQ0FBSzl5QyxLQUFLO0lBRWYsS0FBSzRELE1BQUEsR0FBUyxJQUFJMnNDLFNBQUEsQ0FBVTNzQyxNQUFBLEVBQVFnbEIsUUFBQSxDQUFTaGxCLE1BQU07SUFDbkQsS0FBS2lPLElBQUEsR0FBT0EsSUFBQTtJQUNaLEtBQUs4bkIsS0FBQSxHQUFRLEVBQUM7RUFDaEI7RUFPQW1aLEtBQUs5eUMsS0FBQSxFQUFPO0lBQ1YsS0FBS3JCLEtBQUEsR0FBUSxJQUFJb3hDLEtBQUEsQ0FBTS92QyxLQUFBLEVBQU8sS0FBSzRvQixRQUFRO0VBQzdDO0VBTUErZ0IsV0FBV29KLE9BQUEsRUFBUztJQUNsQixLQUFLbGhDLElBQUEsR0FBT2toQyxPQUFBO0VBQ2Q7RUFNQTFmLFdBQUEsRUFBYTtJQUNYLEtBQUt6dkIsTUFBQSxDQUFPeXZCLFVBQUEsQ0FBVztFQUN6QjtFQU1BRyxTQUFBLEVBQVc7SUFDVCxLQUFLNXZCLE1BQUEsQ0FBTzR2QixRQUFBLENBQVM7RUFDdkI7RUFPQXNkLFVBQUEsRUFBWTtJQUNWLEtBQUtsdEMsTUFBQSxDQUFPa3RDLFNBQUEsQ0FBVTtFQUN4QjtFQU9BM2IsT0FBQSxFQUFTO0lBQ1AsSUFBSSxLQUFLd0UsS0FBQSxDQUFNOTVCLE1BQUEsS0FBVyxHQUFHO01BQzNCLEtBQUtnM0IsU0FBQSxDQUFVLEtBQUtsNEIsS0FBQSxDQUFNeXhDLEdBQUEsQ0FBSSxDQUFDO0lBQ2pDO0lBRUEsT0FBTyxLQUFLelcsS0FBQSxDQUFNLEtBQUtBLEtBQUEsQ0FBTTk1QixNQUFBLEdBQVM7RUFDeEM7RUFNQTgxQixTQUFBLEVBQVc7SUFDVCxLQUFLUixNQUFBLENBQU87SUFFWixPQUFPLEtBQUt3RSxLQUFBLENBQU12VSxHQUFBLENBQUk7RUFDeEI7RUFPQXlSLFVBQVVuM0IsS0FBQSxFQUFPO0lBQ2YsS0FBS2k2QixLQUFBLENBQU0zMUIsSUFBQSxDQUFLdEUsS0FBSztFQUN2QjtFQU1Bc3pDLFdBQVdoZCxNQUFBLEVBQVE7SUFDakIsS0FBSzJELEtBQUEsQ0FBTTMxQixJQUFBLENBQUssR0FBR2d5QixNQUFNO0VBQzNCO0VBT0FpZCxhQUFhQyxVQUFBLEVBQVk7SUFDdkIsSUFBSXQwQyxLQUFBO0lBQ0osSUFBSUMsR0FBQTtJQUNKLElBQUltM0IsTUFBQTtJQUVKLElBQUlrZCxVQUFBLEVBQVk7TUFDZCxLQUFLL2MsYUFBQSxDQUFjO01BRW5CLElBQUksS0FBS2hCLE1BQUEsQ0FBTyxFQUFFLzFCLElBQUEsS0FBUyxLQUFLO1FBQzlCLE9BQU87TUFDVDtNQUVBUixLQUFBLEdBQVEsS0FBSysyQixRQUFBLENBQVM7TUFFdEIsQ0FBQztRQUNDSyxNQUFBO1FBQ0FuM0I7TUFDRixJQUFJLEtBQUswM0IsVUFBQSxDQUFXLENBQUMsR0FBRyxDQUFDO0lBQzNCLE9BQU87TUFDTCxDQUFDO1FBQ0NQLE1BQUE7UUFDQXAzQixLQUFBO1FBQ0FDO01BQ0YsSUFBSSxLQUFLMDNCLFVBQUEsQ0FBVztJQUN0QjtJQUdBLEtBQUtNLFNBQUEsQ0FBVSxJQUFJMzNCLEtBQUEsQ0FBTSxPQUFPTCxHQUFBLENBQUlJLEdBQUcsQ0FBQztJQUN4QyxLQUFLK3pDLFVBQUEsQ0FBV2hkLE1BQU07SUFDdEIsT0FBT3AzQixLQUFBLENBQU1FLEtBQUEsQ0FBTUQsR0FBQSxFQUFLLEVBQUU7RUFDNUI7RUFNQXMzQixjQUFBLEVBQWdCO0lBQ2QsU0FBUztNQUNQLElBQUl6MkIsS0FBQSxHQUFRLEtBQUt5MUIsTUFBQSxDQUFPO01BRXhCLElBQUl6MUIsS0FBQSxDQUFNTixJQUFBLEtBQVMsS0FBSztRQUN0QixLQUFLdTZCLEtBQUEsQ0FBTXZVLEdBQUEsQ0FBSTtNQUNqQixPQUFPO1FBQ0w7TUFDRjtJQUNGO0VBQ0Y7RUFPQW1SLFdBQVc0YyxNQUFBLEVBQVE7SUFPakIsSUFBSW5kLE1BQUEsR0FBUyxFQUFDO0lBQ2QsSUFBSW9kLFdBQUEsR0FBY0QsTUFBQSxJQUFVQSxNQUFBLENBQU90ekMsTUFBQSxHQUFTO0lBRTVDLElBQUksQ0FBQ3V6QyxXQUFBLEVBQWE7TUFLaEIsS0FBS2pkLGFBQUEsQ0FBYztJQUNyQjtJQUVBLElBQUl2M0IsS0FBQSxHQUFRLEtBQUt1MkIsTUFBQSxDQUFPO0lBQ3hCLElBQUlNLEdBQUE7SUFDSixJQUFJdm5CLEtBQUEsR0FBUTtJQUNaLElBQUl0TSxLQUFBLEdBQVE7SUFFWixHQUFHO01BQ0Q2ekIsR0FBQSxHQUFNLEtBQUtFLFFBQUEsQ0FBUztNQUNwQkssTUFBQSxDQUFPaHlCLElBQUEsQ0FBS3l4QixHQUFHO01BRWYsSUFBSUEsR0FBQSxDQUFJcjJCLElBQUEsS0FBUyxLQUFLO1FBQ3BCLEVBQUU4TyxLQUFBO01BQ0osV0FBV3VuQixHQUFBLENBQUlyMkIsSUFBQSxLQUFTLEtBQUs7UUFDM0IsRUFBRThPLEtBQUE7UUFFRixJQUFJQSxLQUFBLEtBQVUsSUFBSTtVQUNoQixNQUFNLElBQUkxTyxVQUFBLENBQVcsV0FBV2kyQixHQUFHO1FBQ3JDO01BQ0YsV0FBV0EsR0FBQSxDQUFJcjJCLElBQUEsS0FBUyxPQUFPO1FBQzdCLE1BQU0sSUFBSUksVUFBQSxDQUFXLDZEQUFrRTJ6QyxNQUFBLElBQVVDLFdBQUEsR0FBY0QsTUFBQSxDQUFPdnhDLEtBQUEsSUFBUyxPQUFPLEtBQUs2ekIsR0FBRztNQUNoSjtNQUVBLElBQUkwZCxNQUFBLElBQVVDLFdBQUEsRUFBYTtRQUN6QixLQUFLbGxDLEtBQUEsS0FBVSxLQUFLQSxLQUFBLEtBQVUsS0FBS2lsQyxNQUFBLENBQU92eEMsS0FBQSxNQUFXLFFBQVE2ekIsR0FBQSxDQUFJcjJCLElBQUEsS0FBUyt6QyxNQUFBLENBQU92eEMsS0FBQSxHQUFRO1VBQ3ZGLEVBQUVBLEtBQUE7VUFFRixJQUFJQSxLQUFBLEtBQVV1eEMsTUFBQSxDQUFPdHpDLE1BQUEsRUFBUTtZQUUzQm0yQixNQUFBLENBQU9oWixNQUFBLENBQU8sQ0FBQ3BiLEtBQUEsRUFBT0EsS0FBSztZQUMzQjtVQUNGO1FBQ0YsT0FBTztVQUNMQSxLQUFBLEdBQVE7UUFDVjtNQUNGO0lBQ0YsU0FBU3NNLEtBQUEsS0FBVSxLQUFLa2xDLFdBQUE7SUFJeEIsSUFBSXgwQyxLQUFBLENBQU1RLElBQUEsS0FBUyxPQUFPNDJCLE1BQUEsQ0FBT0EsTUFBQSxDQUFPbjJCLE1BQUEsR0FBUyxHQUFHVCxJQUFBLEtBQVMsS0FBSztNQUNoRTQyQixNQUFBLENBQU81USxHQUFBLENBQUk7TUFDWDRRLE1BQUEsQ0FBT3hYLEtBQUEsQ0FBTTtJQUNmO0lBRUF3WCxNQUFBLENBQU9TLE9BQUEsQ0FBUTtJQUVmLE9BQU87TUFDTFQsTUFBQTtNQUNBcDNCLEtBQUE7TUFDQUMsR0FBQSxFQUFLNDJCO0lBQ1A7RUFDRjtFQU9Bd2IsWUFBWTF1QixPQUFBLEVBQVMrVCxXQUFBLEVBQVk7SUFDL0IsSUFBSUEsV0FBQSxFQUFZO01BQ2QsSUFBSUEsV0FBQSxDQUFXejJCLE1BQUEsS0FBVzBpQixPQUFBLEdBQVUsR0FBRztRQUNyQyxNQUFNLElBQUkvaUIsVUFBQSxDQUFXLDREQUE0RDtNQUNuRjtNQUVBLElBQUkyekMsTUFBQSxHQUFTN2MsV0FBQSxDQUFXO01BRXhCLFNBQVN0dUIsQ0FBQSxHQUFJLEdBQUdBLENBQUEsR0FBSW1yQyxNQUFBLENBQU90ekMsTUFBQSxFQUFRbUksQ0FBQSxJQUFLO1FBQ3RDLElBQUl5dEIsR0FBQSxHQUFNLEtBQUtFLFFBQUEsQ0FBUztRQUV4QixJQUFJd2QsTUFBQSxDQUFPbnJDLENBQUEsTUFBT3l0QixHQUFBLENBQUlyMkIsSUFBQSxFQUFNO1VBQzFCLE1BQU0sSUFBSUksVUFBQSxDQUFXLGlEQUFpRGkyQixHQUFHO1FBQzNFO01BQ0Y7SUFDRjtJQUVBLElBQUkvRixJQUFBLEdBQU8sRUFBQztJQUVaLFNBQVN4bkIsRUFBQSxHQUFLLEdBQUdBLEVBQUEsR0FBS3FhLE9BQUEsRUFBU3JhLEVBQUEsSUFBTTtNQUNuQ3duQixJQUFBLENBQUsxckIsSUFBQSxDQUFLLEtBQUt1eUIsVUFBQSxDQUFXRCxXQUFBLElBQWNBLFdBQUEsQ0FBV3B1QixFQUFBLEdBQUssRUFBRSxFQUFFOHRCLE1BQU07SUFDcEU7SUFFQSxPQUFPdEcsSUFBQTtFQUNUO0VBT0EyakIsZUFBZTFILE1BQUEsRUFBUTtJQUNyQixLQUFLa0gsY0FBQSxJQUFrQmxILE1BQUE7SUFFdkIsSUFBSSxLQUFLa0gsY0FBQSxHQUFpQixLQUFLanFCLFFBQUEsQ0FBUzlqQixTQUFBLEVBQVc7TUFDakQsTUFBTSxJQUFJdEYsVUFBQSxDQUFXLDBFQUErRTtJQUN0RztFQUNGO0VBc0JBd3hDLFdBQVdzQyxjQUFBLEVBQWdCO0lBQ3pCLElBQUlDLFFBQUEsR0FBVyxLQUFLNWQsUUFBQSxDQUFTO0lBQzdCLElBQUloMkIsSUFBQSxHQUFPNHpDLFFBQUEsQ0FBU24wQyxJQUFBO0lBQ3BCLElBQUlvMEMsU0FBQSxHQUFZLENBQUNELFFBQUEsQ0FBU2wwQyxRQUFBLEdBQVcsS0FBS28wQyxhQUFBLENBQWM5ekMsSUFBSSxJQUFJO0lBRWhFLElBQUk2ekMsU0FBQSxJQUFhLFFBQVFGLGNBQUEsSUFBa0JFLFNBQUEsQ0FBVXZkLFlBQUEsRUFBYztNQUNqRSxJQUFJcWQsY0FBQSxJQUFrQkUsU0FBQSxJQUFhLFFBQVE3ekMsSUFBQSxDQUFLLE9BQU8sUUFBUSxDQUFDLEtBQUs2eEMsU0FBQSxDQUFVN3hDLElBQUksR0FBRztRQUNwRixNQUFNLElBQUlILFVBQUEsQ0FBVyxpQ0FBaUNHLElBQUk7TUFDNUQ7TUFFQSxLQUFLazNCLFNBQUEsQ0FBVTBjLFFBQVE7TUFDdkIsT0FBTztJQUNUO0lBRUEsS0FBS0YsY0FBQSxDQUFlLENBQUM7SUFDckIsSUFBSXJkLE1BQUEsR0FBU3dkLFNBQUEsQ0FBVXhkLE1BQUE7SUFDdkIsSUFBSXRHLElBQUEsR0FBTyxLQUFLdWhCLFdBQUEsQ0FBWXVDLFNBQUEsQ0FBVWp4QixPQUFBLEVBQVNpeEIsU0FBQSxDQUFVOWMsVUFBVTtJQUVuRSxJQUFJOGMsU0FBQSxDQUFVanhCLE9BQUEsRUFBUztNQUVyQnlULE1BQUEsR0FBU0EsTUFBQSxDQUFPOTFCLEtBQUEsQ0FBTTtNQUV0QixTQUFTOEgsQ0FBQSxHQUFJZ3VCLE1BQUEsQ0FBT24yQixNQUFBLEdBQVMsR0FBR21JLENBQUEsSUFBSyxHQUFHLEVBQUVBLENBQUEsRUFBRztRQUMzQyxJQUFJeXRCLEdBQUEsR0FBTU8sTUFBQSxDQUFPaHVCLENBQUE7UUFFakIsSUFBSXl0QixHQUFBLENBQUlyMkIsSUFBQSxLQUFTLEtBQUs7VUFDcEIsSUFBSTRJLENBQUEsS0FBTSxHQUFHO1lBQ1gsTUFBTSxJQUFJeEksVUFBQSxDQUFXLCtDQUErQ2kyQixHQUFHO1VBQ3pFO1VBRUFBLEdBQUEsR0FBTU8sTUFBQSxDQUFPLEVBQUVodUIsQ0FBQTtVQUVmLElBQUl5dEIsR0FBQSxDQUFJcjJCLElBQUEsS0FBUyxLQUFLO1lBRXBCNDJCLE1BQUEsQ0FBT2haLE1BQUEsQ0FBT2hWLENBQUEsR0FBSSxHQUFHLENBQUM7VUFDeEIsV0FBVyxVQUFVbkYsSUFBQSxDQUFLNHlCLEdBQUEsQ0FBSXIyQixJQUFJLEdBQUc7WUFFbkM0MkIsTUFBQSxDQUFPaFosTUFBQSxDQUFPaFYsQ0FBQSxFQUFHLEdBQUcsR0FBRzBuQixJQUFBLENBQUssQ0FBQytGLEdBQUEsQ0FBSXIyQixJQUFBLEdBQU8sRUFBRTtVQUM1QyxPQUFPO1lBQ0wsTUFBTSxJQUFJSSxVQUFBLENBQVcsK0JBQStCaTJCLEdBQUc7VUFDekQ7UUFDRjtNQUNGO0lBQ0Y7SUFHQSxLQUFLdWQsVUFBQSxDQUFXaGQsTUFBTTtJQUN0QixPQUFPQSxNQUFBLENBQU9uMkIsTUFBQTtFQUNoQjtFQVNBaXlDLGtCQUFBLEVBQW9CO0lBQ2xCLEtBQUtkLFVBQUEsQ0FBVztJQUNoQixPQUFPLEtBQUs3YixNQUFBLENBQU87RUFDckI7RUFNQXVjLGdCQUFBLEVBQWtCO0lBQ2hCLFNBQVM7TUFDUCxJQUFJLEtBQUtWLFVBQUEsQ0FBVyxNQUFNLE9BQU87UUFFL0IsSUFBSXR4QyxLQUFBLEdBQVEsS0FBS2k2QixLQUFBLENBQU12VSxHQUFBLENBQUk7UUFHM0IsSUFBSTFsQixLQUFBLENBQU1KLFlBQUEsRUFBYztVQUN0QkksS0FBQSxDQUFNTixJQUFBLEdBQU87UUFDZjtRQUVBLE9BQU9NLEtBQUE7TUFDVDtJQUNGO0lBSUEsTUFBTSxJQUFJYSxLQUFBLENBQU07RUFDbEI7RUFPQW16QyxZQUFZL3pDLElBQUEsRUFBTTtJQUNoQixPQUFPLEtBQUtpRSxNQUFBLENBQU9tdEMsR0FBQSxDQUFJcHhDLElBQUksSUFBSSxLQUFLNjJCLFlBQUEsQ0FBYSxDQUFDLElBQUl0M0IsS0FBQSxDQUFNUyxJQUFJLENBQUMsQ0FBQyxJQUFJO0VBQ3hFO0VBUUE2MkIsYUFBYVIsTUFBQSxFQUFRO0lBQ25CLElBQUk3eUIsTUFBQSxHQUFTLEVBQUM7SUFDZCxJQUFJd3dDLGNBQUEsR0FBaUIsS0FBS2hhLEtBQUEsQ0FBTTk1QixNQUFBO0lBQ2hDLEtBQUttekMsVUFBQSxDQUFXaGQsTUFBTTtJQUV0QixPQUFPLEtBQUsyRCxLQUFBLENBQU05NUIsTUFBQSxHQUFTOHpDLGNBQUEsRUFBZ0I7TUFFekMsSUFBSSxLQUFLM0MsVUFBQSxDQUFXLElBQUksTUFBTSxPQUFPO1FBRW5DLElBQUl0eEMsS0FBQSxHQUFRLEtBQUtpNkIsS0FBQSxDQUFNdlUsR0FBQSxDQUFJO1FBRTNCLElBQUkxbEIsS0FBQSxDQUFNSixZQUFBLEVBQWM7VUFFdEJJLEtBQUEsQ0FBTUwsUUFBQSxHQUFXO1VBQ2pCSyxLQUFBLENBQU1KLFlBQUEsR0FBZTtRQUN2QjtRQUVBNkQsTUFBQSxDQUFPYSxJQUFBLENBQUt0RSxLQUFLO01BQ25CO0lBQ0Y7SUFJQSxLQUFLMnpDLGNBQUEsQ0FBZWx3QyxNQUFBLENBQU90RCxNQUFNO0lBQ2pDLE9BQU9zRCxNQUFBO0VBQ1Q7RUFPQXM4QixrQkFBa0I5L0IsSUFBQSxFQUFNO0lBQ3RCLElBQUlxMkIsTUFBQSxHQUFTLEtBQUswZCxXQUFBLENBQVkvekMsSUFBSTtJQUVsQyxJQUFJcTJCLE1BQUEsRUFBUTtNQUNWLE9BQU9BLE1BQUEsQ0FBT2huQixHQUFBLENBQUl0UCxLQUFBLElBQVNBLEtBQUEsQ0FBTU4sSUFBSSxFQUFFNlAsSUFBQSxDQUFLLEVBQUU7SUFDaEQsT0FBTztNQUNMLE9BQU8rbUIsTUFBQTtJQUNUO0VBQ0Y7RUFPQXlkLGNBQWM5ekMsSUFBQSxFQUFNO0lBQ2xCLElBQUlpMEMsVUFBQSxHQUFhLEtBQUtod0MsTUFBQSxDQUFPbXlCLEdBQUEsQ0FBSXAyQixJQUFJO0lBRXJDLElBQUlpMEMsVUFBQSxJQUFjLE1BQU07TUFFdEIsT0FBT0EsVUFBQTtJQUNUO0lBSUEsSUFBSWowQyxJQUFBLENBQUtFLE1BQUEsS0FBVyxHQUFHO01BQ3JCLElBQUlnMEMsT0FBQSxHQUFVLEtBQUtsMUMsS0FBQSxDQUFNc3hDLFFBQUEsQ0FBU3R3QyxJQUFBO01BRWxDLElBQUlrMEMsT0FBQSxJQUFXLFFBQVFBLE9BQUEsS0FBWSxJQUFJO1FBQ3JDO01BQ0Y7SUFDRjtJQUVBLElBQUlMLFNBQUEsR0FBWSxPQUFPSSxVQUFBLEtBQWUsYUFBYUEsVUFBQSxDQUFXLElBQUksSUFBSUEsVUFBQTtJQUV0RSxJQUFJLE9BQU9KLFNBQUEsS0FBYyxVQUFVO01BQ2pDLElBQUlqeEIsT0FBQSxHQUFVO01BRWQsSUFBSWl4QixTQUFBLENBQVUxeUMsT0FBQSxDQUFRLEdBQUcsTUFBTSxJQUFJO1FBQ2pDLElBQUlnekMsUUFBQSxHQUFXTixTQUFBLENBQVVyekMsT0FBQSxDQUFRLE9BQU8sRUFBRTtRQUUxQyxPQUFPMnpDLFFBQUEsQ0FBU2h6QyxPQUFBLENBQVEsT0FBT3loQixPQUFBLEdBQVUsRUFBRSxNQUFNLElBQUk7VUFDbkQsRUFBRUEsT0FBQTtRQUNKO01BQ0Y7TUFFQSxJQUFJd3hCLFNBQUEsR0FBWSxJQUFJaEUsS0FBQSxDQUFNeUQsU0FBQSxFQUFXLEtBQUs1cUIsUUFBUTtNQUNsRCxJQUFJb04sTUFBQSxHQUFTLEVBQUM7TUFDZCxJQUFJUCxHQUFBLEdBQU1zZSxTQUFBLENBQVUzRCxHQUFBLENBQUk7TUFFeEIsT0FBTzNhLEdBQUEsQ0FBSXIyQixJQUFBLEtBQVMsT0FBTztRQUN6QjQyQixNQUFBLENBQU9oeUIsSUFBQSxDQUFLeXhCLEdBQUc7UUFDZkEsR0FBQSxHQUFNc2UsU0FBQSxDQUFVM0QsR0FBQSxDQUFJO01BQ3RCO01BRUFwYSxNQUFBLENBQU9TLE9BQUEsQ0FBUTtNQUVmLElBQUlpYyxRQUFBLEdBQVc7UUFDYjFjLE1BQUE7UUFDQXpUO01BQ0Y7TUFDQSxPQUFPbXdCLFFBQUE7SUFDVDtJQUVBLE9BQU9jLFNBQUE7RUFDVDtFQVNBaEMsVUFBVTd4QyxJQUFBLEVBQU07SUFDZCxPQUFPLEtBQUtpRSxNQUFBLENBQU9tdEMsR0FBQSxDQUFJcHhDLElBQUksS0FBSzJ2QyxTQUFBLENBQVU3cEMsY0FBQSxDQUFlOUYsSUFBSSxLQUFLdVksT0FBQSxDQUFRRyxJQUFBLENBQUs1UyxjQUFBLENBQWU5RixJQUFJLEtBQUt1WSxPQUFBLENBQVE5WSxJQUFBLENBQUtxRyxjQUFBLENBQWU5RixJQUFJLEtBQUtnekMsZ0JBQUEsQ0FBaUJsdEMsY0FBQSxDQUFlOUYsSUFBSTtFQUNsTDtFQU1BdTJCLGFBQWF2MkIsSUFBQSxFQUFNO0lBQ2pCLElBQUltMkIsS0FBQSxHQUFRLEtBQUtseUIsTUFBQSxDQUFPbXlCLEdBQUEsQ0FBSXAyQixJQUFJO0lBQ2hDLE9BQU9tMkIsS0FBQSxJQUFTLE9BQU8sT0FBT0EsS0FBQSxLQUFVLFlBQVksT0FBT0EsS0FBQSxLQUFVLGNBQWMsQ0FBQ0EsS0FBQSxDQUFNRyxZQUFBLEdBQWVxWixTQUFBLENBQVU3cEMsY0FBQSxDQUFlOUYsSUFBSSxLQUFLLENBQUMydkMsU0FBQSxDQUFVM3ZDLElBQUEsRUFBTW1qQixTQUFBO0VBQzlKO0FBRUY7QUFHQSxJQUFJa3hCLGVBQUEsR0FBa0I7QUFDdEIsSUFBSUMsWUFBQSxHQUFleDhCLE1BQUEsQ0FBT3k4QixNQUFBLENBQU87RUFDL0IsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFFBQUs7RUFDTCxRQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7RUFDVixVQUFVO0FBQ1osQ0FBQztBQUlELElBQUlDLGNBQUEsR0FBaUI7RUFDbkIsVUFBSztJQUNILFFBQVE7SUFDUixRQUFRO0VBQ1Y7RUFDQSxVQUFLO0lBQ0gsUUFBUTtJQUNSLFFBQVE7RUFDVjtFQUNBLFVBQUs7SUFDSCxRQUFRO0lBQ1IsUUFBUTtFQUNWO0VBQ0EsVUFBSztJQUNILFFBQVE7SUFDUixRQUFRO0VBQ1Y7RUFDQSxVQUFLO0lBQ0gsUUFBUTtJQUNSLFFBQVE7RUFDVjtFQUNBLFVBQUs7SUFDSCxRQUFRO0lBQ1IsUUFBUTtFQUNWO0VBQ0EsVUFBSztJQUNILFFBQVE7SUFDUixRQUFRO0VBQ1Y7RUFDQSxVQUFLO0lBQ0gsUUFBUTtJQUNSLFFBQVE7RUFDVjtFQUNBLFVBQUs7SUFDSCxRQUFRO0lBQ1IsUUFBUTtFQUNWO0VBQ0EsVUFBSztJQUNILFFBQVE7SUFDUixRQUFRO0VBQ1Y7RUFDQSxVQUFLO0lBQ0gsUUFBUTtFQUNWO0VBQ0EsVUFBSztJQUNILFFBQVE7RUFDVjtBQUNGO0FBQ0EsSUFBSUMsY0FBQSxHQUFpQjtFQUNuQixRQUFLO0VBQ0wsUUFBSztFQUNMLFFBQUs7RUFDTCxVQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFFBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFFBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFFBQUs7RUFDTCxRQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxRQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsUUFBSztFQUNMLFFBQUs7RUFDTCxRQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxRQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFFBQUs7RUFDTCxRQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxRQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxRQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxRQUFLO0VBQ0wsUUFBSztFQUNMLFFBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxRQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsUUFBSztFQUNMLFFBQUs7RUFDTCxRQUFLO0VBQ0wsVUFBSztFQUNMLFFBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxRQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxRQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFFBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxRQUFLO0VBQ0wsUUFBSztFQUNMLFFBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFFBQUs7RUFDTCxRQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFFBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxRQUFLO0VBQ0wsUUFBSztFQUNMLFFBQUs7RUFDTCxVQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxRQUFLO0VBQ0wsUUFBSztFQUNMLFFBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsUUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7RUFDTCxVQUFLO0VBQ0wsVUFBSztFQUNMLFVBQUs7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